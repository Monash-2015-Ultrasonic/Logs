
SYSTEM.elf:     file format elf32-littlenios2
SYSTEM.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001a4

Program Header:
    LOAD off    0x00001020 vaddr 0x00200020 paddr 0x00000000 align 2**12
         filesz 0x000001a4 memsz 0x000001a4 flags r-x
    LOAD off    0x000021a4 vaddr 0x000001a4 paddr 0x000001a4 align 2**12
         filesz 0x0000eb30 memsz 0x0000eb30 flags r-x
    LOAD off    0x00010cd4 vaddr 0x0000ecd4 paddr 0x000105f8 align 2**12
         filesz 0x00001924 memsz 0x00001924 flags rw-
    LOAD off    0x00012f1c vaddr 0x00011f1c paddr 0x00011f1c align 2**12
         filesz 0x00000000 memsz 0x00000360 flags rw-
    LOAD off    0x00013000 vaddr 0x00200000 paddr 0x00200000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00200000  00200000  00013000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a4  00200020  00000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e4f4  000001a4  000001a4  000021a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000063c  0000e698  0000e698  00010698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001924  0000ecd4  000105f8  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000360  00011f1c  00011f1c  00012f1c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00013020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d58  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002afd  00000000  00000000  00013da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00018198  00000000  00000000  0001689d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006e51  00000000  00000000  0002ea35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010d9e  00000000  00000000  00035886  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001794  00000000  00000000  00046624  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001aec  00000000  00000000  00047db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006bc4  00000000  00000000  000498a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00050468  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000830  00000000  00000000  000504a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0005452b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  0005452e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00054536  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00054537  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00054538  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00054541  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0005454a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  00054553  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000023  00000000  00000000  00054560  2**0
                  CONTENTS, READONLY
 26 .jdi          00005371  00000000  00000000  00054583  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0026b56a  00000000  00000000  000598f4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00200000 l    d  .entry	00000000 .entry
00200020 l    d  .exceptions	00000000 .exceptions
000001a4 l    d  .text	00000000 .text
0000e698 l    d  .rodata	00000000 .rodata
0000ecd4 l    d  .rwdata	00000000 .rwdata
00011f1c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001e4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 LCD.c
00000000 l    df *ABS*	00000000 RuntimeFunctions.c
00000000 l    df *ABS*	00000000 config.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 tests.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_acos.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_acos.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0000e798 l     O .rodata	00000108 two_over_pi
0000e718 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0000e8a0 l     O .rodata	00000010 init_jk
0000e8b0 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00008bb4 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00009414 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a564 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0000ed0c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_load.c
0000b128 l     F .text	00000074 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f10c l     O .rwdata	00001060 JTAG_UART
0001016c l     O .rwdata	00000120 LCD
0000b2e8 l     F .text	00000040 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b558 l     F .text	00000230 altera_avalon_jtag_uart_irq
0000b788 l     F .text	000000b8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
000105cc l     O .rwdata	00000004 colstart
0000be2c l     F .text	000000c0 lcd_write_command
0000beec l     F .text	000000dc lcd_write_data
0000bfc8 l     F .text	000000e0 lcd_clear_screen
0000c0a8 l     F .text	0000021c lcd_repaint_screen
0000c2c4 l     F .text	000000e8 lcd_scroll_up
0000c3ac l     F .text	000002ec lcd_handle_escape
0000cbdc l     F .text	000000d4 alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d21c l     F .text	00000068 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000d2a8 l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d398 l     F .text	00000068 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d7f0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000d950 l     F .text	00000100 alt_file_locked
0000dbe4 l     F .text	00000068 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0000eb51 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000e470 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000e624 l     F .text	00000048 alt_sim_halt
0000319c g     F .text	00000130 init_FIFO
0000b19c g     F .text	00000074 alt_main
000104d0 g     O .rwdata	00000004 CH1_Yn3ML
00011fec g     O .bss	00000100 alt_irq
0001055c g     O .rwdata	00000004 CH3_Yn3MU
00010570 g     O .rwdata	00000004 CH4_RD
00007750 g     F .text	00000018 fabs
00004154 g     F .text	00000130 sqrt
000105f8 g       *ABS*	00000000 __flash_rwdata_start
00009f34 g     F .text	00000088 __eqdf2
00007e30 g     F .text	00000718 __divdi3
00010560 g     O .rwdata	00000004 CH3_Yn3U
00010460 g     O .rwdata	00000004 CH0_RD
00010564 g     O .rwdata	00000004 CH4_timer_rst
00011f38 g     O .bss	00000008 CH3_nOut
0001048c g     O .rwdata	00000004 CH0_Yn3ML
000105a0 g     O .rwdata	00000004 CH4_Yn3MU
000104cc g     O .rwdata	00000004 CH1_Yn3L
00010490 g     O .rwdata	00000004 CH0_Yn3MU
0001056c g     O .rwdata	00000004 CH4_peakFound
00011f40 g     O .bss	00000004 calc_mode
000104a0 g     O .rwdata	00000004 CH1_peakFound
0001046c g     O .rwdata	00000004 CH0_Yn1ML
0000904c g     F .text	00000174 __divsf3
00010530 g     O .rwdata	00000004 CH3_TIME
000029c0 g     F .text	00000254 determinant
0000037c g     F .text	00001288 sampleChannels
000105a8 g     O .rwdata	00000001 threshold
000104c0 g     O .rwdata	00000004 CH1_Yn2ML
00009fbc g     F .text	00000088 __gtdf2
0000b01c g     F .text	00000010 __errno
00200000 g     F .entry	0000000c __reset
0001058c g     O .rwdata	00000004 CH4_Yn2ML
00003a80 g     F .text	0000006c start_SYSTEM
00000000 g       *ABS*	00000000 __flash_exceptions_start
00011f98 g     O .bss	00000004 errno
00010494 g     O .rwdata	00000004 CH0_Yn3U
0000a324 g     F .text	00000038 __make_dp
00003b64 g     F .text	00000224 floor
00002c14 g     F .text	000000f4 transpose
00010438 g     O .rwdata	00000004 Nreceivers
000104b8 g     O .rwdata	00000004 CH1_Yn1U
0000aadc g     F .text	0000002c __make_fp
00010520 g     O .rwdata	00000004 CH3_timer_rst
00011f84 g     O .bss	00000004 alt_argv
00018434 g       *ABS*	00000000 _gp
0000b210 g     F .text	00000038 usleep
00008d98 g     F .text	00000070 __subsf3
00010584 g     O .rwdata	00000004 CH4_Yn1U
00010458 g     O .rwdata	00000004 CH0_threshold
00011f74 g     O .bss	00000008 thresholdMultiplier
000104d4 g     O .rwdata	00000004 CH1_Yn3MU
000102b4 g     O .rwdata	00000180 alt_fd_list
00010528 g     O .rwdata	00000004 CH3_peakFound
00002e54 g     F .text	00000114 float2int
00005598 g     F .text	00000828 __ieee754_rem_pio2
00011f20 g     O .bss	00000004 realR
0000dea8 g     F .text	0000009c alt_find_dev
0000e204 g     F .text	000000a0 memcpy
00010550 g     O .rwdata	00000004 CH3_Yn2U
00001e14 g     F .text	00000708 find_coordinates
0000a154 g     F .text	000000f8 __floatsidf
0000d8d0 g     F .text	00000080 alt_io_redirect
0000a0cc g     F .text	00000088 __ltdf2
000105bc g     O .rwdata	00000004 sumHsq_CH4
0000e698 g       *ABS*	00000000 __DTOR_END__
00002834 g     F .text	0000018c find_denominator
00010454 g     O .rwdata	00000004 CH0_timer_rst
000104b0 g     O .rwdata	00000004 CH1_Yn1ML
00010478 g     O .rwdata	00000004 CH0_Yn2L
0000b9b8 g     F .text	0000022c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000a6a0 g     F .text	00000008 __udivsi3
00006088 g     F .text	0000052c __kernel_cos
0000a768 g     F .text	000000a4 __fixunsdfsi
00000000 g       *ABS*	00000000 __alt_mem_SSRAM
000104a4 g     O .rwdata	00000004 CH1_RD
00011f44 g     O .bss	00000004 phi
00010474 g     O .rwdata	00000004 CH0_Yn1U
00011f34 g     O .bss	00000004 k
000105e0 g     O .rwdata	00000004 alt_max_fd
0000ae1c g     F .text	00000138 __unpack_d
00007438 g     F .text	00000318 __kernel_sin
000093c0 g     F .text	00000054 __extendsfdf2
000098a4 g     F .text	00000074 __adddf3
000105c0 g     O .rwdata	00000004 __fdlib_version
000105c8 g     O .rwdata	00000004 _global_impure_ptr
0001227c g       *ABS*	00000000 __bss_end
0000d6f0 g     F .text	00000100 alt_iic_isr_register
0000dd6c g     F .text	00000114 alt_tick
00008548 g     F .text	0000066c __udivdi3
0000a3d0 g     F .text	00000194 __floatunsidf
00011f48 g     O .bss	00000004 distance
000105f4 g     O .rwdata	00000004 __ctype_ptr
0001044c g     O .rwdata	00000004 det_on
0000d6a0 g     F .text	00000050 alt_ic_irq_enabled
000104e0 g     O .rwdata	00000004 CH2_threshold
0000dccc g     F .text	000000a0 alt_alarm_stop
000104a8 g     O .rwdata	00000004 CH1_TIME
00011f8c g     O .bss	00000004 alt_irq_active
0001047c g     O .rwdata	00000004 CH0_Yn2ML
002000f4 g     F .exceptions	000000d0 alt_irq_handler
0001028c g     O .rwdata	00000028 alt_dev_null
000065b4 g     F .text	00000e84 __kernel_rem_pio2
000002e0 g     F .text	0000009c LCD_Display
000104c4 g     O .rwdata	00000004 CH1_Yn2MU
0000a96c g     F .text	000000c8 __unpack_f
00010448 g     O .rwdata	00000004 sub_on
0000d284 g     F .text	00000024 alt_dcache_flush_all
0000a24c g     F .text	000000d8 __fixdfsi
00010464 g     O .rwdata	00000004 CH0_TIME
000104b4 g     O .rwdata	00000004 CH1_Yn1MU
00011f4c g     O .bss	00000004 theta
00007c10 g     F .text	000000e0 __floatdisf
000105f8 g       *ABS*	00000000 __ram_rwdata_end
000105d8 g     O .rwdata	00000008 alt_dev_list
00011f2c g     O .bss	00000004 max_error
00009238 g     F .text	00000078 __gtsf2
0000ecd4 g     O .rwdata	00000018 LCD_CMD
00010514 g     O .rwdata	00000004 CH2_Yn3ML
0000ecd4 g       *ABS*	00000000 __ram_rodata_end
00011f9c g     O .bss	00000014 z
00011f50 g     O .bss	00000008 CH1_nOut
00010590 g     O .rwdata	00000004 CH4_Yn2MU
00001604 g     F .text	000002e8 qInterp
0000a6a8 g     F .text	00000008 __umodsi3
00010554 g     O .rwdata	00000004 CH3_Yn3L
00001b54 g     F .text	000002c0 find_constants
0001227c g       *ABS*	00000000 end
000104f0 g     O .rwdata	00000004 CH2_Yn1L
0000a80c g     F .text	00000160 __pack_f
00010588 g     O .rwdata	00000004 CH4_Yn2L
0000c698 g     F .text	00000544 altera_avalon_lcd_16207_write
00010508 g     O .rwdata	00000004 CH2_Yn2MU
000018ec g     F .text	00000268 Display_Results
0000b490 g     F .text	000000c8 altera_avalon_jtag_uart_init
00011f7c g     O .bss	00000004 i
000104d8 g     O .rwdata	00000004 CH1_Yn3U
00004cdc g     F .text	000008bc __ieee754_asin
0000e694 g       *ABS*	00000000 __CTOR_LIST__
00200000 g       *ABS*	00000000 __alt_stack_pointer
0000a6e8 g     F .text	00000080 __clzsi2
0000bbe4 g     F .text	00000248 altera_avalon_jtag_uart_write
000105b8 g     O .rwdata	00000004 sumHsq_CH3
000104e4 g     O .rwdata	00000004 CH2_peakFound
00010468 g     O .rwdata	00000004 CH0_Yn1L
0000e474 g     F .text	000001b0 __call_exitprocs
000001a4 g     F .text	00000044 _start
00011f90 g     O .bss	00000004 _alt_tick_rate
00003d88 g     F .text	0000016c sin
00002d08 g     F .text	0000014c matrix_multiply
00007da8 g     F .text	00000088 __floatundidf
00011f94 g     O .bss	00000004 _alt_nticks
0000b284 g     F .text	00000064 alt_sys_init
00003824 g     F .text	0000025c init_SYSTEM
00009328 g     F .text	00000098 __floatsisf
0000e33c g     F .text	00000134 __register_exitproc
00010578 g     O .rwdata	00000004 CH4_Yn1L
000104ac g     O .rwdata	00000004 CH1_Yn1L
000105ac g     O .rwdata	00000004 sumHsq_CH0
0001052c g     O .rwdata	00000004 CH3_RD
0000b840 g     F .text	0000007c altera_avalon_jtag_uart_close
0000a6b0 g     F .text	00000038 __mulsi3
0000ecd4 g       *ABS*	00000000 __ram_rwdata_start
0000e698 g       *ABS*	00000000 __ram_rodata_start
000091c0 g     F .text	00000078 __eqsf2
000104bc g     O .rwdata	00000004 CH1_Yn2L
0000b328 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00010540 g     O .rwdata	00000004 CH3_Yn1U
0000e06c g     F .text	000000d8 alt_get_fd
0001049c g     O .rwdata	00000004 CH1_threshold
0000cfb0 g     F .text	00000164 alt_busy_sleep
0000af54 g     F .text	000000c8 __fpcmp_parts_d
000104ec g     O .rwdata	00000004 CH2_TIME
00007ad8 g     F .text	00000060 __fixsfdi
00002f68 g     F .text	00000120 init_ADC
0000e190 g     F .text	00000074 memcmp
0000b3e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001227c g       *ABS*	00000000 __alt_stack_base
0000b438 g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
00010444 g     O .rwdata	00000004 fifo_rst
00007cf0 g     F .text	000000b8 __floatundisf
00010484 g     O .rwdata	00000004 CH0_Yn2U
00011f58 g     O .bss	00000008 CH0_nOut
00009cdc g     F .text	00000258 __divdf3
00010538 g     O .rwdata	00000004 CH3_Yn1ML
00010558 g     O .rwdata	00000004 CH3_Yn3ML
00009918 g     F .text	000003c4 __muldf3
00011fb0 g     O .bss	00000014 counter
0000e8f0 g     O .rodata	00000010 __thenan_sf
0000df44 g     F .text	00000128 alt_find_file
0000d2dc g     F .text	000000bc alt_dev_llist_insert
0000ecec g     O .rwdata	00000010 line1
00011f1c g       *ABS*	00000000 __bss_start
000001e8 g     F .text	0000007c LCD_Init
0001043c g     O .rwdata	00000004 data
0000e2a4 g     F .text	00000098 memset
00003aec g     F .text	00000078 main
00200000 g       *ABS*	00000000 __alt_mem_RAM
000104c8 g     O .rwdata	00000004 CH1_Yn2U
00011f88 g     O .bss	00000004 alt_envp
0000b388 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000104e8 g     O .rwdata	00000004 CH2_RD
00011fc4 g     O .bss	00000014 d_2
0001057c g     O .rwdata	00000004 CH4_Yn1ML
000092b0 g     F .text	00000078 __ltsf2
0000ccb0 g     F .text	00000144 altera_avalon_lcd_16207_init
00007798 g     F .text	00000008 matherr
00010498 g     O .rwdata	00000004 CH1_timer_rst
0000a35c g     F .text	00000074 __truncdfsf2
000120ec g     O .bss	00000190 _atexit0
00011fd8 g     O .bss	00000014 y
00010500 g     O .rwdata	00000004 CH2_Yn2L
000105e4 g     O .rwdata	00000004 alt_errno
0001227c g       *ABS*	00000000 __alt_stack_limit
00007b38 g     F .text	000000d8 __fixunssfdi
0000a5e0 g     F .text	00000060 __divsi3
00003088 g     F .text	00000114 init_FIR
0000e900 g     O .rodata	00000014 __thenan_df
00010544 g     O .rwdata	00000004 CH3_Yn2L
000105a4 g     O .rwdata	00000004 CH4_Yn3U
0000e698 g       *ABS*	00000000 __CTOR_END__
00011f60 g     O .bss	00000004 L
00008e6c g     F .text	000001e0 __mulsf3
00010450 g     O .rwdata	00000004 adc_on
00010580 g     O .rwdata	00000004 CH4_Yn1MU
0000e698 g       *ABS*	00000000 __flash_rodata_start
00011f64 g     O .bss	00000008 CH2_nOut
0000e698 g       *ABS*	00000000 __DTOR_LIST__
00007990 g     F .text	00000024 copysign
000104f4 g     O .rwdata	00000004 CH2_Yn1ML
0000b248 g     F .text	0000003c alt_irq_init
0000dc4c g     F .text	00000080 alt_release_fd
0000e914 g     O .rodata	00000100 __clz_tab
00010574 g     O .rwdata	00000004 CH4_TIME
00011f6c g     O .bss	00000004 R
0000e144 g     F .text	00000014 atexit
00010470 g     O .rwdata	00000004 CH0_Yn1MU
00004024 g     F .text	00000130 asin
000104dc g     O .rwdata	00000004 CH2_timer_rst
000105c4 g     O .rwdata	00000004 _impure_ptr
00011f30 g     O .bss	00000004 error
00011f80 g     O .bss	00000004 alt_argc
000077b0 g     F .text	000001e0 scalbn
0000d46c g     F .text	0000006c _do_dtors
00010524 g     O .rwdata	00000004 CH3_threshold
00010594 g     O .rwdata	00000004 CH4_Yn2U
0000ecfc g     O .rwdata	00000010 line2
00200020 g       .exceptions	00000000 alt_irq_entry
0000cdf4 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
000032cc g     F .text	000000cc init_TIMER
000105d0 g     O .rwdata	00000008 alt_fs_list
00011f24 g     O .bss	00000004 realphi
0001051c g     O .rwdata	00000004 CH2_Yn3U
000077a0 g     F .text	00000010 nan
00200020 g       *ABS*	00000000 __ram_exceptions_start
00000264 g     F .text	0000007c LCD_LineSel
00005dc0 g     F .text	000002c8 __ieee754_sqrt
0000d4fc g     F .text	00000058 alt_ic_isr_register
00010434 g     O .rwdata	00000004 alt_stack_limit_value
0001054c g     O .rwdata	00000004 CH3_Yn2MU
00010480 g     O .rwdata	00000004 CH0_Yn2MU
000105f8 g       *ABS*	00000000 _edata
0001227c g       *ABS*	00000000 _end
002001c4 g       *ABS*	00000000 __ram_exceptions_end
00011f70 g     O .bss	00000004 pi
0000b8bc g     F .text	000000fc altera_avalon_jtag_uart_ioctl
0000d5f8 g     F .text	000000a8 alt_ic_irq_disable
00010548 g     O .rwdata	00000004 CH3_Yn2ML
000105b4 g     O .rwdata	00000004 sumHsq_CH2
0000de80 g     F .text	00000028 altera_nios2_qsys_irq_init
0000e158 g     F .text	00000038 exit
0001050c g     O .rwdata	00000004 CH2_Yn2U
00010504 g     O .rwdata	00000004 CH2_Yn2ML
00011f28 g     O .bss	00000004 realtheta
0000a640 g     F .text	00000060 __modsi3
000105b0 g     O .rwdata	00000004 sumHsq_CH1
00200000 g       *ABS*	00000000 __alt_data_end
00200020 g     F .exceptions	00000000 alt_exception
00011f1c g     O .bss	00000004 LCD
0000ea50 g     O .rodata	00000101 _ctype_
0001059c g     O .rwdata	00000004 CH4_Yn3ML
0000aa34 g     F .text	000000a8 __fpcmp_parts_f
0000e66c g     F .text	00000028 _exit
00007768 g     F .text	00000030 __isnand
0000ce54 g     F .text	0000015c alt_alarm_start
000079b4 g     F .text	00000124 __muldi3
0000b02c g     F .text	00000074 strlen
0000da50 g     F .text	00000194 open
0000a044 g     F .text	00000088 __gedf2
0000251c g     F .text	00000318 convert_results
0000d4d8 g     F .text	00000024 alt_icache_flush_all
000104fc g     O .rwdata	00000004 CH2_Yn1U
000105e8 g     O .rwdata	00000004 alt_priority_mask
0000d554 g     F .text	000000a4 alt_ic_irq_enable
00003ef4 g     F .text	00000130 acos
00003398 g     F .text	0000048c init_DETECTOR
00010510 g     O .rwdata	00000004 CH2_Yn3L
0001053c g     O .rwdata	00000004 CH3_Yn1MU
00010534 g     O .rwdata	00000004 CH3_Yn1L
00009824 g     F .text	00000080 __subdf3
000104f8 g     O .rwdata	00000004 CH2_Yn1MU
000105ec g     O .rwdata	00000008 alt_alarm_list
0000d400 g     F .text	0000006c _do_ctors
00010598 g     O .rwdata	00000004 CH4_Yn3L
00010518 g     O .rwdata	00000004 CH2_Yn3MU
00010440 g     O .rwdata	00000004 data_valid
0001045c g     O .rwdata	00000004 CH0_peakFound
0000d114 g     F .text	00000108 close
00008e08 g     F .text	00000064 __addsf3
00010488 g     O .rwdata	00000004 CH0_Yn3L
0000b0a0 g     F .text	00000088 alt_load
0000ab08 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00004284 g     F .text	00000a58 __ieee754_acos
00010568 g     O .rwdata	00000004 CH4_threshold



Disassembly of section .entry:

00200000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  200000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  200004:	08406914 	ori	at,at,420
    jmp r1
  200008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00200020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  200020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK

        bltu  sp, et, .Lstack_overflow
  200024:	de003236 	bltu	sp,et,2000f0 <alt_exception+0xd0>

#endif

#endif

        stw   ra,  0(sp)
  200028:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  20002c:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  200030:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  200034:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  200038:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  20003c:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  200040:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  200044:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  200048:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  20004c:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  200050:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  200054:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  200058:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  20005c:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  200060:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  200064:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  200068:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  20006c:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  200070:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  200074:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  200078:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  20007c:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  200080:	10000326 	beq	r2,zero,200090 <alt_exception+0x70>
        beq   r4, zero, .Lnot_irq
  200084:	20000226 	beq	r4,zero,200090 <alt_exception+0x70>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  200088:	02000f40 	call	2000f4 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  20008c:	00000306 	br	20009c <alt_exception+0x7c>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  200090:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  200094:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  200098:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  20009c:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  2000a0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  2000a4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  2000a8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  2000ac:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  2000b0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  2000b4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  2000b8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  2000bc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  2000c0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  2000c4:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  2000c8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  2000cc:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  2000d0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  2000d4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  2000d8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  2000dc:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  2000e0:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  2000e4:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  2000e8:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  2000ec:	ef80083a 	eret

#ifdef ALT_STACK_CHECK

.Lstack_overflow:
        break 3
  2000f0:	003da0fa 	break	3

002000f4 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  2000f4:	defff904 	addi	sp,sp,-28
  2000f8:	de00012e 	bgeu	sp,et,200100 <alt_irq_handler+0xc>
  2000fc:	003da0fa 	break	3
  200100:	dfc00615 	stw	ra,24(sp)
  200104:	df000515 	stw	fp,20(sp)
  200108:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  20010c:	0005313a 	rdctl	r2,ipending
  200110:	e0bffc15 	stw	r2,-16(fp)

  return active;
  200114:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  200118:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  20011c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  200120:	00800044 	movi	r2,1
  200124:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  200128:	e0ffff17 	ldw	r3,-4(fp)
  20012c:	e0bffe17 	ldw	r2,-8(fp)
  200130:	1884703a 	and	r2,r3,r2
  200134:	1005003a 	cmpeq	r2,r2,zero
  200138:	1000161e 	bne	r2,zero,200194 <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  20013c:	e0bffd17 	ldw	r2,-12(fp)
  200140:	00c00074 	movhi	r3,1
  200144:	18c7fb04 	addi	r3,r3,8172
  200148:	100490fa 	slli	r2,r2,3
  20014c:	10c5883a 	add	r2,r2,r3
  200150:	11400017 	ldw	r5,0(r2)
  200154:	e0bffd17 	ldw	r2,-12(fp)
  200158:	00c00074 	movhi	r3,1
  20015c:	18c7fb04 	addi	r3,r3,8172
  200160:	100490fa 	slli	r2,r2,3
  200164:	10c5883a 	add	r2,r2,r3
  200168:	10800104 	addi	r2,r2,4
  20016c:	11000017 	ldw	r4,0(r2)
  200170:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  200174:	0005313a 	rdctl	r2,ipending
  200178:	e0bffb15 	stw	r2,-20(fp)

  return active;
  20017c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  200180:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  200184:	e0bfff17 	ldw	r2,-4(fp)
  200188:	1004c03a 	cmpne	r2,r2,zero
  20018c:	103fe31e 	bne	r2,zero,20011c <alt_irq_handler+0x28>
  200190:	00000706 	br	2001b0 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  200194:	e0bffe17 	ldw	r2,-8(fp)
  200198:	1085883a 	add	r2,r2,r2
  20019c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  2001a0:	e0bffd17 	ldw	r2,-12(fp)
  2001a4:	10800044 	addi	r2,r2,1
  2001a8:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  2001ac:	003fde06 	br	200128 <alt_irq_handler+0x34>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  2001b0:	e037883a 	mov	sp,fp
  2001b4:	dfc00117 	ldw	ra,4(sp)
  2001b8:	df000017 	ldw	fp,0(sp)
  2001bc:	dec00204 	addi	sp,sp,8
  2001c0:	f800283a 	ret

Disassembly of section .text:

000001a4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1a4:	06c00834 	movhi	sp,32
    ori sp, sp, %lo(__alt_stack_pointer)
     1a8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1ac:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1b0:	d6a10d14 	ori	gp,gp,33844
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1b4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1b8:	1087c714 	ori	r2,r2,7964

    movhi r3, %hi(__bss_end)
     1bc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1c0:	18c89f14 	ori	r3,r3,8828

    beq r2, r3, 1f
     1c4:	10c00326 	beq	r2,r3,1d4 <_start+0x30>

0:
    stw zero, (r2)
     1c8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1cc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1d0:	10fffd36 	bltu	r2,r3,1c8 <_start+0x24>
     * If the user has selected stack checking then we need to set up a safe
     * value in the stack limit register so that the relocation functions
     * don't think the stack has overflowed (the contents of the rwdata
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
     1d4:	0031883a 	mov	et,zero
#endif

    call alt_load
     1d8:	000b0a00 	call	b0a0 <alt_load>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
     1dc:	d6200017 	ldw	et,-32768(gp)

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e0:	000b19c0 	call	b19c <alt_main>

000001e4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1e4:	003fff06 	br	1e4 <alt_after_alt_main>

000001e8 <LCD_Init>:

//===============================
// Initialisation sequence
//===============================
void LCD_Init()
{
     1e8:	defffd04 	addi	sp,sp,-12
     1ec:	de00012e 	bgeu	sp,et,1f4 <LCD_Init+0xc>
     1f0:	003da0fa 	break	3
     1f4:	dfc00215 	stw	ra,8(sp)
     1f8:	df000115 	stw	fp,4(sp)
     1fc:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < 4; i++) {
     200:	e03fff15 	stw	zero,-4(fp)
     204:	00000f06 	br	244 <LCD_Init+0x5c>
		IOWR(LCD_BASE, 0, LCD_CMD[i]);
     208:	e0bfff17 	ldw	r2,-4(fp)
     20c:	00c00074 	movhi	r3,1
     210:	18fb3504 	addi	r3,r3,-4908
     214:	1085883a 	add	r2,r2,r2
     218:	1085883a 	add	r2,r2,r2
     21c:	10c5883a 	add	r2,r2,r3
     220:	10c00017 	ldw	r3,0(r2)
     224:	00800834 	movhi	r2,32
     228:	108d7804 	addi	r2,r2,13792
     22c:	10c00035 	stwio	r3,0(r2)
		usleep(500);
     230:	01007d04 	movi	r4,500
     234:	000b2100 	call	b210 <usleep>
// Initialisation sequence
//===============================
void LCD_Init()
{
	int i;
	for (i = 0; i < 4; i++) {
     238:	e0bfff17 	ldw	r2,-4(fp)
     23c:	10800044 	addi	r2,r2,1
     240:	e0bfff15 	stw	r2,-4(fp)
     244:	e0bfff17 	ldw	r2,-4(fp)
     248:	10800110 	cmplti	r2,r2,4
     24c:	103fee1e 	bne	r2,zero,208 <LCD_Init+0x20>
		IOWR(LCD_BASE, 0, LCD_CMD[i]);
		usleep(500);
	}
}
     250:	e037883a 	mov	sp,fp
     254:	dfc00117 	ldw	ra,4(sp)
     258:	df000017 	ldw	fp,0(sp)
     25c:	dec00204 	addi	sp,sp,8
     260:	f800283a 	ret

00000264 <LCD_LineSel>:

//===============================
// LCD Control: Select line to Ouptut to
//===============================
void LCD_LineSel(int line)
{
     264:	defffd04 	addi	sp,sp,-12
     268:	de00012e 	bgeu	sp,et,270 <LCD_LineSel+0xc>
     26c:	003da0fa 	break	3
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	e13fff15 	stw	r4,-4(fp)
	switch (line) {
     280:	e0bfff17 	ldw	r2,-4(fp)
     284:	108000a0 	cmpeqi	r2,r2,2
     288:	1000011e 	bne	r2,zero,290 <LCD_LineSel+0x2c>
     28c:	00000706 	br	2ac <LCD_LineSel+0x48>
	case 2:
		IOWR(LCD_BASE, 0, LCD_CMD[5]);
     290:	00800074 	movhi	r2,1
     294:	10bb3504 	addi	r2,r2,-4908
     298:	10c00517 	ldw	r3,20(r2)
     29c:	00800834 	movhi	r2,32
     2a0:	108d7804 	addi	r2,r2,13792
     2a4:	10c00035 	stwio	r3,0(r2)
		break;
     2a8:	00000606 	br	2c4 <LCD_LineSel+0x60>
	case 1:
	default:
		IOWR(LCD_BASE, 0, LCD_CMD[4]);
     2ac:	00800074 	movhi	r2,1
     2b0:	10bb3504 	addi	r2,r2,-4908
     2b4:	10c00417 	ldw	r3,16(r2)
     2b8:	00800834 	movhi	r2,32
     2bc:	108d7804 	addi	r2,r2,13792
     2c0:	10c00035 	stwio	r3,0(r2)
		break;
	}
	usleep(500);
     2c4:	01007d04 	movi	r4,500
     2c8:	000b2100 	call	b210 <usleep>
}
     2cc:	e037883a 	mov	sp,fp
     2d0:	dfc00117 	ldw	ra,4(sp)
     2d4:	df000017 	ldw	fp,0(sp)
     2d8:	dec00204 	addi	sp,sp,8
     2dc:	f800283a 	ret

000002e0 <LCD_Display>:

//===============================
// LCD Control: Output to line specified
//===============================
void LCD_Display(char* text, int line)
{
     2e0:	defffa04 	addi	sp,sp,-24
     2e4:	de00012e 	bgeu	sp,et,2ec <LCD_Display+0xc>
     2e8:	003da0fa 	break	3
     2ec:	dfc00515 	stw	ra,20(sp)
     2f0:	df000415 	stw	fp,16(sp)
     2f4:	dc000315 	stw	r16,12(sp)
     2f8:	df000304 	addi	fp,sp,12
     2fc:	e13ffe15 	stw	r4,-8(fp)
     300:	e17fff15 	stw	r5,-4(fp)
	LCD_LineSel(line);
     304:	e13fff17 	ldw	r4,-4(fp)
     308:	00002640 	call	264 <LCD_LineSel>

	int i;
	for (i = 0; i < strlen(text); i++) {
     30c:	e03ffd15 	stw	zero,-12(fp)
     310:	00001006 	br	354 <LCD_Display+0x74>
		IOWR(LCD_BASE, 2, text[i]);
     314:	e0bffd17 	ldw	r2,-12(fp)
     318:	1007883a 	mov	r3,r2
     31c:	e0bffe17 	ldw	r2,-8(fp)
     320:	1885883a 	add	r2,r3,r2
     324:	10800003 	ldbu	r2,0(r2)
     328:	10c03fcc 	andi	r3,r2,255
     32c:	18c0201c 	xori	r3,r3,128
     330:	18ffe004 	addi	r3,r3,-128
     334:	00800834 	movhi	r2,32
     338:	108d7a04 	addi	r2,r2,13800
     33c:	10c00035 	stwio	r3,0(r2)
		usleep(100);
     340:	01001904 	movi	r4,100
     344:	000b2100 	call	b210 <usleep>
void LCD_Display(char* text, int line)
{
	LCD_LineSel(line);

	int i;
	for (i = 0; i < strlen(text); i++) {
     348:	e0bffd17 	ldw	r2,-12(fp)
     34c:	10800044 	addi	r2,r2,1
     350:	e0bffd15 	stw	r2,-12(fp)
     354:	e43ffd17 	ldw	r16,-12(fp)
     358:	e13ffe17 	ldw	r4,-8(fp)
     35c:	000b02c0 	call	b02c <strlen>
     360:	80bfec36 	bltu	r16,r2,314 <LCD_Display+0x34>
		IOWR(LCD_BASE, 2, text[i]);
		usleep(100);
	}
}
     364:	e037883a 	mov	sp,fp
     368:	dfc00217 	ldw	ra,8(sp)
     36c:	df000117 	ldw	fp,4(sp)
     370:	dc000017 	ldw	r16,0(sp)
     374:	dec00304 	addi	sp,sp,12
     378:	f800283a 	ret

0000037c <sampleChannels>:

//===============================
// Sample All Channel for a Detection:
//===============================
void sampleChannels(void)
{
     37c:	deffb704 	addi	sp,sp,-292
     380:	de00012e 	bgeu	sp,et,388 <sampleChannels+0xc>
     384:	003da0fa 	break	3
     388:	dfc04815 	stw	ra,288(sp)
     38c:	df004715 	stw	fp,284(sp)
     390:	dc404615 	stw	r17,280(sp)
     394:	dc004515 	stw	r16,276(sp)
     398:	df004504 	addi	fp,sp,276
	alt_u32 YnL;
	alt_u64 YnML, YnMU, YnU;

	if (*CH0_peakFound) {
     39c:	d0a00a17 	ldw	r2,-32728(gp)
     3a0:	10800017 	ldw	r2,0(r2)
     3a4:	1005003a 	cmpeq	r2,r2,zero
     3a8:	1000fc1e 	bne	r2,zero,79c <sampleChannels+0x420>
		*CH0_RD = 0x1;
     3ac:	d0e00b17 	ldw	r3,-32724(gp)
     3b0:	00800044 	movi	r2,1
     3b4:	18800015 	stw	r2,0(r3)
		*CH0_RD = 0x0;
     3b8:	d0a00b17 	ldw	r2,-32724(gp)
     3bc:	10000015 	stw	zero,0(r2)

		YnL				= *CH0_Yn1L;
     3c0:	d0a00d17 	ldw	r2,-32716(gp)
     3c4:	10800017 	ldw	r2,0(r2)
     3c8:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH0_Yn1ML;
     3cc:	d0a00e17 	ldw	r2,-32712(gp)
     3d0:	10800017 	ldw	r2,0(r2)
     3d4:	e0bffd15 	stw	r2,-12(fp)
     3d8:	1005d7fa 	srai	r2,r2,31
     3dc:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH0_Yn1MU;
     3e0:	d0a00f17 	ldw	r2,-32708(gp)
     3e4:	10800017 	ldw	r2,0(r2)
     3e8:	e0bffb15 	stw	r2,-20(fp)
     3ec:	1005d7fa 	srai	r2,r2,31
     3f0:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH0_Yn1U;
     3f4:	d0a01017 	ldw	r2,-32704(gp)
     3f8:	10800017 	ldw	r2,0(r2)
     3fc:	e0bff915 	stw	r2,-28(fp)
     400:	1005d7fa 	srai	r2,r2,31
     404:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn1DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
     408:	e1bffd17 	ldw	r6,-12(fp)
     40c:	01000134 	movhi	r4,4
     410:	213fffc4 	addi	r4,r4,-1
     414:	e17ffe17 	ldw	r5,-8(fp)
     418:	3104703a 	and	r2,r6,r4
     41c:	2806703a 	and	r3,r5,zero
     420:	100a983a 	sll	r5,r2,zero
     424:	0009883a 	mov	r4,zero
     428:	e1bfff17 	ldw	r6,-4(fp)
     42c:	000f883a 	mov	r7,zero
     430:	2185883a 	add	r2,r4,r6
     434:	1111803a 	cmpltu	r8,r2,r4
     438:	29c7883a 	add	r3,r5,r7
     43c:	40c9883a 	add	r4,r8,r3
     440:	2007883a 	mov	r3,r4
     444:	e0bff715 	stw	r2,-36(fp)
     448:	e0fff815 	stw	r3,-32(fp)
		alt_u64 Yn1NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
     44c:	e13ff917 	ldw	r4,-28(fp)
     450:	e17ffa17 	ldw	r5,-24(fp)
     454:	208fffcc 	andi	r2,r4,16383
     458:	2806703a 	and	r3,r5,zero
     45c:	100e943a 	slli	r7,r2,16
     460:	000d883a 	mov	r6,zero
     464:	e0bffb17 	ldw	r2,-20(fp)
     468:	100ad4ba 	srli	r5,r2,18
     46c:	e13ffc17 	ldw	r4,-16(fp)
     470:	e23ffb17 	ldw	r8,-20(fp)
     474:	200693ba 	slli	r3,r4,14
     478:	1946b03a 	or	r3,r3,r5
     47c:	400493ba 	slli	r2,r8,14
     480:	3089883a 	add	r4,r6,r2
     484:	2191803a 	cmpltu	r8,r4,r6
     488:	38cb883a 	add	r5,r7,r3
     48c:	4145883a 	add	r2,r8,r5
     490:	100b883a 	mov	r5,r2
     494:	200d883a 	mov	r6,r4
     498:	280f883a 	mov	r7,r5
     49c:	e13ffd17 	ldw	r4,-12(fp)
     4a0:	e17ffe17 	ldw	r5,-8(fp)
     4a4:	20bfff2c 	andhi	r2,r4,65532
     4a8:	2806703a 	and	r3,r5,zero
     4ac:	181093ba 	slli	r8,r3,14
     4b0:	1008d4ba 	srli	r4,r2,18
     4b4:	2208b03a 	or	r4,r4,r8
     4b8:	180ad4ba 	srli	r5,r3,18
     4bc:	3105883a 	add	r2,r6,r4
     4c0:	1191803a 	cmpltu	r8,r2,r6
     4c4:	3947883a 	add	r3,r7,r5
     4c8:	40c9883a 	add	r4,r8,r3
     4cc:	2007883a 	mov	r3,r4
     4d0:	e0bff515 	stw	r2,-44(fp)
     4d4:	e0fff615 	stw	r3,-40(fp)

		YnL				= *CH0_Yn2L;
     4d8:	d0a01117 	ldw	r2,-32700(gp)
     4dc:	10800017 	ldw	r2,0(r2)
     4e0:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH0_Yn2ML;
     4e4:	d0a01217 	ldw	r2,-32696(gp)
     4e8:	10800017 	ldw	r2,0(r2)
     4ec:	e0bffd15 	stw	r2,-12(fp)
     4f0:	1005d7fa 	srai	r2,r2,31
     4f4:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH0_Yn2MU;
     4f8:	d0a01317 	ldw	r2,-32692(gp)
     4fc:	10800017 	ldw	r2,0(r2)
     500:	e0bffb15 	stw	r2,-20(fp)
     504:	1005d7fa 	srai	r2,r2,31
     508:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH0_Yn2U;
     50c:	d0a01417 	ldw	r2,-32688(gp)
     510:	10800017 	ldw	r2,0(r2)
     514:	e0bff915 	stw	r2,-28(fp)
     518:	1005d7fa 	srai	r2,r2,31
     51c:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn2DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
     520:	e1bffd17 	ldw	r6,-12(fp)
     524:	01000134 	movhi	r4,4
     528:	213fffc4 	addi	r4,r4,-1
     52c:	e17ffe17 	ldw	r5,-8(fp)
     530:	3104703a 	and	r2,r6,r4
     534:	2806703a 	and	r3,r5,zero
     538:	100a983a 	sll	r5,r2,zero
     53c:	0009883a 	mov	r4,zero
     540:	e1bfff17 	ldw	r6,-4(fp)
     544:	000f883a 	mov	r7,zero
     548:	2185883a 	add	r2,r4,r6
     54c:	1111803a 	cmpltu	r8,r2,r4
     550:	29c7883a 	add	r3,r5,r7
     554:	40c9883a 	add	r4,r8,r3
     558:	2007883a 	mov	r3,r4
     55c:	e0bff315 	stw	r2,-52(fp)
     560:	e0fff415 	stw	r3,-48(fp)
		alt_u64 Yn2NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
     564:	e13ff917 	ldw	r4,-28(fp)
     568:	e17ffa17 	ldw	r5,-24(fp)
     56c:	208fffcc 	andi	r2,r4,16383
     570:	2806703a 	and	r3,r5,zero
     574:	100e943a 	slli	r7,r2,16
     578:	000d883a 	mov	r6,zero
     57c:	e0bffb17 	ldw	r2,-20(fp)
     580:	100ad4ba 	srli	r5,r2,18
     584:	e13ffc17 	ldw	r4,-16(fp)
     588:	e23ffb17 	ldw	r8,-20(fp)
     58c:	200693ba 	slli	r3,r4,14
     590:	1946b03a 	or	r3,r3,r5
     594:	400493ba 	slli	r2,r8,14
     598:	3089883a 	add	r4,r6,r2
     59c:	2191803a 	cmpltu	r8,r4,r6
     5a0:	38cb883a 	add	r5,r7,r3
     5a4:	4145883a 	add	r2,r8,r5
     5a8:	100b883a 	mov	r5,r2
     5ac:	200d883a 	mov	r6,r4
     5b0:	280f883a 	mov	r7,r5
     5b4:	e13ffd17 	ldw	r4,-12(fp)
     5b8:	e17ffe17 	ldw	r5,-8(fp)
     5bc:	20bfff2c 	andhi	r2,r4,65532
     5c0:	2806703a 	and	r3,r5,zero
     5c4:	181093ba 	slli	r8,r3,14
     5c8:	1008d4ba 	srli	r4,r2,18
     5cc:	2208b03a 	or	r4,r4,r8
     5d0:	180ad4ba 	srli	r5,r3,18
     5d4:	3105883a 	add	r2,r6,r4
     5d8:	1191803a 	cmpltu	r8,r2,r6
     5dc:	3947883a 	add	r3,r7,r5
     5e0:	40c9883a 	add	r4,r8,r3
     5e4:	2007883a 	mov	r3,r4
     5e8:	e0bff115 	stw	r2,-60(fp)
     5ec:	e0fff215 	stw	r3,-56(fp)

		YnL				= *CH0_Yn3L;
     5f0:	d0a01517 	ldw	r2,-32684(gp)
     5f4:	10800017 	ldw	r2,0(r2)
     5f8:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH0_Yn3ML;
     5fc:	d0a01617 	ldw	r2,-32680(gp)
     600:	10800017 	ldw	r2,0(r2)
     604:	e0bffd15 	stw	r2,-12(fp)
     608:	1005d7fa 	srai	r2,r2,31
     60c:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH0_Yn3MU;
     610:	d0a01717 	ldw	r2,-32676(gp)
     614:	10800017 	ldw	r2,0(r2)
     618:	e0bffb15 	stw	r2,-20(fp)
     61c:	1005d7fa 	srai	r2,r2,31
     620:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH0_Yn3U;
     624:	d0a01817 	ldw	r2,-32672(gp)
     628:	10800017 	ldw	r2,0(r2)
     62c:	e0bff915 	stw	r2,-28(fp)
     630:	1005d7fa 	srai	r2,r2,31
     634:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn3DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
     638:	e1bffd17 	ldw	r6,-12(fp)
     63c:	01000134 	movhi	r4,4
     640:	213fffc4 	addi	r4,r4,-1
     644:	e17ffe17 	ldw	r5,-8(fp)
     648:	3104703a 	and	r2,r6,r4
     64c:	2806703a 	and	r3,r5,zero
     650:	100a983a 	sll	r5,r2,zero
     654:	0009883a 	mov	r4,zero
     658:	e1bfff17 	ldw	r6,-4(fp)
     65c:	000f883a 	mov	r7,zero
     660:	2185883a 	add	r2,r4,r6
     664:	1111803a 	cmpltu	r8,r2,r4
     668:	29c7883a 	add	r3,r5,r7
     66c:	40c9883a 	add	r4,r8,r3
     670:	2007883a 	mov	r3,r4
     674:	e0bfef15 	stw	r2,-68(fp)
     678:	e0fff015 	stw	r3,-64(fp)
		alt_u64 Yn3NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
     67c:	e13ff917 	ldw	r4,-28(fp)
     680:	e17ffa17 	ldw	r5,-24(fp)
     684:	208fffcc 	andi	r2,r4,16383
     688:	2806703a 	and	r3,r5,zero
     68c:	100e943a 	slli	r7,r2,16
     690:	000d883a 	mov	r6,zero
     694:	e0bffb17 	ldw	r2,-20(fp)
     698:	100ad4ba 	srli	r5,r2,18
     69c:	e13ffc17 	ldw	r4,-16(fp)
     6a0:	e23ffb17 	ldw	r8,-20(fp)
     6a4:	200693ba 	slli	r3,r4,14
     6a8:	1946b03a 	or	r3,r3,r5
     6ac:	400493ba 	slli	r2,r8,14
     6b0:	3089883a 	add	r4,r6,r2
     6b4:	2191803a 	cmpltu	r8,r4,r6
     6b8:	38cb883a 	add	r5,r7,r3
     6bc:	4145883a 	add	r2,r8,r5
     6c0:	100b883a 	mov	r5,r2
     6c4:	200d883a 	mov	r6,r4
     6c8:	280f883a 	mov	r7,r5
     6cc:	e13ffd17 	ldw	r4,-12(fp)
     6d0:	e17ffe17 	ldw	r5,-8(fp)
     6d4:	20bfff2c 	andhi	r2,r4,65532
     6d8:	2806703a 	and	r3,r5,zero
     6dc:	181093ba 	slli	r8,r3,14
     6e0:	1008d4ba 	srli	r4,r2,18
     6e4:	2208b03a 	or	r4,r4,r8
     6e8:	180ad4ba 	srli	r5,r3,18
     6ec:	3105883a 	add	r2,r6,r4
     6f0:	1191803a 	cmpltu	r8,r2,r6
     6f4:	3947883a 	add	r3,r7,r5
     6f8:	40c9883a 	add	r4,r8,r3
     6fc:	2007883a 	mov	r3,r4
     700:	e0bfed15 	stw	r2,-76(fp)
     704:	e0ffee15 	stw	r3,-72(fp)

		int n 			= *CH0_TIME;
     708:	d0a00c17 	ldw	r2,-32720(gp)
     70c:	10800017 	ldw	r2,0(r2)
     710:	e0bfec15 	stw	r2,-80(fp)

		CH0_nOut = qInterp(1000000, n-2, Yn1NUM, Yn1DEN, Yn2NUM, Yn2DEN, Yn3NUM, Yn3DEN);
     714:	e0bfec17 	ldw	r2,-80(fp)
     718:	117fff84 	addi	r5,r2,-2
     71c:	e0bff717 	ldw	r2,-36(fp)
     720:	d8800015 	stw	r2,0(sp)
     724:	e0bff817 	ldw	r2,-32(fp)
     728:	d8800115 	stw	r2,4(sp)
     72c:	e0bff117 	ldw	r2,-60(fp)
     730:	d8800215 	stw	r2,8(sp)
     734:	e0bff217 	ldw	r2,-56(fp)
     738:	d8800315 	stw	r2,12(sp)
     73c:	e0bff317 	ldw	r2,-52(fp)
     740:	d8800415 	stw	r2,16(sp)
     744:	e0bff417 	ldw	r2,-48(fp)
     748:	d8800515 	stw	r2,20(sp)
     74c:	e0bfed17 	ldw	r2,-76(fp)
     750:	d8800615 	stw	r2,24(sp)
     754:	e0bfee17 	ldw	r2,-72(fp)
     758:	d8800715 	stw	r2,28(sp)
     75c:	e0bfef17 	ldw	r2,-68(fp)
     760:	d8800815 	stw	r2,32(sp)
     764:	e0bff017 	ldw	r2,-64(fp)
     768:	d8800915 	stw	r2,36(sp)
     76c:	010003f4 	movhi	r4,15
     770:	21109004 	addi	r4,r4,16960
     774:	e1bff517 	ldw	r6,-44(fp)
     778:	e1fff617 	ldw	r7,-40(fp)
     77c:	00016040 	call	1604 <qInterp>
     780:	1009883a 	mov	r4,r2
     784:	180b883a 	mov	r5,r3
     788:	d126c915 	stw	r4,-25820(gp)
     78c:	00800074 	movhi	r2,1
     790:	1087d704 	addi	r2,r2,8028
     794:	11400015 	stw	r5,0(r2)
     798:	00000406 	br	7ac <sampleChannels+0x430>
	} else {
		CH0_nOut = 0;
     79c:	d026c915 	stw	zero,-25820(gp)
     7a0:	00800074 	movhi	r2,1
     7a4:	1087d704 	addi	r2,r2,8028
     7a8:	10000015 	stw	zero,0(r2)
	}

	usleep(0.001 seconds);
     7ac:	0100fa04 	movi	r4,1000
     7b0:	000b2100 	call	b210 <usleep>

	if (*CH1_peakFound) {
     7b4:	d0a01b17 	ldw	r2,-32660(gp)
     7b8:	10800017 	ldw	r2,0(r2)
     7bc:	1005003a 	cmpeq	r2,r2,zero
     7c0:	1000fc1e 	bne	r2,zero,bb4 <sampleChannels+0x838>
		*CH1_RD = 0x1;
     7c4:	d0e01c17 	ldw	r3,-32656(gp)
     7c8:	00800044 	movi	r2,1
     7cc:	18800015 	stw	r2,0(r3)
		*CH1_RD = 0x0;
     7d0:	d0a01c17 	ldw	r2,-32656(gp)
     7d4:	10000015 	stw	zero,0(r2)

		YnL				= *CH1_Yn1L;
     7d8:	d0a01e17 	ldw	r2,-32648(gp)
     7dc:	10800017 	ldw	r2,0(r2)
     7e0:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH1_Yn1ML;
     7e4:	d0a01f17 	ldw	r2,-32644(gp)
     7e8:	10800017 	ldw	r2,0(r2)
     7ec:	e0bffd15 	stw	r2,-12(fp)
     7f0:	1005d7fa 	srai	r2,r2,31
     7f4:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH1_Yn1MU;
     7f8:	d0a02017 	ldw	r2,-32640(gp)
     7fc:	10800017 	ldw	r2,0(r2)
     800:	e0bffb15 	stw	r2,-20(fp)
     804:	1005d7fa 	srai	r2,r2,31
     808:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH1_Yn1U;
     80c:	d0a02117 	ldw	r2,-32636(gp)
     810:	10800017 	ldw	r2,0(r2)
     814:	e0bff915 	stw	r2,-28(fp)
     818:	1005d7fa 	srai	r2,r2,31
     81c:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn1DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
     820:	e1bffd17 	ldw	r6,-12(fp)
     824:	01000134 	movhi	r4,4
     828:	213fffc4 	addi	r4,r4,-1
     82c:	e17ffe17 	ldw	r5,-8(fp)
     830:	3104703a 	and	r2,r6,r4
     834:	2806703a 	and	r3,r5,zero
     838:	100a983a 	sll	r5,r2,zero
     83c:	0009883a 	mov	r4,zero
     840:	e1bfff17 	ldw	r6,-4(fp)
     844:	000f883a 	mov	r7,zero
     848:	2185883a 	add	r2,r4,r6
     84c:	1111803a 	cmpltu	r8,r2,r4
     850:	29c7883a 	add	r3,r5,r7
     854:	40c9883a 	add	r4,r8,r3
     858:	2007883a 	mov	r3,r4
     85c:	e0bfea15 	stw	r2,-88(fp)
     860:	e0ffeb15 	stw	r3,-84(fp)
		alt_u64 Yn1NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
     864:	e13ff917 	ldw	r4,-28(fp)
     868:	e17ffa17 	ldw	r5,-24(fp)
     86c:	208fffcc 	andi	r2,r4,16383
     870:	2806703a 	and	r3,r5,zero
     874:	100e943a 	slli	r7,r2,16
     878:	000d883a 	mov	r6,zero
     87c:	e0bffb17 	ldw	r2,-20(fp)
     880:	100ad4ba 	srli	r5,r2,18
     884:	e13ffc17 	ldw	r4,-16(fp)
     888:	e23ffb17 	ldw	r8,-20(fp)
     88c:	200693ba 	slli	r3,r4,14
     890:	1946b03a 	or	r3,r3,r5
     894:	400493ba 	slli	r2,r8,14
     898:	3089883a 	add	r4,r6,r2
     89c:	2191803a 	cmpltu	r8,r4,r6
     8a0:	38cb883a 	add	r5,r7,r3
     8a4:	4145883a 	add	r2,r8,r5
     8a8:	100b883a 	mov	r5,r2
     8ac:	200d883a 	mov	r6,r4
     8b0:	280f883a 	mov	r7,r5
     8b4:	e13ffd17 	ldw	r4,-12(fp)
     8b8:	e17ffe17 	ldw	r5,-8(fp)
     8bc:	20bfff2c 	andhi	r2,r4,65532
     8c0:	2806703a 	and	r3,r5,zero
     8c4:	181093ba 	slli	r8,r3,14
     8c8:	1008d4ba 	srli	r4,r2,18
     8cc:	2208b03a 	or	r4,r4,r8
     8d0:	180ad4ba 	srli	r5,r3,18
     8d4:	3105883a 	add	r2,r6,r4
     8d8:	1191803a 	cmpltu	r8,r2,r6
     8dc:	3947883a 	add	r3,r7,r5
     8e0:	40c9883a 	add	r4,r8,r3
     8e4:	2007883a 	mov	r3,r4
     8e8:	e0bfe815 	stw	r2,-96(fp)
     8ec:	e0ffe915 	stw	r3,-92(fp)

		YnL				= *CH1_Yn2L;
     8f0:	d0a02217 	ldw	r2,-32632(gp)
     8f4:	10800017 	ldw	r2,0(r2)
     8f8:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH1_Yn2ML;
     8fc:	d0a02317 	ldw	r2,-32628(gp)
     900:	10800017 	ldw	r2,0(r2)
     904:	e0bffd15 	stw	r2,-12(fp)
     908:	1005d7fa 	srai	r2,r2,31
     90c:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH1_Yn2MU;
     910:	d0a02417 	ldw	r2,-32624(gp)
     914:	10800017 	ldw	r2,0(r2)
     918:	e0bffb15 	stw	r2,-20(fp)
     91c:	1005d7fa 	srai	r2,r2,31
     920:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH1_Yn2U;
     924:	d0a02517 	ldw	r2,-32620(gp)
     928:	10800017 	ldw	r2,0(r2)
     92c:	e0bff915 	stw	r2,-28(fp)
     930:	1005d7fa 	srai	r2,r2,31
     934:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn2DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
     938:	e1bffd17 	ldw	r6,-12(fp)
     93c:	01000134 	movhi	r4,4
     940:	213fffc4 	addi	r4,r4,-1
     944:	e17ffe17 	ldw	r5,-8(fp)
     948:	3104703a 	and	r2,r6,r4
     94c:	2806703a 	and	r3,r5,zero
     950:	100a983a 	sll	r5,r2,zero
     954:	0009883a 	mov	r4,zero
     958:	e1bfff17 	ldw	r6,-4(fp)
     95c:	000f883a 	mov	r7,zero
     960:	2185883a 	add	r2,r4,r6
     964:	1111803a 	cmpltu	r8,r2,r4
     968:	29c7883a 	add	r3,r5,r7
     96c:	40c9883a 	add	r4,r8,r3
     970:	2007883a 	mov	r3,r4
     974:	e0bfe615 	stw	r2,-104(fp)
     978:	e0ffe715 	stw	r3,-100(fp)
		alt_u64 Yn2NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
     97c:	e13ff917 	ldw	r4,-28(fp)
     980:	e17ffa17 	ldw	r5,-24(fp)
     984:	208fffcc 	andi	r2,r4,16383
     988:	2806703a 	and	r3,r5,zero
     98c:	100e943a 	slli	r7,r2,16
     990:	000d883a 	mov	r6,zero
     994:	e0bffb17 	ldw	r2,-20(fp)
     998:	100ad4ba 	srli	r5,r2,18
     99c:	e13ffc17 	ldw	r4,-16(fp)
     9a0:	e23ffb17 	ldw	r8,-20(fp)
     9a4:	200693ba 	slli	r3,r4,14
     9a8:	1946b03a 	or	r3,r3,r5
     9ac:	400493ba 	slli	r2,r8,14
     9b0:	3089883a 	add	r4,r6,r2
     9b4:	2191803a 	cmpltu	r8,r4,r6
     9b8:	38cb883a 	add	r5,r7,r3
     9bc:	4145883a 	add	r2,r8,r5
     9c0:	100b883a 	mov	r5,r2
     9c4:	200d883a 	mov	r6,r4
     9c8:	280f883a 	mov	r7,r5
     9cc:	e13ffd17 	ldw	r4,-12(fp)
     9d0:	e17ffe17 	ldw	r5,-8(fp)
     9d4:	20bfff2c 	andhi	r2,r4,65532
     9d8:	2806703a 	and	r3,r5,zero
     9dc:	181093ba 	slli	r8,r3,14
     9e0:	1008d4ba 	srli	r4,r2,18
     9e4:	2208b03a 	or	r4,r4,r8
     9e8:	180ad4ba 	srli	r5,r3,18
     9ec:	3105883a 	add	r2,r6,r4
     9f0:	1191803a 	cmpltu	r8,r2,r6
     9f4:	3947883a 	add	r3,r7,r5
     9f8:	40c9883a 	add	r4,r8,r3
     9fc:	2007883a 	mov	r3,r4
     a00:	e0bfe415 	stw	r2,-112(fp)
     a04:	e0ffe515 	stw	r3,-108(fp)

		YnL				= *CH1_Yn3L;
     a08:	d0a02617 	ldw	r2,-32616(gp)
     a0c:	10800017 	ldw	r2,0(r2)
     a10:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH1_Yn3ML;
     a14:	d0a02717 	ldw	r2,-32612(gp)
     a18:	10800017 	ldw	r2,0(r2)
     a1c:	e0bffd15 	stw	r2,-12(fp)
     a20:	1005d7fa 	srai	r2,r2,31
     a24:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH1_Yn3MU;
     a28:	d0a02817 	ldw	r2,-32608(gp)
     a2c:	10800017 	ldw	r2,0(r2)
     a30:	e0bffb15 	stw	r2,-20(fp)
     a34:	1005d7fa 	srai	r2,r2,31
     a38:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH1_Yn3U;
     a3c:	d0a02917 	ldw	r2,-32604(gp)
     a40:	10800017 	ldw	r2,0(r2)
     a44:	e0bff915 	stw	r2,-28(fp)
     a48:	1005d7fa 	srai	r2,r2,31
     a4c:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn3DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
     a50:	e1bffd17 	ldw	r6,-12(fp)
     a54:	01000134 	movhi	r4,4
     a58:	213fffc4 	addi	r4,r4,-1
     a5c:	e17ffe17 	ldw	r5,-8(fp)
     a60:	3104703a 	and	r2,r6,r4
     a64:	2806703a 	and	r3,r5,zero
     a68:	100a983a 	sll	r5,r2,zero
     a6c:	0009883a 	mov	r4,zero
     a70:	e1bfff17 	ldw	r6,-4(fp)
     a74:	000f883a 	mov	r7,zero
     a78:	2185883a 	add	r2,r4,r6
     a7c:	1111803a 	cmpltu	r8,r2,r4
     a80:	29c7883a 	add	r3,r5,r7
     a84:	40c9883a 	add	r4,r8,r3
     a88:	2007883a 	mov	r3,r4
     a8c:	e0bfe215 	stw	r2,-120(fp)
     a90:	e0ffe315 	stw	r3,-116(fp)
		alt_u64 Yn3NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
     a94:	e13ff917 	ldw	r4,-28(fp)
     a98:	e17ffa17 	ldw	r5,-24(fp)
     a9c:	208fffcc 	andi	r2,r4,16383
     aa0:	2806703a 	and	r3,r5,zero
     aa4:	100e943a 	slli	r7,r2,16
     aa8:	000d883a 	mov	r6,zero
     aac:	e0bffb17 	ldw	r2,-20(fp)
     ab0:	100ad4ba 	srli	r5,r2,18
     ab4:	e13ffc17 	ldw	r4,-16(fp)
     ab8:	e23ffb17 	ldw	r8,-20(fp)
     abc:	200693ba 	slli	r3,r4,14
     ac0:	1946b03a 	or	r3,r3,r5
     ac4:	400493ba 	slli	r2,r8,14
     ac8:	3089883a 	add	r4,r6,r2
     acc:	2191803a 	cmpltu	r8,r4,r6
     ad0:	38cb883a 	add	r5,r7,r3
     ad4:	4145883a 	add	r2,r8,r5
     ad8:	100b883a 	mov	r5,r2
     adc:	200d883a 	mov	r6,r4
     ae0:	280f883a 	mov	r7,r5
     ae4:	e13ffd17 	ldw	r4,-12(fp)
     ae8:	e17ffe17 	ldw	r5,-8(fp)
     aec:	20bfff2c 	andhi	r2,r4,65532
     af0:	2806703a 	and	r3,r5,zero
     af4:	181093ba 	slli	r8,r3,14
     af8:	1008d4ba 	srli	r4,r2,18
     afc:	2208b03a 	or	r4,r4,r8
     b00:	180ad4ba 	srli	r5,r3,18
     b04:	3105883a 	add	r2,r6,r4
     b08:	1191803a 	cmpltu	r8,r2,r6
     b0c:	3947883a 	add	r3,r7,r5
     b10:	40c9883a 	add	r4,r8,r3
     b14:	2007883a 	mov	r3,r4
     b18:	e0bfe015 	stw	r2,-128(fp)
     b1c:	e0ffe115 	stw	r3,-124(fp)

		int n 			= *CH1_TIME;
     b20:	d0a01d17 	ldw	r2,-32652(gp)
     b24:	10800017 	ldw	r2,0(r2)
     b28:	e0bfdf15 	stw	r2,-132(fp)

		CH1_nOut = qInterp(1000000, n-2, Yn1NUM, Yn1DEN, Yn2NUM, Yn2DEN, Yn3NUM, Yn3DEN);
     b2c:	e0bfdf17 	ldw	r2,-132(fp)
     b30:	117fff84 	addi	r5,r2,-2
     b34:	e0bfea17 	ldw	r2,-88(fp)
     b38:	d8800015 	stw	r2,0(sp)
     b3c:	e0bfeb17 	ldw	r2,-84(fp)
     b40:	d8800115 	stw	r2,4(sp)
     b44:	e0bfe417 	ldw	r2,-112(fp)
     b48:	d8800215 	stw	r2,8(sp)
     b4c:	e0bfe517 	ldw	r2,-108(fp)
     b50:	d8800315 	stw	r2,12(sp)
     b54:	e0bfe617 	ldw	r2,-104(fp)
     b58:	d8800415 	stw	r2,16(sp)
     b5c:	e0bfe717 	ldw	r2,-100(fp)
     b60:	d8800515 	stw	r2,20(sp)
     b64:	e0bfe017 	ldw	r2,-128(fp)
     b68:	d8800615 	stw	r2,24(sp)
     b6c:	e0bfe117 	ldw	r2,-124(fp)
     b70:	d8800715 	stw	r2,28(sp)
     b74:	e0bfe217 	ldw	r2,-120(fp)
     b78:	d8800815 	stw	r2,32(sp)
     b7c:	e0bfe317 	ldw	r2,-116(fp)
     b80:	d8800915 	stw	r2,36(sp)
     b84:	010003f4 	movhi	r4,15
     b88:	21109004 	addi	r4,r4,16960
     b8c:	e1bfe817 	ldw	r6,-96(fp)
     b90:	e1ffe917 	ldw	r7,-92(fp)
     b94:	00016040 	call	1604 <qInterp>
     b98:	1009883a 	mov	r4,r2
     b9c:	180b883a 	mov	r5,r3
     ba0:	d126c715 	stw	r4,-25828(gp)
     ba4:	00800074 	movhi	r2,1
     ba8:	1087d504 	addi	r2,r2,8020
     bac:	11400015 	stw	r5,0(r2)
     bb0:	00000406 	br	bc4 <sampleChannels+0x848>
	} else {
		CH1_nOut = 0;
     bb4:	d026c715 	stw	zero,-25828(gp)
     bb8:	00800074 	movhi	r2,1
     bbc:	1087d504 	addi	r2,r2,8020
     bc0:	10000015 	stw	zero,0(r2)
	}

	usleep(0.001 seconds);
     bc4:	0100fa04 	movi	r4,1000
     bc8:	000b2100 	call	b210 <usleep>

	if (*CH2_peakFound) {
     bcc:	d0a02c17 	ldw	r2,-32592(gp)
     bd0:	10800017 	ldw	r2,0(r2)
     bd4:	1005003a 	cmpeq	r2,r2,zero
     bd8:	1000fc1e 	bne	r2,zero,fcc <sampleChannels+0xc50>
		*CH2_RD = 0x1;
     bdc:	d0e02d17 	ldw	r3,-32588(gp)
     be0:	00800044 	movi	r2,1
     be4:	18800015 	stw	r2,0(r3)
		*CH2_RD = 0x0;
     be8:	d0a02d17 	ldw	r2,-32588(gp)
     bec:	10000015 	stw	zero,0(r2)

		YnL				= *CH2_Yn1L;
     bf0:	d0a02f17 	ldw	r2,-32580(gp)
     bf4:	10800017 	ldw	r2,0(r2)
     bf8:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH2_Yn1ML;
     bfc:	d0a03017 	ldw	r2,-32576(gp)
     c00:	10800017 	ldw	r2,0(r2)
     c04:	e0bffd15 	stw	r2,-12(fp)
     c08:	1005d7fa 	srai	r2,r2,31
     c0c:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH2_Yn1MU;
     c10:	d0a03117 	ldw	r2,-32572(gp)
     c14:	10800017 	ldw	r2,0(r2)
     c18:	e0bffb15 	stw	r2,-20(fp)
     c1c:	1005d7fa 	srai	r2,r2,31
     c20:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH2_Yn1U;
     c24:	d0a03217 	ldw	r2,-32568(gp)
     c28:	10800017 	ldw	r2,0(r2)
     c2c:	e0bff915 	stw	r2,-28(fp)
     c30:	1005d7fa 	srai	r2,r2,31
     c34:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn1DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
     c38:	e1bffd17 	ldw	r6,-12(fp)
     c3c:	01000134 	movhi	r4,4
     c40:	213fffc4 	addi	r4,r4,-1
     c44:	e17ffe17 	ldw	r5,-8(fp)
     c48:	3104703a 	and	r2,r6,r4
     c4c:	2806703a 	and	r3,r5,zero
     c50:	100a983a 	sll	r5,r2,zero
     c54:	0009883a 	mov	r4,zero
     c58:	e1bfff17 	ldw	r6,-4(fp)
     c5c:	000f883a 	mov	r7,zero
     c60:	2185883a 	add	r2,r4,r6
     c64:	1111803a 	cmpltu	r8,r2,r4
     c68:	29c7883a 	add	r3,r5,r7
     c6c:	40c9883a 	add	r4,r8,r3
     c70:	2007883a 	mov	r3,r4
     c74:	e0bfdd15 	stw	r2,-140(fp)
     c78:	e0ffde15 	stw	r3,-136(fp)
		alt_u64 Yn1NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
     c7c:	e13ff917 	ldw	r4,-28(fp)
     c80:	e17ffa17 	ldw	r5,-24(fp)
     c84:	208fffcc 	andi	r2,r4,16383
     c88:	2806703a 	and	r3,r5,zero
     c8c:	100e943a 	slli	r7,r2,16
     c90:	000d883a 	mov	r6,zero
     c94:	e0bffb17 	ldw	r2,-20(fp)
     c98:	100ad4ba 	srli	r5,r2,18
     c9c:	e13ffc17 	ldw	r4,-16(fp)
     ca0:	e23ffb17 	ldw	r8,-20(fp)
     ca4:	200693ba 	slli	r3,r4,14
     ca8:	1946b03a 	or	r3,r3,r5
     cac:	400493ba 	slli	r2,r8,14
     cb0:	3089883a 	add	r4,r6,r2
     cb4:	2191803a 	cmpltu	r8,r4,r6
     cb8:	38cb883a 	add	r5,r7,r3
     cbc:	4145883a 	add	r2,r8,r5
     cc0:	100b883a 	mov	r5,r2
     cc4:	200d883a 	mov	r6,r4
     cc8:	280f883a 	mov	r7,r5
     ccc:	e13ffd17 	ldw	r4,-12(fp)
     cd0:	e17ffe17 	ldw	r5,-8(fp)
     cd4:	20bfff2c 	andhi	r2,r4,65532
     cd8:	2806703a 	and	r3,r5,zero
     cdc:	181093ba 	slli	r8,r3,14
     ce0:	1008d4ba 	srli	r4,r2,18
     ce4:	2208b03a 	or	r4,r4,r8
     ce8:	180ad4ba 	srli	r5,r3,18
     cec:	3105883a 	add	r2,r6,r4
     cf0:	1191803a 	cmpltu	r8,r2,r6
     cf4:	3947883a 	add	r3,r7,r5
     cf8:	40c9883a 	add	r4,r8,r3
     cfc:	2007883a 	mov	r3,r4
     d00:	e0bfdb15 	stw	r2,-148(fp)
     d04:	e0ffdc15 	stw	r3,-144(fp)

		YnL				= *CH2_Yn2L;
     d08:	d0a03317 	ldw	r2,-32564(gp)
     d0c:	10800017 	ldw	r2,0(r2)
     d10:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH2_Yn2ML;
     d14:	d0a03417 	ldw	r2,-32560(gp)
     d18:	10800017 	ldw	r2,0(r2)
     d1c:	e0bffd15 	stw	r2,-12(fp)
     d20:	1005d7fa 	srai	r2,r2,31
     d24:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH2_Yn2MU;
     d28:	d0a03517 	ldw	r2,-32556(gp)
     d2c:	10800017 	ldw	r2,0(r2)
     d30:	e0bffb15 	stw	r2,-20(fp)
     d34:	1005d7fa 	srai	r2,r2,31
     d38:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH2_Yn2U;
     d3c:	d0a03617 	ldw	r2,-32552(gp)
     d40:	10800017 	ldw	r2,0(r2)
     d44:	e0bff915 	stw	r2,-28(fp)
     d48:	1005d7fa 	srai	r2,r2,31
     d4c:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn2DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
     d50:	e1bffd17 	ldw	r6,-12(fp)
     d54:	01000134 	movhi	r4,4
     d58:	213fffc4 	addi	r4,r4,-1
     d5c:	e17ffe17 	ldw	r5,-8(fp)
     d60:	3104703a 	and	r2,r6,r4
     d64:	2806703a 	and	r3,r5,zero
     d68:	100a983a 	sll	r5,r2,zero
     d6c:	0009883a 	mov	r4,zero
     d70:	e1bfff17 	ldw	r6,-4(fp)
     d74:	000f883a 	mov	r7,zero
     d78:	2185883a 	add	r2,r4,r6
     d7c:	1111803a 	cmpltu	r8,r2,r4
     d80:	29c7883a 	add	r3,r5,r7
     d84:	40c9883a 	add	r4,r8,r3
     d88:	2007883a 	mov	r3,r4
     d8c:	e0bfd915 	stw	r2,-156(fp)
     d90:	e0ffda15 	stw	r3,-152(fp)
		alt_u64 Yn2NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
     d94:	e13ff917 	ldw	r4,-28(fp)
     d98:	e17ffa17 	ldw	r5,-24(fp)
     d9c:	208fffcc 	andi	r2,r4,16383
     da0:	2806703a 	and	r3,r5,zero
     da4:	100e943a 	slli	r7,r2,16
     da8:	000d883a 	mov	r6,zero
     dac:	e0bffb17 	ldw	r2,-20(fp)
     db0:	100ad4ba 	srli	r5,r2,18
     db4:	e13ffc17 	ldw	r4,-16(fp)
     db8:	e23ffb17 	ldw	r8,-20(fp)
     dbc:	200693ba 	slli	r3,r4,14
     dc0:	1946b03a 	or	r3,r3,r5
     dc4:	400493ba 	slli	r2,r8,14
     dc8:	3089883a 	add	r4,r6,r2
     dcc:	2191803a 	cmpltu	r8,r4,r6
     dd0:	38cb883a 	add	r5,r7,r3
     dd4:	4145883a 	add	r2,r8,r5
     dd8:	100b883a 	mov	r5,r2
     ddc:	200d883a 	mov	r6,r4
     de0:	280f883a 	mov	r7,r5
     de4:	e13ffd17 	ldw	r4,-12(fp)
     de8:	e17ffe17 	ldw	r5,-8(fp)
     dec:	20bfff2c 	andhi	r2,r4,65532
     df0:	2806703a 	and	r3,r5,zero
     df4:	181093ba 	slli	r8,r3,14
     df8:	1008d4ba 	srli	r4,r2,18
     dfc:	2208b03a 	or	r4,r4,r8
     e00:	180ad4ba 	srli	r5,r3,18
     e04:	3105883a 	add	r2,r6,r4
     e08:	1191803a 	cmpltu	r8,r2,r6
     e0c:	3947883a 	add	r3,r7,r5
     e10:	40c9883a 	add	r4,r8,r3
     e14:	2007883a 	mov	r3,r4
     e18:	e0bfd715 	stw	r2,-164(fp)
     e1c:	e0ffd815 	stw	r3,-160(fp)

		YnL				= *CH2_Yn3L;
     e20:	d0a03717 	ldw	r2,-32548(gp)
     e24:	10800017 	ldw	r2,0(r2)
     e28:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH2_Yn3ML;
     e2c:	d0a03817 	ldw	r2,-32544(gp)
     e30:	10800017 	ldw	r2,0(r2)
     e34:	e0bffd15 	stw	r2,-12(fp)
     e38:	1005d7fa 	srai	r2,r2,31
     e3c:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH2_Yn3MU;
     e40:	d0a03917 	ldw	r2,-32540(gp)
     e44:	10800017 	ldw	r2,0(r2)
     e48:	e0bffb15 	stw	r2,-20(fp)
     e4c:	1005d7fa 	srai	r2,r2,31
     e50:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH2_Yn3U;
     e54:	d0a03a17 	ldw	r2,-32536(gp)
     e58:	10800017 	ldw	r2,0(r2)
     e5c:	e0bff915 	stw	r2,-28(fp)
     e60:	1005d7fa 	srai	r2,r2,31
     e64:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn3DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
     e68:	e1bffd17 	ldw	r6,-12(fp)
     e6c:	01000134 	movhi	r4,4
     e70:	213fffc4 	addi	r4,r4,-1
     e74:	e17ffe17 	ldw	r5,-8(fp)
     e78:	3104703a 	and	r2,r6,r4
     e7c:	2806703a 	and	r3,r5,zero
     e80:	100a983a 	sll	r5,r2,zero
     e84:	0009883a 	mov	r4,zero
     e88:	e1bfff17 	ldw	r6,-4(fp)
     e8c:	000f883a 	mov	r7,zero
     e90:	2185883a 	add	r2,r4,r6
     e94:	1111803a 	cmpltu	r8,r2,r4
     e98:	29c7883a 	add	r3,r5,r7
     e9c:	40c9883a 	add	r4,r8,r3
     ea0:	2007883a 	mov	r3,r4
     ea4:	e0bfd515 	stw	r2,-172(fp)
     ea8:	e0ffd615 	stw	r3,-168(fp)
		alt_u64 Yn3NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
     eac:	e13ff917 	ldw	r4,-28(fp)
     eb0:	e17ffa17 	ldw	r5,-24(fp)
     eb4:	208fffcc 	andi	r2,r4,16383
     eb8:	2806703a 	and	r3,r5,zero
     ebc:	100e943a 	slli	r7,r2,16
     ec0:	000d883a 	mov	r6,zero
     ec4:	e0bffb17 	ldw	r2,-20(fp)
     ec8:	100ad4ba 	srli	r5,r2,18
     ecc:	e13ffc17 	ldw	r4,-16(fp)
     ed0:	e23ffb17 	ldw	r8,-20(fp)
     ed4:	200693ba 	slli	r3,r4,14
     ed8:	1946b03a 	or	r3,r3,r5
     edc:	400493ba 	slli	r2,r8,14
     ee0:	3089883a 	add	r4,r6,r2
     ee4:	2191803a 	cmpltu	r8,r4,r6
     ee8:	38cb883a 	add	r5,r7,r3
     eec:	4145883a 	add	r2,r8,r5
     ef0:	100b883a 	mov	r5,r2
     ef4:	200d883a 	mov	r6,r4
     ef8:	280f883a 	mov	r7,r5
     efc:	e13ffd17 	ldw	r4,-12(fp)
     f00:	e17ffe17 	ldw	r5,-8(fp)
     f04:	20bfff2c 	andhi	r2,r4,65532
     f08:	2806703a 	and	r3,r5,zero
     f0c:	181093ba 	slli	r8,r3,14
     f10:	1008d4ba 	srli	r4,r2,18
     f14:	2208b03a 	or	r4,r4,r8
     f18:	180ad4ba 	srli	r5,r3,18
     f1c:	3105883a 	add	r2,r6,r4
     f20:	1191803a 	cmpltu	r8,r2,r6
     f24:	3947883a 	add	r3,r7,r5
     f28:	40c9883a 	add	r4,r8,r3
     f2c:	2007883a 	mov	r3,r4
     f30:	e0bfd315 	stw	r2,-180(fp)
     f34:	e0ffd415 	stw	r3,-176(fp)

		int n 			= *CH2_TIME;
     f38:	d0a02e17 	ldw	r2,-32584(gp)
     f3c:	10800017 	ldw	r2,0(r2)
     f40:	e0bfd215 	stw	r2,-184(fp)

		CH2_nOut = qInterp(1000000, n-2, Yn1NUM, Yn1DEN, Yn2NUM, Yn2DEN, Yn3NUM, Yn3DEN);
     f44:	e0bfd217 	ldw	r2,-184(fp)
     f48:	117fff84 	addi	r5,r2,-2
     f4c:	e0bfdd17 	ldw	r2,-140(fp)
     f50:	d8800015 	stw	r2,0(sp)
     f54:	e0bfde17 	ldw	r2,-136(fp)
     f58:	d8800115 	stw	r2,4(sp)
     f5c:	e0bfd717 	ldw	r2,-164(fp)
     f60:	d8800215 	stw	r2,8(sp)
     f64:	e0bfd817 	ldw	r2,-160(fp)
     f68:	d8800315 	stw	r2,12(sp)
     f6c:	e0bfd917 	ldw	r2,-156(fp)
     f70:	d8800415 	stw	r2,16(sp)
     f74:	e0bfda17 	ldw	r2,-152(fp)
     f78:	d8800515 	stw	r2,20(sp)
     f7c:	e0bfd317 	ldw	r2,-180(fp)
     f80:	d8800615 	stw	r2,24(sp)
     f84:	e0bfd417 	ldw	r2,-176(fp)
     f88:	d8800715 	stw	r2,28(sp)
     f8c:	e0bfd517 	ldw	r2,-172(fp)
     f90:	d8800815 	stw	r2,32(sp)
     f94:	e0bfd617 	ldw	r2,-168(fp)
     f98:	d8800915 	stw	r2,36(sp)
     f9c:	010003f4 	movhi	r4,15
     fa0:	21109004 	addi	r4,r4,16960
     fa4:	e1bfdb17 	ldw	r6,-148(fp)
     fa8:	e1ffdc17 	ldw	r7,-144(fp)
     fac:	00016040 	call	1604 <qInterp>
     fb0:	1009883a 	mov	r4,r2
     fb4:	180b883a 	mov	r5,r3
     fb8:	d126cc15 	stw	r4,-25808(gp)
     fbc:	00800074 	movhi	r2,1
     fc0:	1087da04 	addi	r2,r2,8040
     fc4:	11400015 	stw	r5,0(r2)
     fc8:	00000406 	br	fdc <sampleChannels+0xc60>
	} else {
		CH2_nOut = 0;
     fcc:	d026cc15 	stw	zero,-25808(gp)
     fd0:	00800074 	movhi	r2,1
     fd4:	1087da04 	addi	r2,r2,8040
     fd8:	10000015 	stw	zero,0(r2)
	}

	usleep(0.001 seconds);
     fdc:	0100fa04 	movi	r4,1000
     fe0:	000b2100 	call	b210 <usleep>

	if (*CH3_peakFound) {
     fe4:	d0a03d17 	ldw	r2,-32524(gp)
     fe8:	10800017 	ldw	r2,0(r2)
     fec:	1005003a 	cmpeq	r2,r2,zero
     ff0:	1000fc1e 	bne	r2,zero,13e4 <sampleChannels+0x1068>
		*CH3_RD = 0x1;
     ff4:	d0e03e17 	ldw	r3,-32520(gp)
     ff8:	00800044 	movi	r2,1
     ffc:	18800015 	stw	r2,0(r3)
		*CH3_RD = 0x0;
    1000:	d0a03e17 	ldw	r2,-32520(gp)
    1004:	10000015 	stw	zero,0(r2)

		YnL				= *CH3_Yn1L;
    1008:	d0a04017 	ldw	r2,-32512(gp)
    100c:	10800017 	ldw	r2,0(r2)
    1010:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH3_Yn1ML;
    1014:	d0a04117 	ldw	r2,-32508(gp)
    1018:	10800017 	ldw	r2,0(r2)
    101c:	e0bffd15 	stw	r2,-12(fp)
    1020:	1005d7fa 	srai	r2,r2,31
    1024:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH3_Yn1MU;
    1028:	d0a04217 	ldw	r2,-32504(gp)
    102c:	10800017 	ldw	r2,0(r2)
    1030:	e0bffb15 	stw	r2,-20(fp)
    1034:	1005d7fa 	srai	r2,r2,31
    1038:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH3_Yn1U;
    103c:	d0a04317 	ldw	r2,-32500(gp)
    1040:	10800017 	ldw	r2,0(r2)
    1044:	e0bff915 	stw	r2,-28(fp)
    1048:	1005d7fa 	srai	r2,r2,31
    104c:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn1DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
    1050:	e1bffd17 	ldw	r6,-12(fp)
    1054:	01000134 	movhi	r4,4
    1058:	213fffc4 	addi	r4,r4,-1
    105c:	e17ffe17 	ldw	r5,-8(fp)
    1060:	3104703a 	and	r2,r6,r4
    1064:	2806703a 	and	r3,r5,zero
    1068:	100a983a 	sll	r5,r2,zero
    106c:	0009883a 	mov	r4,zero
    1070:	e1bfff17 	ldw	r6,-4(fp)
    1074:	000f883a 	mov	r7,zero
    1078:	2185883a 	add	r2,r4,r6
    107c:	1111803a 	cmpltu	r8,r2,r4
    1080:	29c7883a 	add	r3,r5,r7
    1084:	40c9883a 	add	r4,r8,r3
    1088:	2007883a 	mov	r3,r4
    108c:	e0bfd015 	stw	r2,-192(fp)
    1090:	e0ffd115 	stw	r3,-188(fp)
		alt_u64 Yn1NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
    1094:	e13ff917 	ldw	r4,-28(fp)
    1098:	e17ffa17 	ldw	r5,-24(fp)
    109c:	208fffcc 	andi	r2,r4,16383
    10a0:	2806703a 	and	r3,r5,zero
    10a4:	100e943a 	slli	r7,r2,16
    10a8:	000d883a 	mov	r6,zero
    10ac:	e0bffb17 	ldw	r2,-20(fp)
    10b0:	100ad4ba 	srli	r5,r2,18
    10b4:	e13ffc17 	ldw	r4,-16(fp)
    10b8:	e23ffb17 	ldw	r8,-20(fp)
    10bc:	200693ba 	slli	r3,r4,14
    10c0:	1946b03a 	or	r3,r3,r5
    10c4:	400493ba 	slli	r2,r8,14
    10c8:	3089883a 	add	r4,r6,r2
    10cc:	2191803a 	cmpltu	r8,r4,r6
    10d0:	38cb883a 	add	r5,r7,r3
    10d4:	4145883a 	add	r2,r8,r5
    10d8:	100b883a 	mov	r5,r2
    10dc:	200d883a 	mov	r6,r4
    10e0:	280f883a 	mov	r7,r5
    10e4:	e13ffd17 	ldw	r4,-12(fp)
    10e8:	e17ffe17 	ldw	r5,-8(fp)
    10ec:	20bfff2c 	andhi	r2,r4,65532
    10f0:	2806703a 	and	r3,r5,zero
    10f4:	181093ba 	slli	r8,r3,14
    10f8:	1008d4ba 	srli	r4,r2,18
    10fc:	2208b03a 	or	r4,r4,r8
    1100:	180ad4ba 	srli	r5,r3,18
    1104:	3105883a 	add	r2,r6,r4
    1108:	1191803a 	cmpltu	r8,r2,r6
    110c:	3947883a 	add	r3,r7,r5
    1110:	40c9883a 	add	r4,r8,r3
    1114:	2007883a 	mov	r3,r4
    1118:	e0bfce15 	stw	r2,-200(fp)
    111c:	e0ffcf15 	stw	r3,-196(fp)

		YnL				= *CH3_Yn2L;
    1120:	d0a04417 	ldw	r2,-32496(gp)
    1124:	10800017 	ldw	r2,0(r2)
    1128:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH3_Yn2ML;
    112c:	d0a04517 	ldw	r2,-32492(gp)
    1130:	10800017 	ldw	r2,0(r2)
    1134:	e0bffd15 	stw	r2,-12(fp)
    1138:	1005d7fa 	srai	r2,r2,31
    113c:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH3_Yn2MU;
    1140:	d0a04617 	ldw	r2,-32488(gp)
    1144:	10800017 	ldw	r2,0(r2)
    1148:	e0bffb15 	stw	r2,-20(fp)
    114c:	1005d7fa 	srai	r2,r2,31
    1150:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH3_Yn2U;
    1154:	d0a04717 	ldw	r2,-32484(gp)
    1158:	10800017 	ldw	r2,0(r2)
    115c:	e0bff915 	stw	r2,-28(fp)
    1160:	1005d7fa 	srai	r2,r2,31
    1164:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn2DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
    1168:	e1bffd17 	ldw	r6,-12(fp)
    116c:	01000134 	movhi	r4,4
    1170:	213fffc4 	addi	r4,r4,-1
    1174:	e17ffe17 	ldw	r5,-8(fp)
    1178:	3104703a 	and	r2,r6,r4
    117c:	2806703a 	and	r3,r5,zero
    1180:	100a983a 	sll	r5,r2,zero
    1184:	0009883a 	mov	r4,zero
    1188:	e1bfff17 	ldw	r6,-4(fp)
    118c:	000f883a 	mov	r7,zero
    1190:	2185883a 	add	r2,r4,r6
    1194:	1111803a 	cmpltu	r8,r2,r4
    1198:	29c7883a 	add	r3,r5,r7
    119c:	40c9883a 	add	r4,r8,r3
    11a0:	2007883a 	mov	r3,r4
    11a4:	e0bfcc15 	stw	r2,-208(fp)
    11a8:	e0ffcd15 	stw	r3,-204(fp)
		alt_u64 Yn2NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
    11ac:	e13ff917 	ldw	r4,-28(fp)
    11b0:	e17ffa17 	ldw	r5,-24(fp)
    11b4:	208fffcc 	andi	r2,r4,16383
    11b8:	2806703a 	and	r3,r5,zero
    11bc:	100e943a 	slli	r7,r2,16
    11c0:	000d883a 	mov	r6,zero
    11c4:	e0bffb17 	ldw	r2,-20(fp)
    11c8:	100ad4ba 	srli	r5,r2,18
    11cc:	e13ffc17 	ldw	r4,-16(fp)
    11d0:	e23ffb17 	ldw	r8,-20(fp)
    11d4:	200693ba 	slli	r3,r4,14
    11d8:	1946b03a 	or	r3,r3,r5
    11dc:	400493ba 	slli	r2,r8,14
    11e0:	3089883a 	add	r4,r6,r2
    11e4:	2191803a 	cmpltu	r8,r4,r6
    11e8:	38cb883a 	add	r5,r7,r3
    11ec:	4145883a 	add	r2,r8,r5
    11f0:	100b883a 	mov	r5,r2
    11f4:	200d883a 	mov	r6,r4
    11f8:	280f883a 	mov	r7,r5
    11fc:	e13ffd17 	ldw	r4,-12(fp)
    1200:	e17ffe17 	ldw	r5,-8(fp)
    1204:	20bfff2c 	andhi	r2,r4,65532
    1208:	2806703a 	and	r3,r5,zero
    120c:	181093ba 	slli	r8,r3,14
    1210:	1008d4ba 	srli	r4,r2,18
    1214:	2208b03a 	or	r4,r4,r8
    1218:	180ad4ba 	srli	r5,r3,18
    121c:	3105883a 	add	r2,r6,r4
    1220:	1191803a 	cmpltu	r8,r2,r6
    1224:	3947883a 	add	r3,r7,r5
    1228:	40c9883a 	add	r4,r8,r3
    122c:	2007883a 	mov	r3,r4
    1230:	e0bfca15 	stw	r2,-216(fp)
    1234:	e0ffcb15 	stw	r3,-212(fp)

		YnL				= *CH3_Yn3L;
    1238:	d0a04817 	ldw	r2,-32480(gp)
    123c:	10800017 	ldw	r2,0(r2)
    1240:	e0bfff15 	stw	r2,-4(fp)
		YnML 			= *CH3_Yn3ML;
    1244:	d0a04917 	ldw	r2,-32476(gp)
    1248:	10800017 	ldw	r2,0(r2)
    124c:	e0bffd15 	stw	r2,-12(fp)
    1250:	1005d7fa 	srai	r2,r2,31
    1254:	e0bffe15 	stw	r2,-8(fp)
		YnMU			= *CH3_Yn3MU;
    1258:	d0a04a17 	ldw	r2,-32472(gp)
    125c:	10800017 	ldw	r2,0(r2)
    1260:	e0bffb15 	stw	r2,-20(fp)
    1264:	1005d7fa 	srai	r2,r2,31
    1268:	e0bffc15 	stw	r2,-16(fp)
		YnU 			= *CH3_Yn3U;
    126c:	d0a04b17 	ldw	r2,-32468(gp)
    1270:	10800017 	ldw	r2,0(r2)
    1274:	e0bff915 	stw	r2,-28(fp)
    1278:	1005d7fa 	srai	r2,r2,31
    127c:	e0bffa15 	stw	r2,-24(fp)
		alt_u64 Yn3DEN 	= ((YnML & 0x3FFFF) << 32) + YnL;
    1280:	e1bffd17 	ldw	r6,-12(fp)
    1284:	01000134 	movhi	r4,4
    1288:	213fffc4 	addi	r4,r4,-1
    128c:	e17ffe17 	ldw	r5,-8(fp)
    1290:	3104703a 	and	r2,r6,r4
    1294:	2806703a 	and	r3,r5,zero
    1298:	100a983a 	sll	r5,r2,zero
    129c:	0009883a 	mov	r4,zero
    12a0:	e1bfff17 	ldw	r6,-4(fp)
    12a4:	000f883a 	mov	r7,zero
    12a8:	2185883a 	add	r2,r4,r6
    12ac:	1111803a 	cmpltu	r8,r2,r4
    12b0:	29c7883a 	add	r3,r5,r7
    12b4:	40c9883a 	add	r4,r8,r3
    12b8:	2007883a 	mov	r3,r4
    12bc:	e0bfc815 	stw	r2,-224(fp)
    12c0:	e0ffc915 	stw	r3,-220(fp)
		alt_u64 Yn3NUM 	= ((YnU & 0x3FFF) << 48) + (YnMU << 14) + ((YnML & 0xFFFC0000) >> 18);
    12c4:	e13ff917 	ldw	r4,-28(fp)
    12c8:	e17ffa17 	ldw	r5,-24(fp)
    12cc:	208fffcc 	andi	r2,r4,16383
    12d0:	2806703a 	and	r3,r5,zero
    12d4:	100e943a 	slli	r7,r2,16
    12d8:	000d883a 	mov	r6,zero
    12dc:	e0bffb17 	ldw	r2,-20(fp)
    12e0:	100ad4ba 	srli	r5,r2,18
    12e4:	e13ffc17 	ldw	r4,-16(fp)
    12e8:	e23ffb17 	ldw	r8,-20(fp)
    12ec:	200693ba 	slli	r3,r4,14
    12f0:	1946b03a 	or	r3,r3,r5
    12f4:	400493ba 	slli	r2,r8,14
    12f8:	3089883a 	add	r4,r6,r2
    12fc:	2191803a 	cmpltu	r8,r4,r6
    1300:	38cb883a 	add	r5,r7,r3
    1304:	4145883a 	add	r2,r8,r5
    1308:	100b883a 	mov	r5,r2
    130c:	200d883a 	mov	r6,r4
    1310:	280f883a 	mov	r7,r5
    1314:	e13ffd17 	ldw	r4,-12(fp)
    1318:	e17ffe17 	ldw	r5,-8(fp)
    131c:	20bfff2c 	andhi	r2,r4,65532
    1320:	2806703a 	and	r3,r5,zero
    1324:	181093ba 	slli	r8,r3,14
    1328:	1008d4ba 	srli	r4,r2,18
    132c:	2208b03a 	or	r4,r4,r8
    1330:	180ad4ba 	srli	r5,r3,18
    1334:	3105883a 	add	r2,r6,r4
    1338:	1191803a 	cmpltu	r8,r2,r6
    133c:	3947883a 	add	r3,r7,r5
    1340:	40c9883a 	add	r4,r8,r3
    1344:	2007883a 	mov	r3,r4
    1348:	e0bfc615 	stw	r2,-232(fp)
    134c:	e0ffc715 	stw	r3,-228(fp)

		int n 			= *CH3_TIME;
    1350:	d0a03f17 	ldw	r2,-32516(gp)
    1354:	10800017 	ldw	r2,0(r2)
    1358:	e0bfc515 	stw	r2,-236(fp)

		CH3_nOut = qInterp(1000000, n-2, Yn1NUM, Yn1DEN, Yn2NUM, Yn2DEN, Yn3NUM, Yn3DEN);
    135c:	e0bfc517 	ldw	r2,-236(fp)
    1360:	117fff84 	addi	r5,r2,-2
    1364:	e0bfd017 	ldw	r2,-192(fp)
    1368:	d8800015 	stw	r2,0(sp)
    136c:	e0bfd117 	ldw	r2,-188(fp)
    1370:	d8800115 	stw	r2,4(sp)
    1374:	e0bfca17 	ldw	r2,-216(fp)
    1378:	d8800215 	stw	r2,8(sp)
    137c:	e0bfcb17 	ldw	r2,-212(fp)
    1380:	d8800315 	stw	r2,12(sp)
    1384:	e0bfcc17 	ldw	r2,-208(fp)
    1388:	d8800415 	stw	r2,16(sp)
    138c:	e0bfcd17 	ldw	r2,-204(fp)
    1390:	d8800515 	stw	r2,20(sp)
    1394:	e0bfc617 	ldw	r2,-232(fp)
    1398:	d8800615 	stw	r2,24(sp)
    139c:	e0bfc717 	ldw	r2,-228(fp)
    13a0:	d8800715 	stw	r2,28(sp)
    13a4:	e0bfc817 	ldw	r2,-224(fp)
    13a8:	d8800815 	stw	r2,32(sp)
    13ac:	e0bfc917 	ldw	r2,-220(fp)
    13b0:	d8800915 	stw	r2,36(sp)
    13b4:	010003f4 	movhi	r4,15
    13b8:	21109004 	addi	r4,r4,16960
    13bc:	e1bfce17 	ldw	r6,-200(fp)
    13c0:	e1ffcf17 	ldw	r7,-196(fp)
    13c4:	00016040 	call	1604 <qInterp>
    13c8:	1009883a 	mov	r4,r2
    13cc:	180b883a 	mov	r5,r3
    13d0:	d126c115 	stw	r4,-25852(gp)
    13d4:	00800074 	movhi	r2,1
    13d8:	1087cf04 	addi	r2,r2,7996
    13dc:	11400015 	stw	r5,0(r2)
    13e0:	00000406 	br	13f4 <sampleChannels+0x1078>
	} else {
		CH3_nOut = 0;
    13e4:	d026c115 	stw	zero,-25852(gp)
    13e8:	00800074 	movhi	r2,1
    13ec:	1087cf04 	addi	r2,r2,7996
    13f0:	10000015 	stw	zero,0(r2)
	}

	counter[0] = CH0_nOut / 1000000;
    13f4:	d0a6c917 	ldw	r2,-25820(gp)
    13f8:	01000074 	movhi	r4,1
    13fc:	2107d704 	addi	r4,r4,8028
    1400:	20c00017 	ldw	r3,0(r4)
    1404:	1009883a 	mov	r4,r2
    1408:	180b883a 	mov	r5,r3
    140c:	018003f4 	movhi	r6,15
    1410:	31909004 	addi	r6,r6,16960
    1414:	000f883a 	mov	r7,zero
    1418:	00085480 	call	8548 <__udivdi3>
    141c:	1009883a 	mov	r4,r2
    1420:	180b883a 	mov	r5,r3
    1424:	2005883a 	mov	r2,r4
    1428:	2807883a 	mov	r3,r5
    142c:	1009883a 	mov	r4,r2
    1430:	180b883a 	mov	r5,r3
    1434:	0007cf00 	call	7cf0 <__floatundisf>
    1438:	1007883a 	mov	r3,r2
    143c:	00800074 	movhi	r2,1
    1440:	1087ec04 	addi	r2,r2,8112
    1444:	10c00015 	stw	r3,0(r2)
	counter[1] = CH1_nOut / 1000000;
    1448:	d0a6c717 	ldw	r2,-25828(gp)
    144c:	01000074 	movhi	r4,1
    1450:	2107d504 	addi	r4,r4,8020
    1454:	20c00017 	ldw	r3,0(r4)
    1458:	1009883a 	mov	r4,r2
    145c:	180b883a 	mov	r5,r3
    1460:	018003f4 	movhi	r6,15
    1464:	31909004 	addi	r6,r6,16960
    1468:	000f883a 	mov	r7,zero
    146c:	00085480 	call	8548 <__udivdi3>
    1470:	1009883a 	mov	r4,r2
    1474:	180b883a 	mov	r5,r3
    1478:	2005883a 	mov	r2,r4
    147c:	2807883a 	mov	r3,r5
    1480:	1009883a 	mov	r4,r2
    1484:	180b883a 	mov	r5,r3
    1488:	0007cf00 	call	7cf0 <__floatundisf>
    148c:	1007883a 	mov	r3,r2
    1490:	00800074 	movhi	r2,1
    1494:	1087ec04 	addi	r2,r2,8112
    1498:	10c00115 	stw	r3,4(r2)
	counter[2] = CH2_nOut / 1000000;
    149c:	d0a6cc17 	ldw	r2,-25808(gp)
    14a0:	01000074 	movhi	r4,1
    14a4:	2107da04 	addi	r4,r4,8040
    14a8:	20c00017 	ldw	r3,0(r4)
    14ac:	1009883a 	mov	r4,r2
    14b0:	180b883a 	mov	r5,r3
    14b4:	018003f4 	movhi	r6,15
    14b8:	31909004 	addi	r6,r6,16960
    14bc:	000f883a 	mov	r7,zero
    14c0:	00085480 	call	8548 <__udivdi3>
    14c4:	1009883a 	mov	r4,r2
    14c8:	180b883a 	mov	r5,r3
    14cc:	2005883a 	mov	r2,r4
    14d0:	2807883a 	mov	r3,r5
    14d4:	1009883a 	mov	r4,r2
    14d8:	180b883a 	mov	r5,r3
    14dc:	0007cf00 	call	7cf0 <__floatundisf>
    14e0:	1007883a 	mov	r3,r2
    14e4:	00800074 	movhi	r2,1
    14e8:	1087ec04 	addi	r2,r2,8112
    14ec:	10c00215 	stw	r3,8(r2)
	counter[3] = ((CH3_nOut*4/5) + (CH1_nOut/5)) / 1000000;
    14f0:	d126c117 	ldw	r4,-25852(gp)
    14f4:	00800074 	movhi	r2,1
    14f8:	1087cf04 	addi	r2,r2,7996
    14fc:	11400017 	ldw	r5,0(r2)
    1500:	2105883a 	add	r2,r4,r4
    1504:	110d803a 	cmpltu	r6,r2,r4
    1508:	2947883a 	add	r3,r5,r5
    150c:	30c9883a 	add	r4,r6,r3
    1510:	2007883a 	mov	r3,r4
    1514:	1089883a 	add	r4,r2,r2
    1518:	208d803a 	cmpltu	r6,r4,r2
    151c:	18cb883a 	add	r5,r3,r3
    1520:	3145883a 	add	r2,r6,r5
    1524:	100b883a 	mov	r5,r2
    1528:	2005883a 	mov	r2,r4
    152c:	2807883a 	mov	r3,r5
    1530:	1009883a 	mov	r4,r2
    1534:	180b883a 	mov	r5,r3
    1538:	01800144 	movi	r6,5
    153c:	000f883a 	mov	r7,zero
    1540:	00085480 	call	8548 <__udivdi3>
    1544:	1009883a 	mov	r4,r2
    1548:	180b883a 	mov	r5,r3
    154c:	2021883a 	mov	r16,r4
    1550:	2823883a 	mov	r17,r5
    1554:	d0a6c717 	ldw	r2,-25828(gp)
    1558:	01000074 	movhi	r4,1
    155c:	2107d504 	addi	r4,r4,8020
    1560:	20c00017 	ldw	r3,0(r4)
    1564:	1009883a 	mov	r4,r2
    1568:	180b883a 	mov	r5,r3
    156c:	01800144 	movi	r6,5
    1570:	000f883a 	mov	r7,zero
    1574:	00085480 	call	8548 <__udivdi3>
    1578:	1009883a 	mov	r4,r2
    157c:	180b883a 	mov	r5,r3
    1580:	200d883a 	mov	r6,r4
    1584:	280f883a 	mov	r7,r5
    1588:	8185883a 	add	r2,r16,r6
    158c:	1409803a 	cmpltu	r4,r2,r16
    1590:	89c7883a 	add	r3,r17,r7
    1594:	20c9883a 	add	r4,r4,r3
    1598:	2007883a 	mov	r3,r4
    159c:	100b883a 	mov	r5,r2
    15a0:	180d883a 	mov	r6,r3
    15a4:	2809883a 	mov	r4,r5
    15a8:	300b883a 	mov	r5,r6
    15ac:	018003f4 	movhi	r6,15
    15b0:	31909004 	addi	r6,r6,16960
    15b4:	000f883a 	mov	r7,zero
    15b8:	00085480 	call	8548 <__udivdi3>
    15bc:	1009883a 	mov	r4,r2
    15c0:	180b883a 	mov	r5,r3
    15c4:	2005883a 	mov	r2,r4
    15c8:	2807883a 	mov	r3,r5
    15cc:	1009883a 	mov	r4,r2
    15d0:	180b883a 	mov	r5,r3
    15d4:	0007cf00 	call	7cf0 <__floatundisf>
    15d8:	1007883a 	mov	r3,r2
    15dc:	00800074 	movhi	r2,1
    15e0:	1087ec04 	addi	r2,r2,8112
    15e4:	10c00315 	stw	r3,12(r2)
	printf("%3.3f\t", counter[0]);
	printf("%3.3f\t", counter[1]);
	printf("%3.3f\t", counter[2]);
	printf("%3.3f\n", counter[3]);
#endif
}
    15e8:	e037883a 	mov	sp,fp
    15ec:	dfc00317 	ldw	ra,12(sp)
    15f0:	df000217 	ldw	fp,8(sp)
    15f4:	dc400117 	ldw	r17,4(sp)
    15f8:	dc000017 	ldw	r16,0(sp)
    15fc:	dec00404 	addi	sp,sp,16
    1600:	f800283a 	ret

00001604 <qInterp>:
 * int n_test = qInterp(1000000, 57, 4415676025201, 13660598848400, 14488231808281, 14775262118400, 6581528571601, 15485119375600);
 * printf("%d\n", n_test);
 *
 */
alt_u64 qInterp(int precision, int n1, alt_u64 Yn1num, alt_u64 Yn1den, alt_u64 Yn2num, alt_u64 Yn2den, alt_u64 Yn3num, alt_u64 Yn3den)
{
    1604:	deffec04 	addi	sp,sp,-80
    1608:	de00012e 	bgeu	sp,et,1610 <qInterp+0xc>
    160c:	003da0fa 	break	3
    1610:	dfc01315 	stw	ra,76(sp)
    1614:	df001215 	stw	fp,72(sp)
    1618:	dc001115 	stw	r16,68(sp)
    161c:	df001104 	addi	fp,sp,68
    1620:	e13ffc15 	stw	r4,-16(fp)
    1624:	e17ffd15 	stw	r5,-12(fp)
    1628:	e1bffe15 	stw	r6,-8(fp)
    162c:	e1ffff15 	stw	r7,-4(fp)
	float fYn1num = sqrt(Yn1num);
    1630:	e13ffe17 	ldw	r4,-8(fp)
    1634:	e17fff17 	ldw	r5,-4(fp)
    1638:	0007da80 	call	7da8 <__floatundidf>
    163c:	100b883a 	mov	r5,r2
    1640:	180d883a 	mov	r6,r3
    1644:	2809883a 	mov	r4,r5
    1648:	300b883a 	mov	r5,r6
    164c:	00041540 	call	4154 <sqrt>
    1650:	100b883a 	mov	r5,r2
    1654:	180d883a 	mov	r6,r3
    1658:	2809883a 	mov	r4,r5
    165c:	300b883a 	mov	r5,r6
    1660:	000a35c0 	call	a35c <__truncdfsf2>
    1664:	e0bffb15 	stw	r2,-20(fp)
	float fYn1den = sqrt(Yn1den);
    1668:	e1000317 	ldw	r4,12(fp)
    166c:	e1400417 	ldw	r5,16(fp)
    1670:	0007da80 	call	7da8 <__floatundidf>
    1674:	100b883a 	mov	r5,r2
    1678:	180d883a 	mov	r6,r3
    167c:	2809883a 	mov	r4,r5
    1680:	300b883a 	mov	r5,r6
    1684:	00041540 	call	4154 <sqrt>
    1688:	100b883a 	mov	r5,r2
    168c:	180d883a 	mov	r6,r3
    1690:	2809883a 	mov	r4,r5
    1694:	300b883a 	mov	r5,r6
    1698:	000a35c0 	call	a35c <__truncdfsf2>
    169c:	e0bffa15 	stw	r2,-24(fp)
	float Yn1 = fYn1num / fYn1den;
    16a0:	e13ffb17 	ldw	r4,-20(fp)
    16a4:	e17ffa17 	ldw	r5,-24(fp)
    16a8:	000904c0 	call	904c <__divsf3>
    16ac:	e0bff915 	stw	r2,-28(fp)

	float fYn2num = sqrt(Yn2num);
    16b0:	e1000517 	ldw	r4,20(fp)
    16b4:	e1400617 	ldw	r5,24(fp)
    16b8:	0007da80 	call	7da8 <__floatundidf>
    16bc:	100b883a 	mov	r5,r2
    16c0:	180d883a 	mov	r6,r3
    16c4:	2809883a 	mov	r4,r5
    16c8:	300b883a 	mov	r5,r6
    16cc:	00041540 	call	4154 <sqrt>
    16d0:	100b883a 	mov	r5,r2
    16d4:	180d883a 	mov	r6,r3
    16d8:	2809883a 	mov	r4,r5
    16dc:	300b883a 	mov	r5,r6
    16e0:	000a35c0 	call	a35c <__truncdfsf2>
    16e4:	e0bff815 	stw	r2,-32(fp)
	float fYn2den = sqrt(Yn2den);
    16e8:	e1000717 	ldw	r4,28(fp)
    16ec:	e1400817 	ldw	r5,32(fp)
    16f0:	0007da80 	call	7da8 <__floatundidf>
    16f4:	100b883a 	mov	r5,r2
    16f8:	180d883a 	mov	r6,r3
    16fc:	2809883a 	mov	r4,r5
    1700:	300b883a 	mov	r5,r6
    1704:	00041540 	call	4154 <sqrt>
    1708:	100b883a 	mov	r5,r2
    170c:	180d883a 	mov	r6,r3
    1710:	2809883a 	mov	r4,r5
    1714:	300b883a 	mov	r5,r6
    1718:	000a35c0 	call	a35c <__truncdfsf2>
    171c:	e0bff715 	stw	r2,-36(fp)
	float Yn2 = fYn2num / fYn2den;
    1720:	e13ff817 	ldw	r4,-32(fp)
    1724:	e17ff717 	ldw	r5,-36(fp)
    1728:	000904c0 	call	904c <__divsf3>
    172c:	e0bff615 	stw	r2,-40(fp)

	float fYn3num = sqrt(Yn3num);
    1730:	e1000917 	ldw	r4,36(fp)
    1734:	e1400a17 	ldw	r5,40(fp)
    1738:	0007da80 	call	7da8 <__floatundidf>
    173c:	100b883a 	mov	r5,r2
    1740:	180d883a 	mov	r6,r3
    1744:	2809883a 	mov	r4,r5
    1748:	300b883a 	mov	r5,r6
    174c:	00041540 	call	4154 <sqrt>
    1750:	100b883a 	mov	r5,r2
    1754:	180d883a 	mov	r6,r3
    1758:	2809883a 	mov	r4,r5
    175c:	300b883a 	mov	r5,r6
    1760:	000a35c0 	call	a35c <__truncdfsf2>
    1764:	e0bff515 	stw	r2,-44(fp)
	float fYn3den = sqrt(Yn3den);
    1768:	e1000b17 	ldw	r4,44(fp)
    176c:	e1400c17 	ldw	r5,48(fp)
    1770:	0007da80 	call	7da8 <__floatundidf>
    1774:	100b883a 	mov	r5,r2
    1778:	180d883a 	mov	r6,r3
    177c:	2809883a 	mov	r4,r5
    1780:	300b883a 	mov	r5,r6
    1784:	00041540 	call	4154 <sqrt>
    1788:	100b883a 	mov	r5,r2
    178c:	180d883a 	mov	r6,r3
    1790:	2809883a 	mov	r4,r5
    1794:	300b883a 	mov	r5,r6
    1798:	000a35c0 	call	a35c <__truncdfsf2>
    179c:	e0bff415 	stw	r2,-48(fp)
	float Yn3 = fYn3num / fYn3den;
    17a0:	e13ff517 	ldw	r4,-44(fp)
    17a4:	e17ff417 	ldw	r5,-48(fp)
    17a8:	000904c0 	call	904c <__divsf3>
    17ac:	e0bff315 	stw	r2,-52(fp)

	alt_64 fraction = ( (3*Yn1) - (4*Yn2) + Yn3 ) * precision;
    17b0:	e13ff917 	ldw	r4,-28(fp)
    17b4:	01501034 	movhi	r5,16448
    17b8:	0008e6c0 	call	8e6c <__mulsf3>
    17bc:	1021883a 	mov	r16,r2
    17c0:	e13ff617 	ldw	r4,-40(fp)
    17c4:	01702034 	movhi	r5,49280
    17c8:	0008e6c0 	call	8e6c <__mulsf3>
    17cc:	8009883a 	mov	r4,r16
    17d0:	100b883a 	mov	r5,r2
    17d4:	0008e080 	call	8e08 <__addsf3>
    17d8:	1009883a 	mov	r4,r2
    17dc:	e17ff317 	ldw	r5,-52(fp)
    17e0:	0008e080 	call	8e08 <__addsf3>
    17e4:	1021883a 	mov	r16,r2
    17e8:	e13ffc17 	ldw	r4,-16(fp)
    17ec:	00093280 	call	9328 <__floatsisf>
    17f0:	8009883a 	mov	r4,r16
    17f4:	100b883a 	mov	r5,r2
    17f8:	0008e6c0 	call	8e6c <__mulsf3>
    17fc:	1009883a 	mov	r4,r2
    1800:	0007ad80 	call	7ad8 <__fixsfdi>
    1804:	1009883a 	mov	r4,r2
    1808:	180b883a 	mov	r5,r3
    180c:	e13ff115 	stw	r4,-60(fp)
    1810:	e17ff215 	stw	r5,-56(fp)
	fraction /= ( 2*(Yn1 - (2*Yn2) + Yn3) );
    1814:	e13ff117 	ldw	r4,-60(fp)
    1818:	e17ff217 	ldw	r5,-56(fp)
    181c:	0007c100 	call	7c10 <__floatdisf>
    1820:	1021883a 	mov	r16,r2
    1824:	e13ff617 	ldw	r4,-40(fp)
    1828:	01700034 	movhi	r5,49152
    182c:	0008e6c0 	call	8e6c <__mulsf3>
    1830:	1009883a 	mov	r4,r2
    1834:	e17ff917 	ldw	r5,-28(fp)
    1838:	0008e080 	call	8e08 <__addsf3>
    183c:	1009883a 	mov	r4,r2
    1840:	e17ff317 	ldw	r5,-52(fp)
    1844:	0008e080 	call	8e08 <__addsf3>
    1848:	1009883a 	mov	r4,r2
    184c:	100b883a 	mov	r5,r2
    1850:	0008e080 	call	8e08 <__addsf3>
    1854:	8009883a 	mov	r4,r16
    1858:	100b883a 	mov	r5,r2
    185c:	000904c0 	call	904c <__divsf3>
    1860:	1009883a 	mov	r4,r2
    1864:	0007ad80 	call	7ad8 <__fixsfdi>
    1868:	1009883a 	mov	r4,r2
    186c:	180b883a 	mov	r5,r3
    1870:	e13ff115 	stw	r4,-60(fp)
    1874:	e17ff215 	stw	r5,-56(fp)

	alt_u64 nTPT = (n1* precision) + fraction;
    1878:	e13ffd17 	ldw	r4,-12(fp)
    187c:	e17ffc17 	ldw	r5,-16(fp)
    1880:	000a6b00 	call	a6b0 <__mulsi3>
    1884:	1007d7fa 	srai	r3,r2,31
    1888:	1009883a 	mov	r4,r2
    188c:	180b883a 	mov	r5,r3
    1890:	e1bff117 	ldw	r6,-60(fp)
    1894:	e1fff217 	ldw	r7,-56(fp)
    1898:	2185883a 	add	r2,r4,r6
    189c:	1111803a 	cmpltu	r8,r2,r4
    18a0:	29c7883a 	add	r3,r5,r7
    18a4:	40c9883a 	add	r4,r8,r3
    18a8:	2007883a 	mov	r3,r4
    18ac:	1009883a 	mov	r4,r2
    18b0:	180b883a 	mov	r5,r3
    18b4:	e13fef15 	stw	r4,-68(fp)
    18b8:	e17ff015 	stw	r5,-64(fp)
	return nTPT;
    18bc:	e17fef17 	ldw	r5,-68(fp)
    18c0:	e1bff017 	ldw	r6,-64(fp)
    18c4:	2807883a 	mov	r3,r5
    18c8:	3009883a 	mov	r4,r6
}
    18cc:	1805883a 	mov	r2,r3
    18d0:	2007883a 	mov	r3,r4
    18d4:	e037883a 	mov	sp,fp
    18d8:	dfc00217 	ldw	ra,8(sp)
    18dc:	df000117 	ldw	fp,4(sp)
    18e0:	dc000017 	ldw	r16,0(sp)
    18e4:	dec00304 	addi	sp,sp,12
    18e8:	f800283a 	ret

000018ec <Display_Results>:

//===============================
// Output Results to LCD/PC
//===============================
void Display_Results(int mode, float Rfloat, float phifloat, float thetafloat)
{
    18ec:	defff704 	addi	sp,sp,-36
    18f0:	de00012e 	bgeu	sp,et,18f8 <Display_Results+0xc>
    18f4:	003da0fa 	break	3
    18f8:	dfc00815 	stw	ra,32(sp)
    18fc:	df000715 	stw	fp,28(sp)
    1900:	df000704 	addi	fp,sp,28
    1904:	e13ffc15 	stw	r4,-16(fp)
    1908:	e17ffd15 	stw	r5,-12(fp)
    190c:	e1bffe15 	stw	r6,-8(fp)
    1910:	e1ffff15 	stw	r7,-4(fp)
	int R 		= float2int(Rfloat);
    1914:	e13ffd17 	ldw	r4,-12(fp)
    1918:	0002e540 	call	2e54 <float2int>
    191c:	e0bffb15 	stw	r2,-20(fp)
	int phi 	= float2int(phifloat);
    1920:	e13ffe17 	ldw	r4,-8(fp)
    1924:	0002e540 	call	2e54 <float2int>
    1928:	e0bffa15 	stw	r2,-24(fp)
	int theta	= float2int(thetafloat);
    192c:	e13fff17 	ldw	r4,-4(fp)
    1930:	0002e540 	call	2e54 <float2int>
    1934:	e0bff915 	stw	r2,-28(fp)

	if(R<0)	{	}
    1938:	e0bffb17 	ldw	r2,-20(fp)
    193c:	1004803a 	cmplt	r2,r2,zero
    1940:	10007f1e 	bne	r2,zero,1b40 <Display_Results+0x254>
	else {
#ifdef EVALUATE_3D
       printf("%d\t%d\t%d\n", R, phi, theta);
#endif
		/* Print results */
		line1[7]=(R/100)%10+0x30;
    1944:	e13ffb17 	ldw	r4,-20(fp)
    1948:	01401904 	movi	r5,100
    194c:	000a5e00 	call	a5e0 <__divsi3>
    1950:	1009883a 	mov	r4,r2
    1954:	01400284 	movi	r5,10
    1958:	000a6400 	call	a640 <__modsi3>
    195c:	10800c04 	addi	r2,r2,48
    1960:	1007883a 	mov	r3,r2
    1964:	00800074 	movhi	r2,1
    1968:	10bb3b04 	addi	r2,r2,-4884
    196c:	10c001c5 	stb	r3,7(r2)
		line1[8]=(R/10)%10+0x30;
    1970:	e13ffb17 	ldw	r4,-20(fp)
    1974:	01400284 	movi	r5,10
    1978:	000a5e00 	call	a5e0 <__divsi3>
    197c:	1009883a 	mov	r4,r2
    1980:	01400284 	movi	r5,10
    1984:	000a6400 	call	a640 <__modsi3>
    1988:	10800c04 	addi	r2,r2,48
    198c:	1007883a 	mov	r3,r2
    1990:	00800074 	movhi	r2,1
    1994:	10bb3b04 	addi	r2,r2,-4884
    1998:	10c00205 	stb	r3,8(r2)
		line1[9]=R%10+0x30;
    199c:	e13ffb17 	ldw	r4,-20(fp)
    19a0:	01400284 	movi	r5,10
    19a4:	000a6400 	call	a640 <__modsi3>
    19a8:	10800c04 	addi	r2,r2,48
    19ac:	1007883a 	mov	r3,r2
    19b0:	00800074 	movhi	r2,1
    19b4:	10bb3b04 	addi	r2,r2,-4884
    19b8:	10c00245 	stb	r3,9(r2)

		LCD_Display(line1, 1);
    19bc:	01000074 	movhi	r4,1
    19c0:	213b3b04 	addi	r4,r4,-4884
    19c4:	01400044 	movi	r5,1
    19c8:	00002e00 	call	2e0 <LCD_Display>

		if(mode==3) {
    19cc:	e0bffc17 	ldw	r2,-16(fp)
    19d0:	108000d8 	cmpnei	r2,r2,3
    19d4:	10005a1e 	bne	r2,zero,1b40 <Display_Results+0x254>
			if (phi < 0) {
    19d8:	e0bffa17 	ldw	r2,-24(fp)
    19dc:	1004403a 	cmpge	r2,r2,zero
    19e0:	1000081e 	bne	r2,zero,1a04 <Display_Results+0x118>
				line2[7]=0x2D; /*-*/
    19e4:	00c00074 	movhi	r3,1
    19e8:	18fb3f04 	addi	r3,r3,-4868
    19ec:	00800b44 	movi	r2,45
    19f0:	188001c5 	stb	r2,7(r3)
				phi=-phi;
    19f4:	e0bffa17 	ldw	r2,-24(fp)
    19f8:	0085c83a 	sub	r2,zero,r2
    19fc:	e0bffa15 	stw	r2,-24(fp)
    1a00:	00000406 	br	1a14 <Display_Results+0x128>
			} else {
				line2[7]=0x20;
    1a04:	00c00074 	movhi	r3,1
    1a08:	18fb3f04 	addi	r3,r3,-4868
    1a0c:	00800804 	movi	r2,32
    1a10:	188001c5 	stb	r2,7(r3)
			}

			line2[8]=(phi/100)%10+0x30;
    1a14:	e13ffa17 	ldw	r4,-24(fp)
    1a18:	01401904 	movi	r5,100
    1a1c:	000a5e00 	call	a5e0 <__divsi3>
    1a20:	1009883a 	mov	r4,r2
    1a24:	01400284 	movi	r5,10
    1a28:	000a6400 	call	a640 <__modsi3>
    1a2c:	10800c04 	addi	r2,r2,48
    1a30:	1007883a 	mov	r3,r2
    1a34:	00800074 	movhi	r2,1
    1a38:	10bb3f04 	addi	r2,r2,-4868
    1a3c:	10c00205 	stb	r3,8(r2)
			line2[9]=(phi/10)%10+0x30;
    1a40:	e13ffa17 	ldw	r4,-24(fp)
    1a44:	01400284 	movi	r5,10
    1a48:	000a5e00 	call	a5e0 <__divsi3>
    1a4c:	1009883a 	mov	r4,r2
    1a50:	01400284 	movi	r5,10
    1a54:	000a6400 	call	a640 <__modsi3>
    1a58:	10800c04 	addi	r2,r2,48
    1a5c:	1007883a 	mov	r3,r2
    1a60:	00800074 	movhi	r2,1
    1a64:	10bb3f04 	addi	r2,r2,-4868
    1a68:	10c00245 	stb	r3,9(r2)
			line2[10]=phi%10+0x30;
    1a6c:	e13ffa17 	ldw	r4,-24(fp)
    1a70:	01400284 	movi	r5,10
    1a74:	000a6400 	call	a640 <__modsi3>
    1a78:	10800c04 	addi	r2,r2,48
    1a7c:	1007883a 	mov	r3,r2
    1a80:	00800074 	movhi	r2,1
    1a84:	10bb3f04 	addi	r2,r2,-4868
    1a88:	10c00285 	stb	r3,10(r2)


			if(theta<0) {
    1a8c:	e0bff917 	ldw	r2,-28(fp)
    1a90:	1004403a 	cmpge	r2,r2,zero
    1a94:	1000081e 	bne	r2,zero,1ab8 <Display_Results+0x1cc>
				line2[13]=0x2D; /*-*/
    1a98:	00c00074 	movhi	r3,1
    1a9c:	18fb3f04 	addi	r3,r3,-4868
    1aa0:	00800b44 	movi	r2,45
    1aa4:	18800345 	stb	r2,13(r3)
				theta=-theta;
    1aa8:	e0bff917 	ldw	r2,-28(fp)
    1aac:	0085c83a 	sub	r2,zero,r2
    1ab0:	e0bff915 	stw	r2,-28(fp)
    1ab4:	00000b06 	br	1ae4 <Display_Results+0x1f8>
			} else {
				line2[13]=(theta/100)%10+0x30;
    1ab8:	e13ff917 	ldw	r4,-28(fp)
    1abc:	01401904 	movi	r5,100
    1ac0:	000a5e00 	call	a5e0 <__divsi3>
    1ac4:	1009883a 	mov	r4,r2
    1ac8:	01400284 	movi	r5,10
    1acc:	000a6400 	call	a640 <__modsi3>
    1ad0:	10800c04 	addi	r2,r2,48
    1ad4:	1007883a 	mov	r3,r2
    1ad8:	00800074 	movhi	r2,1
    1adc:	10bb3f04 	addi	r2,r2,-4868
    1ae0:	10c00345 	stb	r3,13(r2)
			}

			line2[14]=(theta/10)%10+0x30;
    1ae4:	e13ff917 	ldw	r4,-28(fp)
    1ae8:	01400284 	movi	r5,10
    1aec:	000a5e00 	call	a5e0 <__divsi3>
    1af0:	1009883a 	mov	r4,r2
    1af4:	01400284 	movi	r5,10
    1af8:	000a6400 	call	a640 <__modsi3>
    1afc:	10800c04 	addi	r2,r2,48
    1b00:	1007883a 	mov	r3,r2
    1b04:	00800074 	movhi	r2,1
    1b08:	10bb3f04 	addi	r2,r2,-4868
    1b0c:	10c00385 	stb	r3,14(r2)
			line2[15]=theta%10+0x30;
    1b10:	e13ff917 	ldw	r4,-28(fp)
    1b14:	01400284 	movi	r5,10
    1b18:	000a6400 	call	a640 <__modsi3>
    1b1c:	10800c04 	addi	r2,r2,48
    1b20:	1007883a 	mov	r3,r2
    1b24:	00800074 	movhi	r2,1
    1b28:	10bb3f04 	addi	r2,r2,-4868
    1b2c:	10c003c5 	stb	r3,15(r2)

			LCD_Display(line2, 2);
    1b30:	01000074 	movhi	r4,1
    1b34:	213b3f04 	addi	r4,r4,-4868
    1b38:	01400084 	movi	r5,2
    1b3c:	00002e00 	call	2e0 <LCD_Display>
		}
	}
}
    1b40:	e037883a 	mov	sp,fp
    1b44:	dfc00117 	ldw	ra,4(sp)
    1b48:	df000017 	ldw	fp,0(sp)
    1b4c:	dec00204 	addi	sp,sp,8
    1b50:	f800283a 	ret

00001b54 <find_constants>:
//===============================
// ALGORITHM TO SOLVE R, YAW, ELEVATION:
//===============================
/* Runs once on startup */
void find_constants()
{
    1b54:	defffb04 	addi	sp,sp,-20
    1b58:	de00012e 	bgeu	sp,et,1b60 <find_constants+0xc>
    1b5c:	003da0fa 	break	3
    1b60:	dfc00415 	stw	ra,16(sp)
    1b64:	df000315 	stw	fp,12(sp)
    1b68:	dc400215 	stw	r17,8(sp)
    1b6c:	dc000115 	stw	r16,4(sp)
    1b70:	df000104 	addi	fp,sp,4
	int k;

	/* Calculate pi */
	pi=(float)acos(-1.0);
    1b74:	0009883a 	mov	r4,zero
    1b78:	016ffc34 	movhi	r5,49136
    1b7c:	0003ef40 	call	3ef4 <acos>
    1b80:	100b883a 	mov	r5,r2
    1b84:	180d883a 	mov	r6,r3
    1b88:	2809883a 	mov	r4,r5
    1b8c:	300b883a 	mov	r5,r6
    1b90:	000a35c0 	call	a35c <__truncdfsf2>
    1b94:	d0a6cf15 	stw	r2,-25796(gp)

	/* Set initial mode */
	calc_mode=3;
    1b98:	008000c4 	movi	r2,3
    1b9c:	d0a6c315 	stw	r2,-25844(gp)

	/* Initialise counters */

	for(k=0;k<5;k++)
    1ba0:	e03fff15 	stw	zero,-4(fp)
    1ba4:	00000a06 	br	1bd0 <find_constants+0x7c>
	{
		counter[k]=0;
    1ba8:	e0bfff17 	ldw	r2,-4(fp)
    1bac:	00c00074 	movhi	r3,1
    1bb0:	18c7ec04 	addi	r3,r3,8112
    1bb4:	1085883a 	add	r2,r2,r2
    1bb8:	1085883a 	add	r2,r2,r2
    1bbc:	10c5883a 	add	r2,r2,r3
    1bc0:	10000015 	stw	zero,0(r2)
	/* Set initial mode */
	calc_mode=3;

	/* Initialise counters */

	for(k=0;k<5;k++)
    1bc4:	e0bfff17 	ldw	r2,-4(fp)
    1bc8:	10800044 	addi	r2,r2,1
    1bcc:	e0bfff15 	stw	r2,-4(fp)
    1bd0:	e0bfff17 	ldw	r2,-4(fp)
    1bd4:	10800150 	cmplti	r2,r2,5
    1bd8:	103ff31e 	bne	r2,zero,1ba8 <find_constants+0x54>
	{
		counter[k]=0;
	}

	/* Set receiver coordinates (mm) */
	y[0]=25+7;
    1bdc:	00c00074 	movhi	r3,1
    1be0:	18c7f604 	addi	r3,r3,8152
    1be4:	00908034 	movhi	r2,16896
    1be8:	18800015 	stw	r2,0(r3)
	y[1]=33+7;
    1bec:	00c00074 	movhi	r3,1
    1bf0:	18c7f604 	addi	r3,r3,8152
    1bf4:	00908834 	movhi	r2,16928
    1bf8:	18800115 	stw	r2,4(r3)
	y[2]=40+7;
    1bfc:	00c00074 	movhi	r3,1
    1c00:	18c7f604 	addi	r3,r3,8152
    1c04:	00908f34 	movhi	r2,16956
    1c08:	18800215 	stw	r2,8(r3)
	y[3]=25+7;
    1c0c:	00c00074 	movhi	r3,1
    1c10:	18c7f604 	addi	r3,r3,8152
    1c14:	00908034 	movhi	r2,16896
    1c18:	18800315 	stw	r2,12(r3)
	y[4]=35+7;
    1c1c:	00c00074 	movhi	r3,1
    1c20:	18c7f604 	addi	r3,r3,8152
    1c24:	00908a34 	movhi	r2,16936
    1c28:	18800415 	stw	r2,16(r3)
	z[0]=0;
    1c2c:	00800074 	movhi	r2,1
    1c30:	1087e704 	addi	r2,r2,8092
    1c34:	10000015 	stw	zero,0(r2)
	z[1]=3;
    1c38:	00c00074 	movhi	r3,1
    1c3c:	18c7e704 	addi	r3,r3,8092
    1c40:	00901034 	movhi	r2,16448
    1c44:	18800115 	stw	r2,4(r3)
	z[2]=5;
    1c48:	00c00074 	movhi	r3,1
    1c4c:	18c7e704 	addi	r3,r3,8092
    1c50:	00902834 	movhi	r2,16544
    1c54:	18800215 	stw	r2,8(r3)
	z[3]=10;
    1c58:	00c00074 	movhi	r3,1
    1c5c:	18c7e704 	addi	r3,r3,8092
    1c60:	00904834 	movhi	r2,16672
    1c64:	18800315 	stw	r2,12(r3)
	z[4]=10;
    1c68:	00c00074 	movhi	r3,1
    1c6c:	18c7e704 	addi	r3,r3,8092
    1c70:	00904834 	movhi	r2,16672
    1c74:	18800415 	stw	r2,16(r3)

	for(k=0;k<5;k++)
    1c78:	e03fff15 	stw	zero,-4(fp)
    1c7c:	00005b06 	br	1dec <find_constants+0x298>
	{
		/*y[k]=y[k]*count_rate/v/1000;
		z[k]=z[k]*count_rate/v/1000;*/
		y[k]=y[k]*625/784;
    1c80:	e43fff17 	ldw	r16,-4(fp)
    1c84:	e0bfff17 	ldw	r2,-4(fp)
    1c88:	00c00074 	movhi	r3,1
    1c8c:	18c7f604 	addi	r3,r3,8152
    1c90:	1085883a 	add	r2,r2,r2
    1c94:	1085883a 	add	r2,r2,r2
    1c98:	10c5883a 	add	r2,r2,r3
    1c9c:	10800017 	ldw	r2,0(r2)
    1ca0:	1009883a 	mov	r4,r2
    1ca4:	01510734 	movhi	r5,17436
    1ca8:	29500004 	addi	r5,r5,16384
    1cac:	0008e6c0 	call	8e6c <__mulsf3>
    1cb0:	1009883a 	mov	r4,r2
    1cb4:	01511134 	movhi	r5,17476
    1cb8:	000904c0 	call	904c <__divsf3>
    1cbc:	1009883a 	mov	r4,r2
    1cc0:	00c00074 	movhi	r3,1
    1cc4:	18c7f604 	addi	r3,r3,8152
    1cc8:	8405883a 	add	r2,r16,r16
    1ccc:	1085883a 	add	r2,r2,r2
    1cd0:	10c5883a 	add	r2,r2,r3
    1cd4:	11000015 	stw	r4,0(r2)
		z[k]=z[k]*625/784;
    1cd8:	e43fff17 	ldw	r16,-4(fp)
    1cdc:	e0bfff17 	ldw	r2,-4(fp)
    1ce0:	00c00074 	movhi	r3,1
    1ce4:	18c7e704 	addi	r3,r3,8092
    1ce8:	1085883a 	add	r2,r2,r2
    1cec:	1085883a 	add	r2,r2,r2
    1cf0:	10c5883a 	add	r2,r2,r3
    1cf4:	10800017 	ldw	r2,0(r2)
    1cf8:	1009883a 	mov	r4,r2
    1cfc:	01510734 	movhi	r5,17436
    1d00:	29500004 	addi	r5,r5,16384
    1d04:	0008e6c0 	call	8e6c <__mulsf3>
    1d08:	1009883a 	mov	r4,r2
    1d0c:	01511134 	movhi	r5,17476
    1d10:	000904c0 	call	904c <__divsf3>
    1d14:	1009883a 	mov	r4,r2
    1d18:	00c00074 	movhi	r3,1
    1d1c:	18c7e704 	addi	r3,r3,8092
    1d20:	8405883a 	add	r2,r16,r16
    1d24:	1085883a 	add	r2,r2,r2
    1d28:	10c5883a 	add	r2,r2,r3
    1d2c:	11000015 	stw	r4,0(r2)

		d_2[k]=y[k]*y[k]+z[k]*z[k]; /* Square of distance from transmitter to receiver */
    1d30:	e43fff17 	ldw	r16,-4(fp)
    1d34:	e0bfff17 	ldw	r2,-4(fp)
    1d38:	00c00074 	movhi	r3,1
    1d3c:	18c7f604 	addi	r3,r3,8152
    1d40:	1085883a 	add	r2,r2,r2
    1d44:	1085883a 	add	r2,r2,r2
    1d48:	10c5883a 	add	r2,r2,r3
    1d4c:	11000017 	ldw	r4,0(r2)
    1d50:	e0bfff17 	ldw	r2,-4(fp)
    1d54:	00c00074 	movhi	r3,1
    1d58:	18c7f604 	addi	r3,r3,8152
    1d5c:	1085883a 	add	r2,r2,r2
    1d60:	1085883a 	add	r2,r2,r2
    1d64:	10c5883a 	add	r2,r2,r3
    1d68:	10800017 	ldw	r2,0(r2)
    1d6c:	100b883a 	mov	r5,r2
    1d70:	0008e6c0 	call	8e6c <__mulsf3>
    1d74:	1023883a 	mov	r17,r2
    1d78:	e0bfff17 	ldw	r2,-4(fp)
    1d7c:	00c00074 	movhi	r3,1
    1d80:	18c7e704 	addi	r3,r3,8092
    1d84:	1085883a 	add	r2,r2,r2
    1d88:	1085883a 	add	r2,r2,r2
    1d8c:	10c5883a 	add	r2,r2,r3
    1d90:	11000017 	ldw	r4,0(r2)
    1d94:	e0bfff17 	ldw	r2,-4(fp)
    1d98:	00c00074 	movhi	r3,1
    1d9c:	18c7e704 	addi	r3,r3,8092
    1da0:	1085883a 	add	r2,r2,r2
    1da4:	1085883a 	add	r2,r2,r2
    1da8:	10c5883a 	add	r2,r2,r3
    1dac:	10800017 	ldw	r2,0(r2)
    1db0:	100b883a 	mov	r5,r2
    1db4:	0008e6c0 	call	8e6c <__mulsf3>
    1db8:	8809883a 	mov	r4,r17
    1dbc:	100b883a 	mov	r5,r2
    1dc0:	0008e080 	call	8e08 <__addsf3>
    1dc4:	1009883a 	mov	r4,r2
    1dc8:	00c00074 	movhi	r3,1
    1dcc:	18c7f104 	addi	r3,r3,8132
    1dd0:	8405883a 	add	r2,r16,r16
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	10c5883a 	add	r2,r2,r3
    1ddc:	11000015 	stw	r4,0(r2)
	z[1]=3;
	z[2]=5;
	z[3]=10;
	z[4]=10;

	for(k=0;k<5;k++)
    1de0:	e0bfff17 	ldw	r2,-4(fp)
    1de4:	10800044 	addi	r2,r2,1
    1de8:	e0bfff15 	stw	r2,-4(fp)
    1dec:	e0bfff17 	ldw	r2,-4(fp)
    1df0:	10800150 	cmplti	r2,r2,5
    1df4:	103fa21e 	bne	r2,zero,1c80 <find_constants+0x12c>
		y[k]=y[k]*625/784;
		z[k]=z[k]*625/784;

		d_2[k]=y[k]*y[k]+z[k]*z[k]; /* Square of distance from transmitter to receiver */
	}
}
    1df8:	e037883a 	mov	sp,fp
    1dfc:	dfc00317 	ldw	ra,12(sp)
    1e00:	df000217 	ldw	fp,8(sp)
    1e04:	dc400117 	ldw	r17,4(sp)
    1e08:	dc000017 	ldw	r16,0(sp)
    1e0c:	dec00404 	addi	sp,sp,16
    1e10:	f800283a 	ret

00001e14 <find_coordinates>:

/* Runs after each detection cycle */
void find_coordinates(float L[5], int N, int mode, float *R, float *phi, float *theta)
{
    1e14:	deffab04 	addi	sp,sp,-340
    1e18:	de00012e 	bgeu	sp,et,1e20 <find_coordinates+0xc>
    1e1c:	003da0fa 	break	3
    1e20:	dfc05415 	stw	ra,336(sp)
    1e24:	df005315 	stw	fp,332(sp)
    1e28:	dcc05215 	stw	r19,328(sp)
    1e2c:	dc805115 	stw	r18,324(sp)
    1e30:	dc405015 	stw	r17,320(sp)
    1e34:	dc004f15 	stw	r16,316(sp)
    1e38:	df004f04 	addi	fp,sp,316
    1e3c:	e13ffc15 	stw	r4,-16(fp)
    1e40:	e17ffd15 	stw	r5,-12(fp)
    1e44:	e1bffe15 	stw	r6,-8(fp)
    1e48:	e1ffff15 	stw	r7,-4(fp)
	float ave_pl, max_diff, detBTB, detA1;
	int i,j,k,n;
	int k_valid[5];

	/* Maximum difference between path lengths (mm to counts)*/
	max_diff=MAX_DIFF;
    1e4c:	0090feb4 	movhi	r2,17402
    1e50:	e0bfb815 	stw	r2,-288(fp)

	ave_pl=0;
    1e54:	e03fb915 	stw	zero,-284(fp)

	for(k=0;k<N;k++)
    1e58:	e03fb415 	stw	zero,-304(fp)
    1e5c:	00000e06 	br	1e98 <find_coordinates+0x84>
	{
		ave_pl+=L[k];
    1e60:	e0bfb417 	ldw	r2,-304(fp)
    1e64:	1085883a 	add	r2,r2,r2
    1e68:	1085883a 	add	r2,r2,r2
    1e6c:	1007883a 	mov	r3,r2
    1e70:	e0bffc17 	ldw	r2,-16(fp)
    1e74:	1885883a 	add	r2,r3,r2
    1e78:	10800017 	ldw	r2,0(r2)
    1e7c:	e13fb917 	ldw	r4,-284(fp)
    1e80:	100b883a 	mov	r5,r2
    1e84:	0008e080 	call	8e08 <__addsf3>
    1e88:	e0bfb915 	stw	r2,-284(fp)
	/* Maximum difference between path lengths (mm to counts)*/
	max_diff=MAX_DIFF;

	ave_pl=0;

	for(k=0;k<N;k++)
    1e8c:	e0bfb417 	ldw	r2,-304(fp)
    1e90:	10800044 	addi	r2,r2,1
    1e94:	e0bfb415 	stw	r2,-304(fp)
    1e98:	e0ffb417 	ldw	r3,-304(fp)
    1e9c:	e0bffd17 	ldw	r2,-12(fp)
    1ea0:	18bfef16 	blt	r3,r2,1e60 <find_coordinates+0x4c>
	{
		ave_pl+=L[k];
	}

	ave_pl/=N;
    1ea4:	e13ffd17 	ldw	r4,-12(fp)
    1ea8:	00093280 	call	9328 <__floatsisf>
    1eac:	e13fb917 	ldw	r4,-284(fp)
    1eb0:	100b883a 	mov	r5,r2
    1eb4:	000904c0 	call	904c <__divsf3>
    1eb8:	e0bfb915 	stw	r2,-284(fp)

	/* Check for missed and false detections */
	n=N;
    1ebc:	e0bffd17 	ldw	r2,-12(fp)
    1ec0:	e0bfb315 	stw	r2,-308(fp)
	i=0;
    1ec4:	e03fb615 	stw	zero,-296(fp)

	for(k=0;k<N;k++)
    1ec8:	e03fb415 	stw	zero,-304(fp)
    1ecc:	00003406 	br	1fa0 <find_coordinates+0x18c>
	{
		if((L[k]-ave_pl)*(L[k]-ave_pl)>max_diff*max_diff) /* Check for false detections */
    1ed0:	e0bfb417 	ldw	r2,-304(fp)
    1ed4:	1085883a 	add	r2,r2,r2
    1ed8:	1085883a 	add	r2,r2,r2
    1edc:	1007883a 	mov	r3,r2
    1ee0:	e0bffc17 	ldw	r2,-16(fp)
    1ee4:	1885883a 	add	r2,r3,r2
    1ee8:	10800017 	ldw	r2,0(r2)
    1eec:	1009883a 	mov	r4,r2
    1ef0:	e17fb917 	ldw	r5,-284(fp)
    1ef4:	0008d980 	call	8d98 <__subsf3>
    1ef8:	1021883a 	mov	r16,r2
    1efc:	e0bfb417 	ldw	r2,-304(fp)
    1f00:	1085883a 	add	r2,r2,r2
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	1007883a 	mov	r3,r2
    1f0c:	e0bffc17 	ldw	r2,-16(fp)
    1f10:	1885883a 	add	r2,r3,r2
    1f14:	10800017 	ldw	r2,0(r2)
    1f18:	1009883a 	mov	r4,r2
    1f1c:	e17fb917 	ldw	r5,-284(fp)
    1f20:	0008d980 	call	8d98 <__subsf3>
    1f24:	8009883a 	mov	r4,r16
    1f28:	100b883a 	mov	r5,r2
    1f2c:	0008e6c0 	call	8e6c <__mulsf3>
    1f30:	1021883a 	mov	r16,r2
    1f34:	e13fb817 	ldw	r4,-288(fp)
    1f38:	e17fb817 	ldw	r5,-288(fp)
    1f3c:	0008e6c0 	call	8e6c <__mulsf3>
    1f40:	8009883a 	mov	r4,r16
    1f44:	100b883a 	mov	r5,r2
    1f48:	00092380 	call	9238 <__gtsf2>
    1f4c:	10800048 	cmpgei	r2,r2,1
    1f50:	1000011e 	bne	r2,zero,1f58 <find_coordinates+0x144>
    1f54:	00000406 	br	1f68 <find_coordinates+0x154>
		{
			n-=1;
    1f58:	e0bfb317 	ldw	r2,-308(fp)
    1f5c:	10bfffc4 	addi	r2,r2,-1
    1f60:	e0bfb315 	stw	r2,-308(fp)
    1f64:	00000b06 	br	1f94 <find_coordinates+0x180>
		}
		else
		{
			k_valid[i]=k;
    1f68:	e0bfb617 	ldw	r2,-296(fp)
    1f6c:	1085883a 	add	r2,r2,r2
    1f70:	1085883a 	add	r2,r2,r2
    1f74:	e0ffb304 	addi	r3,fp,-308
    1f78:	10c5883a 	add	r2,r2,r3
    1f7c:	10c04404 	addi	r3,r2,272
    1f80:	e0bfb417 	ldw	r2,-304(fp)
    1f84:	18800015 	stw	r2,0(r3)
			i++;
    1f88:	e0bfb617 	ldw	r2,-296(fp)
    1f8c:	10800044 	addi	r2,r2,1
    1f90:	e0bfb615 	stw	r2,-296(fp)

	/* Check for missed and false detections */
	n=N;
	i=0;

	for(k=0;k<N;k++)
    1f94:	e0bfb417 	ldw	r2,-304(fp)
    1f98:	10800044 	addi	r2,r2,1
    1f9c:	e0bfb415 	stw	r2,-304(fp)
    1fa0:	e0ffb417 	ldw	r3,-304(fp)
    1fa4:	e0bffd17 	ldw	r2,-12(fp)
    1fa8:	18bfc916 	blt	r3,r2,1ed0 <find_coordinates+0xbc>
			k_valid[i]=k;
			i++;
		}
	}

	if(n<mode)
    1fac:	e0ffb317 	ldw	r3,-308(fp)
    1fb0:	e0bffe17 	ldw	r2,-8(fp)
    1fb4:	1880080e 	bge	r3,r2,1fd8 <find_coordinates+0x1c4>
	{
		/* Underdetermined system */
		*R=-1;
    1fb8:	e0ffff17 	ldw	r3,-4(fp)
    1fbc:	00afe034 	movhi	r2,49024
    1fc0:	18800015 	stw	r2,0(r3)
		*phi=0;
    1fc4:	e0800617 	ldw	r2,24(fp)
    1fc8:	10000015 	stw	zero,0(r2)
		*theta=0;
    1fcc:	e0800717 	ldw	r2,28(fp)
    1fd0:	10000015 	stw	zero,0(r2)
    1fd4:	00014806 	br	24f8 <find_coordinates+0x6e4>

	}
	else
	{

		for(k=0;k<n;k++)
    1fd8:	e03fb415 	stw	zero,-304(fp)
    1fdc:	00003806 	br	20c0 <find_coordinates+0x2ac>
		{
			b[k][0]=L[k_valid[k]]*L[k_valid[k]]-d_2[k_valid[k]];
    1fe0:	e47fb417 	ldw	r17,-304(fp)
    1fe4:	e0bfb417 	ldw	r2,-304(fp)
    1fe8:	1085883a 	add	r2,r2,r2
    1fec:	1085883a 	add	r2,r2,r2
    1ff0:	e13fb304 	addi	r4,fp,-308
    1ff4:	1105883a 	add	r2,r2,r4
    1ff8:	10804404 	addi	r2,r2,272
    1ffc:	10800017 	ldw	r2,0(r2)
    2000:	1085883a 	add	r2,r2,r2
    2004:	1085883a 	add	r2,r2,r2
    2008:	1007883a 	mov	r3,r2
    200c:	e0bffc17 	ldw	r2,-16(fp)
    2010:	1885883a 	add	r2,r3,r2
    2014:	11000017 	ldw	r4,0(r2)
    2018:	e0bfb417 	ldw	r2,-304(fp)
    201c:	1085883a 	add	r2,r2,r2
    2020:	1085883a 	add	r2,r2,r2
    2024:	e0ffb304 	addi	r3,fp,-308
    2028:	10c5883a 	add	r2,r2,r3
    202c:	10804404 	addi	r2,r2,272
    2030:	10800017 	ldw	r2,0(r2)
    2034:	1085883a 	add	r2,r2,r2
    2038:	1085883a 	add	r2,r2,r2
    203c:	1007883a 	mov	r3,r2
    2040:	e0bffc17 	ldw	r2,-16(fp)
    2044:	1885883a 	add	r2,r3,r2
    2048:	10800017 	ldw	r2,0(r2)
    204c:	100b883a 	mov	r5,r2
    2050:	0008e6c0 	call	8e6c <__mulsf3>
    2054:	1009883a 	mov	r4,r2
    2058:	e0bfb417 	ldw	r2,-304(fp)
    205c:	1085883a 	add	r2,r2,r2
    2060:	1085883a 	add	r2,r2,r2
    2064:	e0ffb304 	addi	r3,fp,-308
    2068:	10c5883a 	add	r2,r2,r3
    206c:	10804404 	addi	r2,r2,272
    2070:	10800017 	ldw	r2,0(r2)
    2074:	00c00074 	movhi	r3,1
    2078:	18c7f104 	addi	r3,r3,8132
    207c:	1085883a 	add	r2,r2,r2
    2080:	1085883a 	add	r2,r2,r2
    2084:	10c5883a 	add	r2,r2,r3
    2088:	10800017 	ldw	r2,0(r2)
    208c:	100b883a 	mov	r5,r2
    2090:	0008d980 	call	8d98 <__subsf3>
    2094:	1021883a 	mov	r16,r2
    2098:	8809883a 	mov	r4,r17
    209c:	01400304 	movi	r5,12
    20a0:	000a6b00 	call	a6b0 <__mulsi3>
    20a4:	e13fb304 	addi	r4,fp,-308
    20a8:	1105883a 	add	r2,r2,r4
    20ac:	10802804 	addi	r2,r2,160
    20b0:	14000015 	stw	r16,0(r2)

	}
	else
	{

		for(k=0;k<n;k++)
    20b4:	e0bfb417 	ldw	r2,-304(fp)
    20b8:	10800044 	addi	r2,r2,1
    20bc:	e0bfb415 	stw	r2,-304(fp)
    20c0:	e0ffb417 	ldw	r3,-304(fp)
    20c4:	e0bfb317 	ldw	r2,-308(fp)
    20c8:	18bfc516 	blt	r3,r2,1fe0 <find_coordinates+0x1cc>
		{
			b[k][0]=L[k_valid[k]]*L[k_valid[k]]-d_2[k_valid[k]];
		}


		find_denominator(k_valid,n,mode,&BT,&BTB,&detBTB);
    20cc:	e13ff704 	addi	r4,fp,-36
    20d0:	e1ffba04 	addi	r7,fp,-280
    20d4:	e0bfc904 	addi	r2,fp,-220
    20d8:	d8800015 	stw	r2,0(sp)
    20dc:	e0bff604 	addi	r2,fp,-40
    20e0:	d8800115 	stw	r2,4(sp)
    20e4:	e17fb317 	ldw	r5,-308(fp)
    20e8:	e1bffe17 	ldw	r6,-8(fp)
    20ec:	00028340 	call	2834 <find_denominator>

		if(detBTB==0)
    20f0:	e0bff617 	ldw	r2,-40(fp)
    20f4:	1009883a 	mov	r4,r2
    20f8:	000b883a 	mov	r5,zero
    20fc:	00091c00 	call	91c0 <__eqsf2>
    2100:	1005003a 	cmpeq	r2,r2,zero
    2104:	1000011e 	bne	r2,zero,210c <find_coordinates+0x2f8>
    2108:	00000806 	br	212c <find_coordinates+0x318>
		{
			*R=-1;
    210c:	e0ffff17 	ldw	r3,-4(fp)
    2110:	00afe034 	movhi	r2,49024
    2114:	18800015 	stw	r2,0(r3)
			*phi=0;
    2118:	e0800617 	ldw	r2,24(fp)
    211c:	10000015 	stw	zero,0(r2)
			*theta=0;
    2120:	e0800717 	ldw	r2,28(fp)
    2124:	10000015 	stw	zero,0(r2)
    2128:	0000f306 	br	24f8 <find_coordinates+0x6e4>
		}
		else
		{
			matrix_multiply(BT,mode,n,b,1,&BTb);
    212c:	e13fba04 	addi	r4,fp,-280
    2130:	e1ffdb04 	addi	r7,fp,-148
    2134:	00800044 	movi	r2,1
    2138:	d8800015 	stw	r2,0(sp)
    213c:	e0bfd204 	addi	r2,fp,-184
    2140:	d8800115 	stw	r2,4(sp)
    2144:	e17ffe17 	ldw	r5,-8(fp)
    2148:	e1bfb317 	ldw	r6,-308(fp)
    214c:	0002d080 	call	2d08 <matrix_multiply>

			/* Find numerators */

			for(k=0;k<mode;k++)
    2150:	e03fb415 	stw	zero,-304(fp)
    2154:	00005206 	br	22a0 <find_coordinates+0x48c>
			{
				/* Use column substitution to solve for x */
				for(i=0;i<mode;i++)
    2158:	e03fb615 	stw	zero,-296(fp)
    215c:	00003a06 	br	2248 <find_coordinates+0x434>
				{
					for(j=0;j<mode;j++)
    2160:	e03fb515 	stw	zero,-300(fp)
    2164:	00003206 	br	2230 <find_coordinates+0x41c>
					{
						if(j==k)
    2168:	e0ffb517 	ldw	r3,-300(fp)
    216c:	e0bfb417 	ldw	r2,-304(fp)
    2170:	1880141e 	bne	r3,r2,21c4 <find_coordinates+0x3b0>
						{
							A1[i][j]=BTb[i][0];
    2174:	e43fb617 	ldw	r16,-296(fp)
    2178:	e47fb517 	ldw	r17,-300(fp)
    217c:	e13fb617 	ldw	r4,-296(fp)
    2180:	01400304 	movi	r5,12
    2184:	000a6b00 	call	a6b0 <__mulsi3>
    2188:	e0ffb304 	addi	r3,fp,-308
    218c:	10c5883a 	add	r2,r2,r3
    2190:	10801f04 	addi	r2,r2,124
    2194:	10c00017 	ldw	r3,0(r2)
    2198:	8005883a 	mov	r2,r16
    219c:	1085883a 	add	r2,r2,r2
    21a0:	1405883a 	add	r2,r2,r16
    21a4:	1445883a 	add	r2,r2,r17
    21a8:	1085883a 	add	r2,r2,r2
    21ac:	1085883a 	add	r2,r2,r2
    21b0:	e13fb304 	addi	r4,fp,-308
    21b4:	1105883a 	add	r2,r2,r4
    21b8:	10803704 	addi	r2,r2,220
    21bc:	10c00015 	stw	r3,0(r2)
    21c0:	00001806 	br	2224 <find_coordinates+0x410>
						}
						else
						{
							A1[i][j]=BTB[i][j];
    21c4:	e17fb617 	ldw	r5,-296(fp)
    21c8:	e1bfb517 	ldw	r6,-300(fp)
    21cc:	e0ffb617 	ldw	r3,-296(fp)
    21d0:	e13fb517 	ldw	r4,-300(fp)
    21d4:	1805883a 	mov	r2,r3
    21d8:	1085883a 	add	r2,r2,r2
    21dc:	10c5883a 	add	r2,r2,r3
    21e0:	1105883a 	add	r2,r2,r4
    21e4:	1085883a 	add	r2,r2,r2
    21e8:	1085883a 	add	r2,r2,r2
    21ec:	e0ffb304 	addi	r3,fp,-308
    21f0:	10c5883a 	add	r2,r2,r3
    21f4:	10801604 	addi	r2,r2,88
    21f8:	10c00017 	ldw	r3,0(r2)
    21fc:	2805883a 	mov	r2,r5
    2200:	1085883a 	add	r2,r2,r2
    2204:	1145883a 	add	r2,r2,r5
    2208:	1185883a 	add	r2,r2,r6
    220c:	1085883a 	add	r2,r2,r2
    2210:	1085883a 	add	r2,r2,r2
    2214:	e13fb304 	addi	r4,fp,-308
    2218:	1105883a 	add	r2,r2,r4
    221c:	10803704 	addi	r2,r2,220
    2220:	10c00015 	stw	r3,0(r2)
			for(k=0;k<mode;k++)
			{
				/* Use column substitution to solve for x */
				for(i=0;i<mode;i++)
				{
					for(j=0;j<mode;j++)
    2224:	e0bfb517 	ldw	r2,-300(fp)
    2228:	10800044 	addi	r2,r2,1
    222c:	e0bfb515 	stw	r2,-300(fp)
    2230:	e0ffb517 	ldw	r3,-300(fp)
    2234:	e0bffe17 	ldw	r2,-8(fp)
    2238:	18bfcb16 	blt	r3,r2,2168 <find_coordinates+0x354>
			/* Find numerators */

			for(k=0;k<mode;k++)
			{
				/* Use column substitution to solve for x */
				for(i=0;i<mode;i++)
    223c:	e0bfb617 	ldw	r2,-296(fp)
    2240:	10800044 	addi	r2,r2,1
    2244:	e0bfb615 	stw	r2,-296(fp)
    2248:	e0ffb617 	ldw	r3,-296(fp)
    224c:	e0bffe17 	ldw	r2,-8(fp)
    2250:	18bfc316 	blt	r3,r2,2160 <find_coordinates+0x34c>
							A1[i][j]=BTB[i][j];
						}
					}
				}

				detA1=determinant(A1,mode);
    2254:	e13fea04 	addi	r4,fp,-88
    2258:	e17ffe17 	ldw	r5,-8(fp)
    225c:	00029c00 	call	29c0 <determinant>
    2260:	e0bfb715 	stw	r2,-292(fp)

				/* Solve linear system */
				x[k]=detA1/detBTB;
    2264:	e43fb417 	ldw	r16,-304(fp)
    2268:	e0bff617 	ldw	r2,-40(fp)
    226c:	e13fb717 	ldw	r4,-292(fp)
    2270:	100b883a 	mov	r5,r2
    2274:	000904c0 	call	904c <__divsf3>
    2278:	1007883a 	mov	r3,r2
    227c:	8405883a 	add	r2,r16,r16
    2280:	1085883a 	add	r2,r2,r2
    2284:	e13fb304 	addi	r4,fp,-308
    2288:	1105883a 	add	r2,r2,r4
    228c:	10804004 	addi	r2,r2,256
    2290:	10c00015 	stw	r3,0(r2)
		{
			matrix_multiply(BT,mode,n,b,1,&BTb);

			/* Find numerators */

			for(k=0;k<mode;k++)
    2294:	e0bfb417 	ldw	r2,-304(fp)
    2298:	10800044 	addi	r2,r2,1
    229c:	e0bfb415 	stw	r2,-304(fp)
    22a0:	e0ffb417 	ldw	r3,-304(fp)
    22a4:	e0bffe17 	ldw	r2,-8(fp)
    22a8:	18bfab16 	blt	r3,r2,2158 <find_coordinates+0x344>
				/* Solve linear system */
				x[k]=detA1/detBTB;
			}

			/* Use x to find coordinates */
			*R=sqrt(x[0])/2;
    22ac:	e0bff317 	ldw	r2,-52(fp)
    22b0:	1009883a 	mov	r4,r2
    22b4:	00093c00 	call	93c0 <__extendsfdf2>
    22b8:	100b883a 	mov	r5,r2
    22bc:	180d883a 	mov	r6,r3
    22c0:	2809883a 	mov	r4,r5
    22c4:	300b883a 	mov	r5,r6
    22c8:	00041540 	call	4154 <sqrt>
    22cc:	100b883a 	mov	r5,r2
    22d0:	180d883a 	mov	r6,r3
    22d4:	2809883a 	mov	r4,r5
    22d8:	300b883a 	mov	r5,r6
    22dc:	000d883a 	mov	r6,zero
    22e0:	01d00034 	movhi	r7,16384
    22e4:	0009cdc0 	call	9cdc <__divdf3>
    22e8:	1009883a 	mov	r4,r2
    22ec:	180b883a 	mov	r5,r3
    22f0:	2005883a 	mov	r2,r4
    22f4:	2807883a 	mov	r3,r5
    22f8:	1009883a 	mov	r4,r2
    22fc:	180b883a 	mov	r5,r3
    2300:	000a35c0 	call	a35c <__truncdfsf2>
    2304:	1007883a 	mov	r3,r2
    2308:	e0bfff17 	ldw	r2,-4(fp)
    230c:	10c00015 	stw	r3,0(r2)
			*phi=0;
    2310:	e0800617 	ldw	r2,24(fp)
    2314:	10000015 	stw	zero,0(r2)
			*theta=pi/2;
    2318:	d0a6cf17 	ldw	r2,-25796(gp)
    231c:	1009883a 	mov	r4,r2
    2320:	01500034 	movhi	r5,16384
    2324:	000904c0 	call	904c <__divsf3>
    2328:	1007883a 	mov	r3,r2
    232c:	e0800717 	ldw	r2,28(fp)
    2330:	10c00015 	stw	r3,0(r2)

			if(mode==2)
    2334:	e0bffe17 	ldw	r2,-8(fp)
    2338:	10800098 	cmpnei	r2,r2,2
    233c:	1000181e 	bne	r2,zero,23a0 <find_coordinates+0x58c>
			{
				*phi=(float)asin(-x[1]/(*R*4));
    2340:	e43ff417 	ldw	r16,-48(fp)
    2344:	e0bfff17 	ldw	r2,-4(fp)
    2348:	10800017 	ldw	r2,0(r2)
    234c:	1009883a 	mov	r4,r2
    2350:	01702034 	movhi	r5,49280
    2354:	0008e6c0 	call	8e6c <__mulsf3>
    2358:	8009883a 	mov	r4,r16
    235c:	100b883a 	mov	r5,r2
    2360:	000904c0 	call	904c <__divsf3>
    2364:	1009883a 	mov	r4,r2
    2368:	00093c00 	call	93c0 <__extendsfdf2>
    236c:	100b883a 	mov	r5,r2
    2370:	180d883a 	mov	r6,r3
    2374:	2809883a 	mov	r4,r5
    2378:	300b883a 	mov	r5,r6
    237c:	00040240 	call	4024 <asin>
    2380:	100b883a 	mov	r5,r2
    2384:	180d883a 	mov	r6,r3
    2388:	2809883a 	mov	r4,r5
    238c:	300b883a 	mov	r5,r6
    2390:	000a35c0 	call	a35c <__truncdfsf2>
    2394:	1007883a 	mov	r3,r2
    2398:	e0800617 	ldw	r2,24(fp)
    239c:	10c00015 	stw	r3,0(r2)
			}

			if(mode==3)
    23a0:	e0bffe17 	ldw	r2,-8(fp)
    23a4:	108000d8 	cmpnei	r2,r2,3
    23a8:	10004f1e 	bne	r2,zero,24e8 <find_coordinates+0x6d4>
			{
				*theta=(float)acos(-x[2]/(*R*4));
    23ac:	e43ff517 	ldw	r16,-44(fp)
    23b0:	e0bfff17 	ldw	r2,-4(fp)
    23b4:	10800017 	ldw	r2,0(r2)
    23b8:	1009883a 	mov	r4,r2
    23bc:	01702034 	movhi	r5,49280
    23c0:	0008e6c0 	call	8e6c <__mulsf3>
    23c4:	8009883a 	mov	r4,r16
    23c8:	100b883a 	mov	r5,r2
    23cc:	000904c0 	call	904c <__divsf3>
    23d0:	1009883a 	mov	r4,r2
    23d4:	00093c00 	call	93c0 <__extendsfdf2>
    23d8:	100b883a 	mov	r5,r2
    23dc:	180d883a 	mov	r6,r3
    23e0:	2809883a 	mov	r4,r5
    23e4:	300b883a 	mov	r5,r6
    23e8:	0003ef40 	call	3ef4 <acos>
    23ec:	100b883a 	mov	r5,r2
    23f0:	180d883a 	mov	r6,r3
    23f4:	2809883a 	mov	r4,r5
    23f8:	300b883a 	mov	r5,r6
    23fc:	000a35c0 	call	a35c <__truncdfsf2>
    2400:	1007883a 	mov	r3,r2
    2404:	e0800717 	ldw	r2,28(fp)
    2408:	10c00015 	stw	r3,0(r2)
				*phi=(float)asin(-x[1]/(*R*4*sin(*theta)));
    240c:	e0bff417 	ldw	r2,-48(fp)
    2410:	10a0003c 	xorhi	r2,r2,32768
    2414:	1009883a 	mov	r4,r2
    2418:	00093c00 	call	93c0 <__extendsfdf2>
    241c:	1025883a 	mov	r18,r2
    2420:	1827883a 	mov	r19,r3
    2424:	e0bfff17 	ldw	r2,-4(fp)
    2428:	10800017 	ldw	r2,0(r2)
    242c:	1009883a 	mov	r4,r2
    2430:	01502034 	movhi	r5,16512
    2434:	0008e6c0 	call	8e6c <__mulsf3>
    2438:	1009883a 	mov	r4,r2
    243c:	00093c00 	call	93c0 <__extendsfdf2>
    2440:	1021883a 	mov	r16,r2
    2444:	1823883a 	mov	r17,r3
    2448:	e0800717 	ldw	r2,28(fp)
    244c:	10800017 	ldw	r2,0(r2)
    2450:	1009883a 	mov	r4,r2
    2454:	00093c00 	call	93c0 <__extendsfdf2>
    2458:	100b883a 	mov	r5,r2
    245c:	180d883a 	mov	r6,r3
    2460:	2809883a 	mov	r4,r5
    2464:	300b883a 	mov	r5,r6
    2468:	0003d880 	call	3d88 <sin>
    246c:	100f883a 	mov	r7,r2
    2470:	1811883a 	mov	r8,r3
    2474:	8009883a 	mov	r4,r16
    2478:	880b883a 	mov	r5,r17
    247c:	380d883a 	mov	r6,r7
    2480:	400f883a 	mov	r7,r8
    2484:	00099180 	call	9918 <__muldf3>
    2488:	1009883a 	mov	r4,r2
    248c:	180b883a 	mov	r5,r3
    2490:	2005883a 	mov	r2,r4
    2494:	2807883a 	mov	r3,r5
    2498:	9009883a 	mov	r4,r18
    249c:	980b883a 	mov	r5,r19
    24a0:	100d883a 	mov	r6,r2
    24a4:	180f883a 	mov	r7,r3
    24a8:	0009cdc0 	call	9cdc <__divdf3>
    24ac:	1009883a 	mov	r4,r2
    24b0:	180b883a 	mov	r5,r3
    24b4:	2005883a 	mov	r2,r4
    24b8:	2807883a 	mov	r3,r5
    24bc:	1009883a 	mov	r4,r2
    24c0:	180b883a 	mov	r5,r3
    24c4:	00040240 	call	4024 <asin>
    24c8:	100b883a 	mov	r5,r2
    24cc:	180d883a 	mov	r6,r3
    24d0:	2809883a 	mov	r4,r5
    24d4:	300b883a 	mov	r5,r6
    24d8:	000a35c0 	call	a35c <__truncdfsf2>
    24dc:	1007883a 	mov	r3,r2
    24e0:	e0800617 	ldw	r2,24(fp)
    24e4:	10c00015 	stw	r3,0(r2)
			}

			convert_results(R,phi,theta); /* Convert results to correct units */
    24e8:	e13fff17 	ldw	r4,-4(fp)
    24ec:	e1400617 	ldw	r5,24(fp)
    24f0:	e1800717 	ldw	r6,28(fp)
    24f4:	000251c0 	call	251c <convert_results>
		}


	}

}
    24f8:	e037883a 	mov	sp,fp
    24fc:	dfc00517 	ldw	ra,20(sp)
    2500:	df000417 	ldw	fp,16(sp)
    2504:	dcc00317 	ldw	r19,12(sp)
    2508:	dc800217 	ldw	r18,8(sp)
    250c:	dc400117 	ldw	r17,4(sp)
    2510:	dc000017 	ldw	r16,0(sp)
    2514:	dec00604 	addi	sp,sp,24
    2518:	f800283a 	ret

0000251c <convert_results>:


/* Converts coordinates to correct units */
void convert_results(float *Rptr, float *phiptr, float *thetaptr)
{
    251c:	defff404 	addi	sp,sp,-48
    2520:	de00012e 	bgeu	sp,et,2528 <convert_results+0xc>
    2524:	003da0fa 	break	3
    2528:	dfc00b15 	stw	ra,44(sp)
    252c:	df000a15 	stw	fp,40(sp)
    2530:	dc400915 	stw	r17,36(sp)
    2534:	dc000815 	stw	r16,32(sp)
    2538:	df000804 	addi	fp,sp,32
    253c:	e13ffd15 	stw	r4,-12(fp)
    2540:	e17ffe15 	stw	r5,-8(fp)
    2544:	e1bfff15 	stw	r6,-4(fp)
	float R, phi, theta;
	int dist_prec=1, angle_prec=5; /* Precision*/
    2548:	00800044 	movi	r2,1
    254c:	e0bff915 	stw	r2,-28(fp)
    2550:	00800144 	movi	r2,5
    2554:	e0bff815 	stw	r2,-32(fp)

	R=*Rptr;
    2558:	e0bffd17 	ldw	r2,-12(fp)
    255c:	10800017 	ldw	r2,0(r2)
    2560:	e0bffc15 	stw	r2,-16(fp)
	phi=*phiptr;
    2564:	e0bffe17 	ldw	r2,-8(fp)
    2568:	10800017 	ldw	r2,0(r2)
    256c:	e0bffb15 	stw	r2,-20(fp)
	theta=*thetaptr;
    2570:	e0bfff17 	ldw	r2,-4(fp)
    2574:	10800017 	ldw	r2,0(r2)
    2578:	e0bffa15 	stw	r2,-24(fp)

	R*=0.12544; /* Convert to cm */
    257c:	e13ffc17 	ldw	r4,-16(fp)
    2580:	00093c00 	call	93c0 <__extendsfdf2>
    2584:	100b883a 	mov	r5,r2
    2588:	180d883a 	mov	r6,r3
    258c:	2809883a 	mov	r4,r5
    2590:	300b883a 	mov	r5,r6
    2594:	01bf33b4 	movhi	r6,64718
    2598:	31871604 	addi	r6,r6,7256
    259c:	01cff034 	movhi	r7,16320
    25a0:	39c39a84 	addi	r7,r7,3690
    25a4:	00099180 	call	9918 <__muldf3>
    25a8:	1009883a 	mov	r4,r2
    25ac:	180b883a 	mov	r5,r3
    25b0:	2005883a 	mov	r2,r4
    25b4:	2807883a 	mov	r3,r5
    25b8:	1009883a 	mov	r4,r2
    25bc:	180b883a 	mov	r5,r3
    25c0:	000a35c0 	call	a35c <__truncdfsf2>
    25c4:	e0bffc15 	stw	r2,-16(fp)

	/* Convert to degrees */
	phi=phi*180/pi;
    25c8:	e13ffb17 	ldw	r4,-20(fp)
    25cc:	0150cd34 	movhi	r5,17204
    25d0:	0008e6c0 	call	8e6c <__mulsf3>
    25d4:	d0e6cf17 	ldw	r3,-25796(gp)
    25d8:	1009883a 	mov	r4,r2
    25dc:	180b883a 	mov	r5,r3
    25e0:	000904c0 	call	904c <__divsf3>
    25e4:	e0bffb15 	stw	r2,-20(fp)
	theta=theta*180/pi-90; /* Convert azimuth to elevation */
    25e8:	e13ffa17 	ldw	r4,-24(fp)
    25ec:	0150cd34 	movhi	r5,17204
    25f0:	0008e6c0 	call	8e6c <__mulsf3>
    25f4:	d0e6cf17 	ldw	r3,-25796(gp)
    25f8:	1009883a 	mov	r4,r2
    25fc:	180b883a 	mov	r5,r3
    2600:	000904c0 	call	904c <__divsf3>
    2604:	1009883a 	mov	r4,r2
    2608:	0150ad34 	movhi	r5,17076
    260c:	0008d980 	call	8d98 <__subsf3>
    2610:	e0bffa15 	stw	r2,-24(fp)

	/* Round results */
	R=dist_prec*floor(R/dist_prec+0.5);
    2614:	e13ff917 	ldw	r4,-28(fp)
    2618:	000a1540 	call	a154 <__floatsidf>
    261c:	1021883a 	mov	r16,r2
    2620:	1823883a 	mov	r17,r3
    2624:	e13ff917 	ldw	r4,-28(fp)
    2628:	00093280 	call	9328 <__floatsisf>
    262c:	e13ffc17 	ldw	r4,-16(fp)
    2630:	100b883a 	mov	r5,r2
    2634:	000904c0 	call	904c <__divsf3>
    2638:	1009883a 	mov	r4,r2
    263c:	00093c00 	call	93c0 <__extendsfdf2>
    2640:	100b883a 	mov	r5,r2
    2644:	180d883a 	mov	r6,r3
    2648:	2809883a 	mov	r4,r5
    264c:	300b883a 	mov	r5,r6
    2650:	000d883a 	mov	r6,zero
    2654:	01cff834 	movhi	r7,16352
    2658:	00098a40 	call	98a4 <__adddf3>
    265c:	1009883a 	mov	r4,r2
    2660:	180b883a 	mov	r5,r3
    2664:	2005883a 	mov	r2,r4
    2668:	2807883a 	mov	r3,r5
    266c:	1009883a 	mov	r4,r2
    2670:	180b883a 	mov	r5,r3
    2674:	0003b640 	call	3b64 <floor>
    2678:	100f883a 	mov	r7,r2
    267c:	1811883a 	mov	r8,r3
    2680:	8009883a 	mov	r4,r16
    2684:	880b883a 	mov	r5,r17
    2688:	380d883a 	mov	r6,r7
    268c:	400f883a 	mov	r7,r8
    2690:	00099180 	call	9918 <__muldf3>
    2694:	1009883a 	mov	r4,r2
    2698:	180b883a 	mov	r5,r3
    269c:	2005883a 	mov	r2,r4
    26a0:	2807883a 	mov	r3,r5
    26a4:	1009883a 	mov	r4,r2
    26a8:	180b883a 	mov	r5,r3
    26ac:	000a35c0 	call	a35c <__truncdfsf2>
    26b0:	e0bffc15 	stw	r2,-16(fp)
	phi=angle_prec*floor(phi/angle_prec+0.5);
    26b4:	e13ff817 	ldw	r4,-32(fp)
    26b8:	000a1540 	call	a154 <__floatsidf>
    26bc:	1021883a 	mov	r16,r2
    26c0:	1823883a 	mov	r17,r3
    26c4:	e13ff817 	ldw	r4,-32(fp)
    26c8:	00093280 	call	9328 <__floatsisf>
    26cc:	e13ffb17 	ldw	r4,-20(fp)
    26d0:	100b883a 	mov	r5,r2
    26d4:	000904c0 	call	904c <__divsf3>
    26d8:	1009883a 	mov	r4,r2
    26dc:	00093c00 	call	93c0 <__extendsfdf2>
    26e0:	100b883a 	mov	r5,r2
    26e4:	180d883a 	mov	r6,r3
    26e8:	2809883a 	mov	r4,r5
    26ec:	300b883a 	mov	r5,r6
    26f0:	000d883a 	mov	r6,zero
    26f4:	01cff834 	movhi	r7,16352
    26f8:	00098a40 	call	98a4 <__adddf3>
    26fc:	1009883a 	mov	r4,r2
    2700:	180b883a 	mov	r5,r3
    2704:	2005883a 	mov	r2,r4
    2708:	2807883a 	mov	r3,r5
    270c:	1009883a 	mov	r4,r2
    2710:	180b883a 	mov	r5,r3
    2714:	0003b640 	call	3b64 <floor>
    2718:	100f883a 	mov	r7,r2
    271c:	1811883a 	mov	r8,r3
    2720:	8009883a 	mov	r4,r16
    2724:	880b883a 	mov	r5,r17
    2728:	380d883a 	mov	r6,r7
    272c:	400f883a 	mov	r7,r8
    2730:	00099180 	call	9918 <__muldf3>
    2734:	1009883a 	mov	r4,r2
    2738:	180b883a 	mov	r5,r3
    273c:	2005883a 	mov	r2,r4
    2740:	2807883a 	mov	r3,r5
    2744:	1009883a 	mov	r4,r2
    2748:	180b883a 	mov	r5,r3
    274c:	000a35c0 	call	a35c <__truncdfsf2>
    2750:	e0bffb15 	stw	r2,-20(fp)
	theta=angle_prec*floor(theta/angle_prec+0.5);
    2754:	e13ff817 	ldw	r4,-32(fp)
    2758:	000a1540 	call	a154 <__floatsidf>
    275c:	1021883a 	mov	r16,r2
    2760:	1823883a 	mov	r17,r3
    2764:	e13ff817 	ldw	r4,-32(fp)
    2768:	00093280 	call	9328 <__floatsisf>
    276c:	e13ffa17 	ldw	r4,-24(fp)
    2770:	100b883a 	mov	r5,r2
    2774:	000904c0 	call	904c <__divsf3>
    2778:	1009883a 	mov	r4,r2
    277c:	00093c00 	call	93c0 <__extendsfdf2>
    2780:	100b883a 	mov	r5,r2
    2784:	180d883a 	mov	r6,r3
    2788:	2809883a 	mov	r4,r5
    278c:	300b883a 	mov	r5,r6
    2790:	000d883a 	mov	r6,zero
    2794:	01cff834 	movhi	r7,16352
    2798:	00098a40 	call	98a4 <__adddf3>
    279c:	1009883a 	mov	r4,r2
    27a0:	180b883a 	mov	r5,r3
    27a4:	2005883a 	mov	r2,r4
    27a8:	2807883a 	mov	r3,r5
    27ac:	1009883a 	mov	r4,r2
    27b0:	180b883a 	mov	r5,r3
    27b4:	0003b640 	call	3b64 <floor>
    27b8:	100f883a 	mov	r7,r2
    27bc:	1811883a 	mov	r8,r3
    27c0:	8009883a 	mov	r4,r16
    27c4:	880b883a 	mov	r5,r17
    27c8:	380d883a 	mov	r6,r7
    27cc:	400f883a 	mov	r7,r8
    27d0:	00099180 	call	9918 <__muldf3>
    27d4:	1009883a 	mov	r4,r2
    27d8:	180b883a 	mov	r5,r3
    27dc:	2005883a 	mov	r2,r4
    27e0:	2807883a 	mov	r3,r5
    27e4:	1009883a 	mov	r4,r2
    27e8:	180b883a 	mov	r5,r3
    27ec:	000a35c0 	call	a35c <__truncdfsf2>
    27f0:	e0bffa15 	stw	r2,-24(fp)

	*Rptr=R;
    27f4:	e0fffd17 	ldw	r3,-12(fp)
    27f8:	e0bffc17 	ldw	r2,-16(fp)
    27fc:	18800015 	stw	r2,0(r3)
	*phiptr=phi;
    2800:	e0fffe17 	ldw	r3,-8(fp)
    2804:	e0bffb17 	ldw	r2,-20(fp)
    2808:	18800015 	stw	r2,0(r3)
	*thetaptr=theta;
    280c:	e0ffff17 	ldw	r3,-4(fp)
    2810:	e0bffa17 	ldw	r2,-24(fp)
    2814:	18800015 	stw	r2,0(r3)
}
    2818:	e037883a 	mov	sp,fp
    281c:	dfc00317 	ldw	ra,12(sp)
    2820:	df000217 	ldw	fp,8(sp)
    2824:	dc400117 	ldw	r17,4(sp)
    2828:	dc000017 	ldw	r16,0(sp)
    282c:	dec00404 	addi	sp,sp,16
    2830:	f800283a 	ret

00002834 <find_denominator>:


/* Finds denominator matrix */
void find_denominator(int *k_valid, int n, int mode, float (*MTptr)[3][5], float (*MTMptr)[3][3], float *detMTMptr)
{
    2834:	deffe704 	addi	sp,sp,-100
    2838:	de00012e 	bgeu	sp,et,2840 <find_denominator+0xc>
    283c:	003da0fa 	break	3
    2840:	dfc01815 	stw	ra,96(sp)
    2844:	df001715 	stw	fp,92(sp)
    2848:	dc001615 	stw	r16,88(sp)
    284c:	df001604 	addi	fp,sp,88
    2850:	e13ffc15 	stw	r4,-16(fp)
    2854:	e17ffd15 	stw	r5,-12(fp)
    2858:	e1bffe15 	stw	r6,-8(fp)
    285c:	e1ffff15 	stw	r7,-4(fp)
	float M[5][3];
	int k;

	/* Initial matrix */

	for(k=0;k<n;k++)
    2860:	e03fec15 	stw	zero,-80(fp)
    2864:	00003906 	br	294c <find_denominator+0x118>
	{

		M[k][0]=1;
    2868:	e13fec17 	ldw	r4,-80(fp)
    286c:	01400304 	movi	r5,12
    2870:	000a6b00 	call	a6b0 <__mulsi3>
    2874:	e0ffec04 	addi	r3,fp,-80
    2878:	10c5883a 	add	r2,r2,r3
    287c:	10c00104 	addi	r3,r2,4
    2880:	008fe034 	movhi	r2,16256
    2884:	18800015 	stw	r2,0(r3)
		if(mode>1)
    2888:	e0bffe17 	ldw	r2,-8(fp)
    288c:	10800090 	cmplti	r2,r2,2
    2890:	1000141e 	bne	r2,zero,28e4 <find_denominator+0xb0>
		{
			M[k][1]=y[k_valid[k]];
    2894:	e13fec17 	ldw	r4,-80(fp)
    2898:	e0bfec17 	ldw	r2,-80(fp)
    289c:	1085883a 	add	r2,r2,r2
    28a0:	1085883a 	add	r2,r2,r2
    28a4:	1007883a 	mov	r3,r2
    28a8:	e0bffc17 	ldw	r2,-16(fp)
    28ac:	1885883a 	add	r2,r3,r2
    28b0:	10800017 	ldw	r2,0(r2)
    28b4:	00c00074 	movhi	r3,1
    28b8:	18c7f604 	addi	r3,r3,8152
    28bc:	1085883a 	add	r2,r2,r2
    28c0:	1085883a 	add	r2,r2,r2
    28c4:	10c5883a 	add	r2,r2,r3
    28c8:	14000017 	ldw	r16,0(r2)
    28cc:	01400304 	movi	r5,12
    28d0:	000a6b00 	call	a6b0 <__mulsi3>
    28d4:	e0ffec04 	addi	r3,fp,-80
    28d8:	10c5883a 	add	r2,r2,r3
    28dc:	10800204 	addi	r2,r2,8
    28e0:	14000015 	stw	r16,0(r2)
		}
		if(mode>2)
    28e4:	e0bffe17 	ldw	r2,-8(fp)
    28e8:	108000d0 	cmplti	r2,r2,3
    28ec:	1000141e 	bne	r2,zero,2940 <find_denominator+0x10c>
		{
			M[k][2]=z[k_valid[k]];
    28f0:	e13fec17 	ldw	r4,-80(fp)
    28f4:	e0bfec17 	ldw	r2,-80(fp)
    28f8:	1085883a 	add	r2,r2,r2
    28fc:	1085883a 	add	r2,r2,r2
    2900:	1007883a 	mov	r3,r2
    2904:	e0bffc17 	ldw	r2,-16(fp)
    2908:	1885883a 	add	r2,r3,r2
    290c:	10800017 	ldw	r2,0(r2)
    2910:	00c00074 	movhi	r3,1
    2914:	18c7e704 	addi	r3,r3,8092
    2918:	1085883a 	add	r2,r2,r2
    291c:	1085883a 	add	r2,r2,r2
    2920:	10c5883a 	add	r2,r2,r3
    2924:	14000017 	ldw	r16,0(r2)
    2928:	01400304 	movi	r5,12
    292c:	000a6b00 	call	a6b0 <__mulsi3>
    2930:	e0ffec04 	addi	r3,fp,-80
    2934:	10c5883a 	add	r2,r2,r3
    2938:	10800304 	addi	r2,r2,12
    293c:	14000015 	stw	r16,0(r2)
	float M[5][3];
	int k;

	/* Initial matrix */

	for(k=0;k<n;k++)
    2940:	e0bfec17 	ldw	r2,-80(fp)
    2944:	10800044 	addi	r2,r2,1
    2948:	e0bfec15 	stw	r2,-80(fp)
    294c:	e0ffec17 	ldw	r3,-80(fp)
    2950:	e0bffd17 	ldw	r2,-12(fp)
    2954:	18bfc416 	blt	r3,r2,2868 <find_denominator+0x34>
			M[k][2]=z[k_valid[k]];
		}
	}

	/* Output matrices */
	transpose(M,MTptr,n,mode);
    2958:	e13fed04 	addi	r4,fp,-76
    295c:	e17fff17 	ldw	r5,-4(fp)
    2960:	e1bffd17 	ldw	r6,-12(fp)
    2964:	e1fffe17 	ldw	r7,-8(fp)
    2968:	0002c140 	call	2c14 <transpose>
	matrix_multiply(*MTptr,mode,n,M,mode,MTMptr);
    296c:	e13fff17 	ldw	r4,-4(fp)
    2970:	e1ffed04 	addi	r7,fp,-76
    2974:	e0bffe17 	ldw	r2,-8(fp)
    2978:	d8800015 	stw	r2,0(sp)
    297c:	e0800317 	ldw	r2,12(fp)
    2980:	d8800115 	stw	r2,4(sp)
    2984:	e17ffe17 	ldw	r5,-8(fp)
    2988:	e1bffd17 	ldw	r6,-12(fp)
    298c:	0002d080 	call	2d08 <matrix_multiply>

	*detMTMptr=determinant(*MTMptr,mode);
    2990:	e1000317 	ldw	r4,12(fp)
    2994:	e17ffe17 	ldw	r5,-8(fp)
    2998:	00029c00 	call	29c0 <determinant>
    299c:	1007883a 	mov	r3,r2
    29a0:	e0800417 	ldw	r2,16(fp)
    29a4:	10c00015 	stw	r3,0(r2)
}
    29a8:	e037883a 	mov	sp,fp
    29ac:	dfc00217 	ldw	ra,8(sp)
    29b0:	df000117 	ldw	fp,4(sp)
    29b4:	dc000017 	ldw	r16,0(sp)
    29b8:	dec00304 	addi	sp,sp,12
    29bc:	f800283a 	ret

000029c0 <determinant>:


/* Finds determinant of nxn matrix M
n can be equal to 1, 2 or 3 */
float determinant(float M[3][3], int n)
{
    29c0:	defff804 	addi	sp,sp,-32
    29c4:	de00012e 	bgeu	sp,et,29cc <determinant+0xc>
    29c8:	003da0fa 	break	3
    29cc:	dfc00715 	stw	ra,28(sp)
    29d0:	df000615 	stw	fp,24(sp)
    29d4:	dc800515 	stw	r18,20(sp)
    29d8:	dc400415 	stw	r17,16(sp)
    29dc:	dc000315 	stw	r16,12(sp)
    29e0:	df000304 	addi	fp,sp,12
    29e4:	e13ffd15 	stw	r4,-12(fp)
    29e8:	e17ffe15 	stw	r5,-8(fp)
	if(n==1)
    29ec:	e0bffe17 	ldw	r2,-8(fp)
    29f0:	10800058 	cmpnei	r2,r2,1
    29f4:	1000041e 	bne	r2,zero,2a08 <determinant+0x48>
	{
		return M[0][0];
    29f8:	e0bffd17 	ldw	r2,-12(fp)
    29fc:	10800017 	ldw	r2,0(r2)
    2a00:	e0bfff15 	stw	r2,-4(fp)
    2a04:	00007906 	br	2bec <determinant+0x22c>
	}
	else if(n==2)
    2a08:	e0bffe17 	ldw	r2,-8(fp)
    2a0c:	10800098 	cmpnei	r2,r2,2
    2a10:	1000161e 	bne	r2,zero,2a6c <determinant+0xac>
	{
		return M[0][0]*M[1][1]-M[0][1]*M[1][0];
    2a14:	e0bffd17 	ldw	r2,-12(fp)
    2a18:	10c00017 	ldw	r3,0(r2)
    2a1c:	e0bffd17 	ldw	r2,-12(fp)
    2a20:	10800304 	addi	r2,r2,12
    2a24:	10800117 	ldw	r2,4(r2)
    2a28:	1809883a 	mov	r4,r3
    2a2c:	100b883a 	mov	r5,r2
    2a30:	0008e6c0 	call	8e6c <__mulsf3>
    2a34:	1021883a 	mov	r16,r2
    2a38:	e0bffd17 	ldw	r2,-12(fp)
    2a3c:	10c00117 	ldw	r3,4(r2)
    2a40:	e0bffd17 	ldw	r2,-12(fp)
    2a44:	10800304 	addi	r2,r2,12
    2a48:	10800017 	ldw	r2,0(r2)
    2a4c:	1809883a 	mov	r4,r3
    2a50:	100b883a 	mov	r5,r2
    2a54:	0008e6c0 	call	8e6c <__mulsf3>
    2a58:	8009883a 	mov	r4,r16
    2a5c:	100b883a 	mov	r5,r2
    2a60:	0008d980 	call	8d98 <__subsf3>
    2a64:	e0bfff15 	stw	r2,-4(fp)
    2a68:	00006006 	br	2bec <determinant+0x22c>
	}
	else if(n==3)
    2a6c:	e0bffe17 	ldw	r2,-8(fp)
    2a70:	108000d8 	cmpnei	r2,r2,3
    2a74:	10005b1e 	bne	r2,zero,2be4 <determinant+0x224>
	{
		return M[0][0]*(M[1][1]*M[2][2]-M[1][2]*M[2][1])-M[0][1]*(M[1][0]*M[2][2]-M[1][2]*M[2][0])+M[0][2]*(M[1][0]*M[2][1]-M[1][1]*M[2][0]);
    2a78:	e0bffd17 	ldw	r2,-12(fp)
    2a7c:	14000017 	ldw	r16,0(r2)
    2a80:	e0bffd17 	ldw	r2,-12(fp)
    2a84:	10800304 	addi	r2,r2,12
    2a88:	10c00117 	ldw	r3,4(r2)
    2a8c:	e0bffd17 	ldw	r2,-12(fp)
    2a90:	10800604 	addi	r2,r2,24
    2a94:	10800217 	ldw	r2,8(r2)
    2a98:	1809883a 	mov	r4,r3
    2a9c:	100b883a 	mov	r5,r2
    2aa0:	0008e6c0 	call	8e6c <__mulsf3>
    2aa4:	1023883a 	mov	r17,r2
    2aa8:	e0bffd17 	ldw	r2,-12(fp)
    2aac:	10800304 	addi	r2,r2,12
    2ab0:	10c00217 	ldw	r3,8(r2)
    2ab4:	e0bffd17 	ldw	r2,-12(fp)
    2ab8:	10800604 	addi	r2,r2,24
    2abc:	10800117 	ldw	r2,4(r2)
    2ac0:	1809883a 	mov	r4,r3
    2ac4:	100b883a 	mov	r5,r2
    2ac8:	0008e6c0 	call	8e6c <__mulsf3>
    2acc:	8809883a 	mov	r4,r17
    2ad0:	100b883a 	mov	r5,r2
    2ad4:	0008d980 	call	8d98 <__subsf3>
    2ad8:	8009883a 	mov	r4,r16
    2adc:	100b883a 	mov	r5,r2
    2ae0:	0008e6c0 	call	8e6c <__mulsf3>
    2ae4:	1021883a 	mov	r16,r2
    2ae8:	e0bffd17 	ldw	r2,-12(fp)
    2aec:	14400117 	ldw	r17,4(r2)
    2af0:	e0bffd17 	ldw	r2,-12(fp)
    2af4:	10800304 	addi	r2,r2,12
    2af8:	10c00017 	ldw	r3,0(r2)
    2afc:	e0bffd17 	ldw	r2,-12(fp)
    2b00:	10800604 	addi	r2,r2,24
    2b04:	10800217 	ldw	r2,8(r2)
    2b08:	1809883a 	mov	r4,r3
    2b0c:	100b883a 	mov	r5,r2
    2b10:	0008e6c0 	call	8e6c <__mulsf3>
    2b14:	1025883a 	mov	r18,r2
    2b18:	e0bffd17 	ldw	r2,-12(fp)
    2b1c:	10800304 	addi	r2,r2,12
    2b20:	10c00217 	ldw	r3,8(r2)
    2b24:	e0bffd17 	ldw	r2,-12(fp)
    2b28:	10800604 	addi	r2,r2,24
    2b2c:	10800017 	ldw	r2,0(r2)
    2b30:	1809883a 	mov	r4,r3
    2b34:	100b883a 	mov	r5,r2
    2b38:	0008e6c0 	call	8e6c <__mulsf3>
    2b3c:	9009883a 	mov	r4,r18
    2b40:	100b883a 	mov	r5,r2
    2b44:	0008d980 	call	8d98 <__subsf3>
    2b48:	8809883a 	mov	r4,r17
    2b4c:	100b883a 	mov	r5,r2
    2b50:	0008e6c0 	call	8e6c <__mulsf3>
    2b54:	8009883a 	mov	r4,r16
    2b58:	100b883a 	mov	r5,r2
    2b5c:	0008d980 	call	8d98 <__subsf3>
    2b60:	1021883a 	mov	r16,r2
    2b64:	e0bffd17 	ldw	r2,-12(fp)
    2b68:	14400217 	ldw	r17,8(r2)
    2b6c:	e0bffd17 	ldw	r2,-12(fp)
    2b70:	10800304 	addi	r2,r2,12
    2b74:	10c00017 	ldw	r3,0(r2)
    2b78:	e0bffd17 	ldw	r2,-12(fp)
    2b7c:	10800604 	addi	r2,r2,24
    2b80:	10800117 	ldw	r2,4(r2)
    2b84:	1809883a 	mov	r4,r3
    2b88:	100b883a 	mov	r5,r2
    2b8c:	0008e6c0 	call	8e6c <__mulsf3>
    2b90:	1025883a 	mov	r18,r2
    2b94:	e0bffd17 	ldw	r2,-12(fp)
    2b98:	10800304 	addi	r2,r2,12
    2b9c:	10c00117 	ldw	r3,4(r2)
    2ba0:	e0bffd17 	ldw	r2,-12(fp)
    2ba4:	10800604 	addi	r2,r2,24
    2ba8:	10800017 	ldw	r2,0(r2)
    2bac:	1809883a 	mov	r4,r3
    2bb0:	100b883a 	mov	r5,r2
    2bb4:	0008e6c0 	call	8e6c <__mulsf3>
    2bb8:	9009883a 	mov	r4,r18
    2bbc:	100b883a 	mov	r5,r2
    2bc0:	0008d980 	call	8d98 <__subsf3>
    2bc4:	8809883a 	mov	r4,r17
    2bc8:	100b883a 	mov	r5,r2
    2bcc:	0008e6c0 	call	8e6c <__mulsf3>
    2bd0:	8009883a 	mov	r4,r16
    2bd4:	100b883a 	mov	r5,r2
    2bd8:	0008e080 	call	8e08 <__addsf3>
    2bdc:	e0bfff15 	stw	r2,-4(fp)
    2be0:	00000206 	br	2bec <determinant+0x22c>
	}
	else
	{
		return 0;
    2be4:	0005883a 	mov	r2,zero
    2be8:	e0bfff15 	stw	r2,-4(fp)
    2bec:	e0ffff17 	ldw	r3,-4(fp)
    2bf0:	1805883a 	mov	r2,r3
	}
}
    2bf4:	e037883a 	mov	sp,fp
    2bf8:	dfc00417 	ldw	ra,16(sp)
    2bfc:	df000317 	ldw	fp,12(sp)
    2c00:	dc800217 	ldw	r18,8(sp)
    2c04:	dc400117 	ldw	r17,4(sp)
    2c08:	dc000017 	ldw	r16,0(sp)
    2c0c:	dec00504 	addi	sp,sp,20
    2c10:	f800283a 	ret

00002c14 <transpose>:

/* Finds transpose of mxn matrix M */
void transpose(float M[5][3], float (*MTptr)[3][5], int m, int n)
{
    2c14:	defff404 	addi	sp,sp,-48
    2c18:	de00012e 	bgeu	sp,et,2c20 <transpose+0xc>
    2c1c:	003da0fa 	break	3
    2c20:	dfc00b15 	stw	ra,44(sp)
    2c24:	df000a15 	stw	fp,40(sp)
    2c28:	dcc00915 	stw	r19,36(sp)
    2c2c:	dc800815 	stw	r18,32(sp)
    2c30:	dc400715 	stw	r17,28(sp)
    2c34:	dc000615 	stw	r16,24(sp)
    2c38:	df000604 	addi	fp,sp,24
    2c3c:	e13ffc15 	stw	r4,-16(fp)
    2c40:	e17ffd15 	stw	r5,-12(fp)
    2c44:	e1bffe15 	stw	r6,-8(fp)
    2c48:	e1ffff15 	stw	r7,-4(fp)
	int i,j;

	for(i=0;i<n;i++)
    2c4c:	e03ffb15 	stw	zero,-20(fp)
    2c50:	00002106 	br	2cd8 <transpose+0xc4>
	{
		for(j=0;j<m;j++)
    2c54:	e03ffa15 	stw	zero,-24(fp)
    2c58:	00001906 	br	2cc0 <transpose+0xac>
		{
			(*MTptr)[i][j]=M[j][i];
    2c5c:	e4bffb17 	ldw	r18,-20(fp)
    2c60:	e4fffa17 	ldw	r19,-24(fp)
    2c64:	e13ffa17 	ldw	r4,-24(fp)
    2c68:	01400304 	movi	r5,12
    2c6c:	000a6b00 	call	a6b0 <__mulsi3>
    2c70:	1007883a 	mov	r3,r2
    2c74:	e0bffc17 	ldw	r2,-16(fp)
    2c78:	1887883a 	add	r3,r3,r2
    2c7c:	e0bffb17 	ldw	r2,-20(fp)
    2c80:	1085883a 	add	r2,r2,r2
    2c84:	1085883a 	add	r2,r2,r2
    2c88:	10c5883a 	add	r2,r2,r3
    2c8c:	14000017 	ldw	r16,0(r2)
    2c90:	e47ffd17 	ldw	r17,-12(fp)
    2c94:	9009883a 	mov	r4,r18
    2c98:	01400144 	movi	r5,5
    2c9c:	000a6b00 	call	a6b0 <__mulsi3>
    2ca0:	14c5883a 	add	r2,r2,r19
    2ca4:	1085883a 	add	r2,r2,r2
    2ca8:	1085883a 	add	r2,r2,r2
    2cac:	1445883a 	add	r2,r2,r17
    2cb0:	14000015 	stw	r16,0(r2)
{
	int i,j;

	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
    2cb4:	e0bffa17 	ldw	r2,-24(fp)
    2cb8:	10800044 	addi	r2,r2,1
    2cbc:	e0bffa15 	stw	r2,-24(fp)
    2cc0:	e0fffa17 	ldw	r3,-24(fp)
    2cc4:	e0bffe17 	ldw	r2,-8(fp)
    2cc8:	18bfe416 	blt	r3,r2,2c5c <transpose+0x48>
/* Finds transpose of mxn matrix M */
void transpose(float M[5][3], float (*MTptr)[3][5], int m, int n)
{
	int i,j;

	for(i=0;i<n;i++)
    2ccc:	e0bffb17 	ldw	r2,-20(fp)
    2cd0:	10800044 	addi	r2,r2,1
    2cd4:	e0bffb15 	stw	r2,-20(fp)
    2cd8:	e0fffb17 	ldw	r3,-20(fp)
    2cdc:	e0bfff17 	ldw	r2,-4(fp)
    2ce0:	18bfdc16 	blt	r3,r2,2c54 <transpose+0x40>
		{
			(*MTptr)[i][j]=M[j][i];
		}
	}

}
    2ce4:	e037883a 	mov	sp,fp
    2ce8:	dfc00517 	ldw	ra,20(sp)
    2cec:	df000417 	ldw	fp,16(sp)
    2cf0:	dcc00317 	ldw	r19,12(sp)
    2cf4:	dc800217 	ldw	r18,8(sp)
    2cf8:	dc400117 	ldw	r17,4(sp)
    2cfc:	dc000017 	ldw	r16,0(sp)
    2d00:	dec00604 	addi	sp,sp,24
    2d04:	f800283a 	ret

00002d08 <matrix_multiply>:

/* Multiplies mxn matrix B with nxp matrix C */
void matrix_multiply(float B[3][5], int m, int n, float C[5][3], int p, float (*BCptr)[3][3])
{
    2d08:	defff504 	addi	sp,sp,-44
    2d0c:	de00012e 	bgeu	sp,et,2d14 <matrix_multiply+0xc>
    2d10:	003da0fa 	break	3
    2d14:	dfc00a15 	stw	ra,40(sp)
    2d18:	df000915 	stw	fp,36(sp)
    2d1c:	dc000815 	stw	r16,32(sp)
    2d20:	df000804 	addi	fp,sp,32
    2d24:	e13ffc15 	stw	r4,-16(fp)
    2d28:	e17ffd15 	stw	r5,-12(fp)
    2d2c:	e1bffe15 	stw	r6,-8(fp)
    2d30:	e1ffff15 	stw	r7,-4(fp)
	float bc;
	int i, j, k;

	for(i=0;i<m;i++)
    2d34:	e03ffa15 	stw	zero,-24(fp)
    2d38:	00003d06 	br	2e30 <matrix_multiply+0x128>
	{

		for(k=0;k<p;k++)
    2d3c:	e03ff815 	stw	zero,-32(fp)
    2d40:	00003506 	br	2e18 <matrix_multiply+0x110>
		{
			bc=0;
    2d44:	e03ffb15 	stw	zero,-20(fp)

			for(j=0;j<n;j++)
    2d48:	e03ff915 	stw	zero,-28(fp)
    2d4c:	00002006 	br	2dd0 <matrix_multiply+0xc8>
			{
				bc+=B[i][j]*C[j][k];
    2d50:	e13ffa17 	ldw	r4,-24(fp)
    2d54:	01400504 	movi	r5,20
    2d58:	000a6b00 	call	a6b0 <__mulsi3>
    2d5c:	1007883a 	mov	r3,r2
    2d60:	e0bffc17 	ldw	r2,-16(fp)
    2d64:	1887883a 	add	r3,r3,r2
    2d68:	e0bff917 	ldw	r2,-28(fp)
    2d6c:	1085883a 	add	r2,r2,r2
    2d70:	1085883a 	add	r2,r2,r2
    2d74:	10c5883a 	add	r2,r2,r3
    2d78:	14000017 	ldw	r16,0(r2)
    2d7c:	e13ff917 	ldw	r4,-28(fp)
    2d80:	01400304 	movi	r5,12
    2d84:	000a6b00 	call	a6b0 <__mulsi3>
    2d88:	1007883a 	mov	r3,r2
    2d8c:	e0bfff17 	ldw	r2,-4(fp)
    2d90:	1887883a 	add	r3,r3,r2
    2d94:	e0bff817 	ldw	r2,-32(fp)
    2d98:	1085883a 	add	r2,r2,r2
    2d9c:	1085883a 	add	r2,r2,r2
    2da0:	10c5883a 	add	r2,r2,r3
    2da4:	10800017 	ldw	r2,0(r2)
    2da8:	8009883a 	mov	r4,r16
    2dac:	100b883a 	mov	r5,r2
    2db0:	0008e6c0 	call	8e6c <__mulsf3>
    2db4:	e13ffb17 	ldw	r4,-20(fp)
    2db8:	100b883a 	mov	r5,r2
    2dbc:	0008e080 	call	8e08 <__addsf3>
    2dc0:	e0bffb15 	stw	r2,-20(fp)

		for(k=0;k<p;k++)
		{
			bc=0;

			for(j=0;j<n;j++)
    2dc4:	e0bff917 	ldw	r2,-28(fp)
    2dc8:	10800044 	addi	r2,r2,1
    2dcc:	e0bff915 	stw	r2,-28(fp)
    2dd0:	e0fff917 	ldw	r3,-28(fp)
    2dd4:	e0bffe17 	ldw	r2,-8(fp)
    2dd8:	18bfdd16 	blt	r3,r2,2d50 <matrix_multiply+0x48>
			{
				bc+=B[i][j]*C[j][k];
			}

			(*BCptr)[i][k]=bc;
    2ddc:	e0fffa17 	ldw	r3,-24(fp)
    2de0:	e13ff817 	ldw	r4,-32(fp)
    2de4:	e1400417 	ldw	r5,16(fp)
    2de8:	1805883a 	mov	r2,r3
    2dec:	1085883a 	add	r2,r2,r2
    2df0:	10c5883a 	add	r2,r2,r3
    2df4:	1105883a 	add	r2,r2,r4
    2df8:	1085883a 	add	r2,r2,r2
    2dfc:	1085883a 	add	r2,r2,r2
    2e00:	1147883a 	add	r3,r2,r5
    2e04:	e0bffb17 	ldw	r2,-20(fp)
    2e08:	18800015 	stw	r2,0(r3)
	int i, j, k;

	for(i=0;i<m;i++)
	{

		for(k=0;k<p;k++)
    2e0c:	e0bff817 	ldw	r2,-32(fp)
    2e10:	10800044 	addi	r2,r2,1
    2e14:	e0bff815 	stw	r2,-32(fp)
    2e18:	e0fff817 	ldw	r3,-32(fp)
    2e1c:	e0800317 	ldw	r2,12(fp)
    2e20:	18bfc816 	blt	r3,r2,2d44 <matrix_multiply+0x3c>
void matrix_multiply(float B[3][5], int m, int n, float C[5][3], int p, float (*BCptr)[3][3])
{
	float bc;
	int i, j, k;

	for(i=0;i<m;i++)
    2e24:	e0bffa17 	ldw	r2,-24(fp)
    2e28:	10800044 	addi	r2,r2,1
    2e2c:	e0bffa15 	stw	r2,-24(fp)
    2e30:	e0fffa17 	ldw	r3,-24(fp)
    2e34:	e0bffd17 	ldw	r2,-12(fp)
    2e38:	18bfc016 	blt	r3,r2,2d3c <matrix_multiply+0x34>

			(*BCptr)[i][k]=bc;
		}
	}

}
    2e3c:	e037883a 	mov	sp,fp
    2e40:	dfc00217 	ldw	ra,8(sp)
    2e44:	df000117 	ldw	fp,4(sp)
    2e48:	dc000017 	ldw	r16,0(sp)
    2e4c:	dec00304 	addi	sp,sp,12
    2e50:	f800283a 	ret

00002e54 <float2int>:


/* Converts 3 digit float to int */
int float2int(float r)
{
    2e54:	defffc04 	addi	sp,sp,-16
    2e58:	de00012e 	bgeu	sp,et,2e60 <float2int+0xc>
    2e5c:	003da0fa 	break	3
    2e60:	dfc00315 	stw	ra,12(sp)
    2e64:	df000215 	stw	fp,8(sp)
    2e68:	df000204 	addi	fp,sp,8
    2e6c:	e13fff15 	stw	r4,-4(fp)
	int n=0;
    2e70:	e03ffe15 	stw	zero,-8(fp)

	if(r==0)
    2e74:	e13fff17 	ldw	r4,-4(fp)
    2e78:	000b883a 	mov	r5,zero
    2e7c:	00091c00 	call	91c0 <__eqsf2>
    2e80:	1005003a 	cmpeq	r2,r2,zero
    2e84:	1000011e 	bne	r2,zero,2e8c <float2int+0x38>
    2e88:	00000206 	br	2e94 <float2int+0x40>
	{
		n=0;
    2e8c:	e03ffe15 	stw	zero,-8(fp)
    2e90:	00002f06 	br	2f50 <float2int+0xfc>
	}
	else if(r<0)
    2e94:	e13fff17 	ldw	r4,-4(fp)
    2e98:	000b883a 	mov	r5,zero
    2e9c:	00092b00 	call	92b0 <__ltsf2>
    2ea0:	1004803a 	cmplt	r2,r2,zero
    2ea4:	1000011e 	bne	r2,zero,2eac <float2int+0x58>
    2ea8:	00001206 	br	2ef4 <float2int+0xa0>
	{
		n=(int)(r-0.5);
    2eac:	e13fff17 	ldw	r4,-4(fp)
    2eb0:	00093c00 	call	93c0 <__extendsfdf2>
    2eb4:	100b883a 	mov	r5,r2
    2eb8:	180d883a 	mov	r6,r3
    2ebc:	2809883a 	mov	r4,r5
    2ec0:	300b883a 	mov	r5,r6
    2ec4:	000d883a 	mov	r6,zero
    2ec8:	01cff834 	movhi	r7,16352
    2ecc:	00098240 	call	9824 <__subdf3>
    2ed0:	1009883a 	mov	r4,r2
    2ed4:	180b883a 	mov	r5,r3
    2ed8:	2005883a 	mov	r2,r4
    2edc:	2807883a 	mov	r3,r5
    2ee0:	1009883a 	mov	r4,r2
    2ee4:	180b883a 	mov	r5,r3
    2ee8:	000a24c0 	call	a24c <__fixdfsi>
    2eec:	e0bffe15 	stw	r2,-8(fp)
    2ef0:	00001706 	br	2f50 <float2int+0xfc>
	}
	else if(r>0)
    2ef4:	e13fff17 	ldw	r4,-4(fp)
    2ef8:	000b883a 	mov	r5,zero
    2efc:	00092380 	call	9238 <__gtsf2>
    2f00:	10800048 	cmpgei	r2,r2,1
    2f04:	1000011e 	bne	r2,zero,2f0c <float2int+0xb8>
    2f08:	00001106 	br	2f50 <float2int+0xfc>
	{
		n=(int)(r+0.5);
    2f0c:	e13fff17 	ldw	r4,-4(fp)
    2f10:	00093c00 	call	93c0 <__extendsfdf2>
    2f14:	100b883a 	mov	r5,r2
    2f18:	180d883a 	mov	r6,r3
    2f1c:	2809883a 	mov	r4,r5
    2f20:	300b883a 	mov	r5,r6
    2f24:	000d883a 	mov	r6,zero
    2f28:	01cff834 	movhi	r7,16352
    2f2c:	00098a40 	call	98a4 <__adddf3>
    2f30:	1009883a 	mov	r4,r2
    2f34:	180b883a 	mov	r5,r3
    2f38:	2005883a 	mov	r2,r4
    2f3c:	2807883a 	mov	r3,r5
    2f40:	1009883a 	mov	r4,r2
    2f44:	180b883a 	mov	r5,r3
    2f48:	000a24c0 	call	a24c <__fixdfsi>
    2f4c:	e0bffe15 	stw	r2,-8(fp)

	}

	return n;
    2f50:	e0bffe17 	ldw	r2,-8(fp)
}
    2f54:	e037883a 	mov	sp,fp
    2f58:	dfc00117 	ldw	ra,4(sp)
    2f5c:	df000017 	ldw	fp,0(sp)
    2f60:	dec00204 	addi	sp,sp,8
    2f64:	f800283a 	ret

00002f68 <init_ADC>:

//===============================
// Initialise ADC:
//===============================
void init_ADC(void)
{
    2f68:	defffa04 	addi	sp,sp,-24
    2f6c:	de00012e 	bgeu	sp,et,2f74 <init_ADC+0xc>
    2f70:	003da0fa 	break	3
    2f74:	dfc00515 	stw	ra,20(sp)
    2f78:	df000415 	stw	fp,16(sp)
    2f7c:	df000404 	addi	fp,sp,16
	LCD_Display("ADC     000/100", 2);
    2f80:	01000074 	movhi	r4,1
    2f84:	2139a604 	addi	r4,r4,-6504
    2f88:	01400084 	movi	r5,2
    2f8c:	00002e00 	call	2e0 <LCD_Display>

	*fifo_rst = 0x1;
    2f90:	d0e00417 	ldw	r3,-32752(gp)
    2f94:	00800044 	movi	r2,1
    2f98:	18800015 	stw	r2,0(r3)
	*adc_on = 0x1;
    2f9c:	d0e00717 	ldw	r3,-32740(gp)
    2fa0:	00800044 	movi	r2,1
    2fa4:	18800015 	stw	r2,0(r3)

	char temp1[16] = {"ADC     000/100"};
    2fa8:	00c00074 	movhi	r3,1
    2fac:	18f9a604 	addi	r3,r3,-6504
    2fb0:	18800017 	ldw	r2,0(r3)
    2fb4:	e0bffc15 	stw	r2,-16(fp)
    2fb8:	18800117 	ldw	r2,4(r3)
    2fbc:	e0bffd15 	stw	r2,-12(fp)
    2fc0:	18800217 	ldw	r2,8(r3)
    2fc4:	e0bffe15 	stw	r2,-8(fp)
    2fc8:	18800317 	ldw	r2,12(r3)
    2fcc:	e0bfff15 	stw	r2,-4(fp)
	for (i = 0; i < 100; i++) {
    2fd0:	d026d215 	stw	zero,-25784(gp)
    2fd4:	00002006 	br	3058 <init_ADC+0xf0>
		temp1[8]  = (((i+1)/100)%10) 	+ 0x30;
    2fd8:	d0a6d217 	ldw	r2,-25784(gp)
    2fdc:	11000044 	addi	r4,r2,1
    2fe0:	01401904 	movi	r5,100
    2fe4:	000a5e00 	call	a5e0 <__divsi3>
    2fe8:	1009883a 	mov	r4,r2
    2fec:	01400284 	movi	r5,10
    2ff0:	000a6400 	call	a640 <__modsi3>
    2ff4:	10800c04 	addi	r2,r2,48
    2ff8:	e0bffe05 	stb	r2,-8(fp)
		temp1[9] = (((i+1)/10)%10) 		+ 0x30;
    2ffc:	d0a6d217 	ldw	r2,-25784(gp)
    3000:	11000044 	addi	r4,r2,1
    3004:	01400284 	movi	r5,10
    3008:	000a5e00 	call	a5e0 <__divsi3>
    300c:	1009883a 	mov	r4,r2
    3010:	01400284 	movi	r5,10
    3014:	000a6400 	call	a640 <__modsi3>
    3018:	10800c04 	addi	r2,r2,48
    301c:	e0bffe45 	stb	r2,-7(fp)
		temp1[10] = ((i+1)%10) 			+ 0x30;
    3020:	d0a6d217 	ldw	r2,-25784(gp)
    3024:	11000044 	addi	r4,r2,1
    3028:	01400284 	movi	r5,10
    302c:	000a6400 	call	a640 <__modsi3>
    3030:	10800c04 	addi	r2,r2,48
    3034:	e0bffe85 	stb	r2,-6(fp)
		LCD_Display(temp1, 2);
    3038:	e13ffc04 	addi	r4,fp,-16
    303c:	01400084 	movi	r5,2
    3040:	00002e00 	call	2e0 <LCD_Display>

		usleep(50);
    3044:	01000c84 	movi	r4,50
    3048:	000b2100 	call	b210 <usleep>

	*fifo_rst = 0x1;
	*adc_on = 0x1;

	char temp1[16] = {"ADC     000/100"};
	for (i = 0; i < 100; i++) {
    304c:	d0a6d217 	ldw	r2,-25784(gp)
    3050:	10800044 	addi	r2,r2,1
    3054:	d0a6d215 	stw	r2,-25784(gp)
    3058:	d0a6d217 	ldw	r2,-25784(gp)
    305c:	10801910 	cmplti	r2,r2,100
    3060:	103fdd1e 	bne	r2,zero,2fd8 <init_ADC+0x70>
		LCD_Display(temp1, 2);

		usleep(50);
	}

	*adc_on = 0x0;
    3064:	d0a00717 	ldw	r2,-32740(gp)
    3068:	10000015 	stw	zero,0(r2)
	*fifo_rst = 0x0;
    306c:	d0a00417 	ldw	r2,-32752(gp)
    3070:	10000015 	stw	zero,0(r2)
}
    3074:	e037883a 	mov	sp,fp
    3078:	dfc00117 	ldw	ra,4(sp)
    307c:	df000017 	ldw	fp,0(sp)
    3080:	dec00204 	addi	sp,sp,8
    3084:	f800283a 	ret

00003088 <init_FIR>:

//===============================
// Initialise FIR Filter:
//===============================
void init_FIR(void)
{
    3088:	defffa04 	addi	sp,sp,-24
    308c:	de00012e 	bgeu	sp,et,3094 <init_FIR+0xc>
    3090:	003da0fa 	break	3
    3094:	dfc00515 	stw	ra,20(sp)
    3098:	df000415 	stw	fp,16(sp)
    309c:	df000404 	addi	fp,sp,16
	LCD_Display("FIR     000/256", 2);
    30a0:	01000074 	movhi	r4,1
    30a4:	2139aa04 	addi	r4,r4,-6488
    30a8:	01400084 	movi	r5,2
    30ac:	00002e00 	call	2e0 <LCD_Display>

	char temp2[16] = {"FIR     000/256"};
    30b0:	00c00074 	movhi	r3,1
    30b4:	18f9aa04 	addi	r3,r3,-6488
    30b8:	18800017 	ldw	r2,0(r3)
    30bc:	e0bffc15 	stw	r2,-16(fp)
    30c0:	18800117 	ldw	r2,4(r3)
    30c4:	e0bffd15 	stw	r2,-12(fp)
    30c8:	18800217 	ldw	r2,8(r3)
    30cc:	e0bffe15 	stw	r2,-8(fp)
    30d0:	18800317 	ldw	r2,12(r3)
    30d4:	e0bfff15 	stw	r2,-4(fp)
	for (i = 0; i < 256; i++) {
    30d8:	d026d215 	stw	zero,-25784(gp)
    30dc:	00002706 	br	317c <init_FIR+0xf4>
		*data 		= 0x0000;
    30e0:	d0a00217 	ldw	r2,-32760(gp)
    30e4:	10000015 	stw	zero,0(r2)
		*data_valid = 0x1;
    30e8:	d0e00317 	ldw	r3,-32756(gp)
    30ec:	00800044 	movi	r2,1
    30f0:	18800015 	stw	r2,0(r3)
		*data_valid = 0x0;
    30f4:	d0a00317 	ldw	r2,-32756(gp)
    30f8:	10000015 	stw	zero,0(r2)

		temp2[8] = (((i+1)/100)%10) 	+ 0x30;
    30fc:	d0a6d217 	ldw	r2,-25784(gp)
    3100:	11000044 	addi	r4,r2,1
    3104:	01401904 	movi	r5,100
    3108:	000a5e00 	call	a5e0 <__divsi3>
    310c:	1009883a 	mov	r4,r2
    3110:	01400284 	movi	r5,10
    3114:	000a6400 	call	a640 <__modsi3>
    3118:	10800c04 	addi	r2,r2,48
    311c:	e0bffe05 	stb	r2,-8(fp)
		temp2[9] = (((i+1)/10)%10) 		+ 0x30;
    3120:	d0a6d217 	ldw	r2,-25784(gp)
    3124:	11000044 	addi	r4,r2,1
    3128:	01400284 	movi	r5,10
    312c:	000a5e00 	call	a5e0 <__divsi3>
    3130:	1009883a 	mov	r4,r2
    3134:	01400284 	movi	r5,10
    3138:	000a6400 	call	a640 <__modsi3>
    313c:	10800c04 	addi	r2,r2,48
    3140:	e0bffe45 	stb	r2,-7(fp)
		temp2[10]=  ((i+1)%10) 			+ 0x30;
    3144:	d0a6d217 	ldw	r2,-25784(gp)
    3148:	11000044 	addi	r4,r2,1
    314c:	01400284 	movi	r5,10
    3150:	000a6400 	call	a640 <__modsi3>
    3154:	10800c04 	addi	r2,r2,48
    3158:	e0bffe85 	stb	r2,-6(fp)
		LCD_Display(temp2, 2);
    315c:	e13ffc04 	addi	r4,fp,-16
    3160:	01400084 	movi	r5,2
    3164:	00002e00 	call	2e0 <LCD_Display>

		usleep(50);
    3168:	01000c84 	movi	r4,50
    316c:	000b2100 	call	b210 <usleep>
void init_FIR(void)
{
	LCD_Display("FIR     000/256", 2);

	char temp2[16] = {"FIR     000/256"};
	for (i = 0; i < 256; i++) {
    3170:	d0a6d217 	ldw	r2,-25784(gp)
    3174:	10800044 	addi	r2,r2,1
    3178:	d0a6d215 	stw	r2,-25784(gp)
    317c:	d0a6d217 	ldw	r2,-25784(gp)
    3180:	10804010 	cmplti	r2,r2,256
    3184:	103fd61e 	bne	r2,zero,30e0 <init_FIR+0x58>
		temp2[10]=  ((i+1)%10) 			+ 0x30;
		LCD_Display(temp2, 2);

		usleep(50);
	}
}
    3188:	e037883a 	mov	sp,fp
    318c:	dfc00117 	ldw	ra,4(sp)
    3190:	df000017 	ldw	fp,0(sp)
    3194:	dec00204 	addi	sp,sp,8
    3198:	f800283a 	ret

0000319c <init_FIFO>:

//===============================
// Initialise FIFOs:
//===============================
void init_FIFO(void)
{
    319c:	defffa04 	addi	sp,sp,-24
    31a0:	de00012e 	bgeu	sp,et,31a8 <init_FIFO+0xc>
    31a4:	003da0fa 	break	3
    31a8:	dfc00515 	stw	ra,20(sp)
    31ac:	df000415 	stw	fp,16(sp)
    31b0:	df000404 	addi	fp,sp,16
	LCD_Display("FIFOs   000/100", 2);
    31b4:	01000074 	movhi	r4,1
    31b8:	2139ae04 	addi	r4,r4,-6472
    31bc:	01400084 	movi	r5,2
    31c0:	00002e00 	call	2e0 <LCD_Display>

	*fifo_rst = 0x1;
    31c4:	d0e00417 	ldw	r3,-32752(gp)
    31c8:	00800044 	movi	r2,1
    31cc:	18800015 	stw	r2,0(r3)
	usleep(100);
    31d0:	01001904 	movi	r4,100
    31d4:	000b2100 	call	b210 <usleep>
	*fifo_rst = 0x0;
    31d8:	d0a00417 	ldw	r2,-32752(gp)
    31dc:	10000015 	stw	zero,0(r2)

	char temp3[16] = {"FIFOs   000/100"};
    31e0:	00c00074 	movhi	r3,1
    31e4:	18f9ae04 	addi	r3,r3,-6472
    31e8:	18800017 	ldw	r2,0(r3)
    31ec:	e0bffc15 	stw	r2,-16(fp)
    31f0:	18800117 	ldw	r2,4(r3)
    31f4:	e0bffd15 	stw	r2,-12(fp)
    31f8:	18800217 	ldw	r2,8(r3)
    31fc:	e0bffe15 	stw	r2,-8(fp)
    3200:	18800317 	ldw	r2,12(r3)
    3204:	e0bfff15 	stw	r2,-4(fp)
	for (i = 0; i < 100; i++) {
    3208:	d026d215 	stw	zero,-25784(gp)
    320c:	00002706 	br	32ac <init_FIFO+0x110>
		*data 		= 0x0000;
    3210:	d0a00217 	ldw	r2,-32760(gp)
    3214:	10000015 	stw	zero,0(r2)
		*data_valid = 0x1;
    3218:	d0e00317 	ldw	r3,-32756(gp)
    321c:	00800044 	movi	r2,1
    3220:	18800015 	stw	r2,0(r3)
		*data_valid = 0x0;
    3224:	d0a00317 	ldw	r2,-32756(gp)
    3228:	10000015 	stw	zero,0(r2)

		temp3[8] = (((i+1)/100)%10) 	+ 0x30;
    322c:	d0a6d217 	ldw	r2,-25784(gp)
    3230:	11000044 	addi	r4,r2,1
    3234:	01401904 	movi	r5,100
    3238:	000a5e00 	call	a5e0 <__divsi3>
    323c:	1009883a 	mov	r4,r2
    3240:	01400284 	movi	r5,10
    3244:	000a6400 	call	a640 <__modsi3>
    3248:	10800c04 	addi	r2,r2,48
    324c:	e0bffe05 	stb	r2,-8(fp)
		temp3[9] = (((i+1)/10)%10) 		+ 0x30;
    3250:	d0a6d217 	ldw	r2,-25784(gp)
    3254:	11000044 	addi	r4,r2,1
    3258:	01400284 	movi	r5,10
    325c:	000a5e00 	call	a5e0 <__divsi3>
    3260:	1009883a 	mov	r4,r2
    3264:	01400284 	movi	r5,10
    3268:	000a6400 	call	a640 <__modsi3>
    326c:	10800c04 	addi	r2,r2,48
    3270:	e0bffe45 	stb	r2,-7(fp)
		temp3[10]=  ((i+1)%10) 			+ 0x30;
    3274:	d0a6d217 	ldw	r2,-25784(gp)
    3278:	11000044 	addi	r4,r2,1
    327c:	01400284 	movi	r5,10
    3280:	000a6400 	call	a640 <__modsi3>
    3284:	10800c04 	addi	r2,r2,48
    3288:	e0bffe85 	stb	r2,-6(fp)
		LCD_Display(temp3, 2);
    328c:	e13ffc04 	addi	r4,fp,-16
    3290:	01400084 	movi	r5,2
    3294:	00002e00 	call	2e0 <LCD_Display>

		usleep(50);
    3298:	01000c84 	movi	r4,50
    329c:	000b2100 	call	b210 <usleep>
	*fifo_rst = 0x1;
	usleep(100);
	*fifo_rst = 0x0;

	char temp3[16] = {"FIFOs   000/100"};
	for (i = 0; i < 100; i++) {
    32a0:	d0a6d217 	ldw	r2,-25784(gp)
    32a4:	10800044 	addi	r2,r2,1
    32a8:	d0a6d215 	stw	r2,-25784(gp)
    32ac:	d0a6d217 	ldw	r2,-25784(gp)
    32b0:	10801910 	cmplti	r2,r2,100
    32b4:	103fd61e 	bne	r2,zero,3210 <init_FIFO+0x74>
		temp3[10]=  ((i+1)%10) 			+ 0x30;
		LCD_Display(temp3, 2);

		usleep(50);
	}
}
    32b8:	e037883a 	mov	sp,fp
    32bc:	dfc00117 	ldw	ra,4(sp)
    32c0:	df000017 	ldw	fp,0(sp)
    32c4:	dec00204 	addi	sp,sp,8
    32c8:	f800283a 	ret

000032cc <init_TIMER>:

//===============================
// Initialise Timers:
//===============================
void init_TIMER(void)
{
    32cc:	defffe04 	addi	sp,sp,-8
    32d0:	de00012e 	bgeu	sp,et,32d8 <init_TIMER+0xc>
    32d4:	003da0fa 	break	3
    32d8:	dfc00115 	stw	ra,4(sp)
    32dc:	df000015 	stw	fp,0(sp)
    32e0:	d839883a 	mov	fp,sp
	*CH0_timer_rst = 0x1;
    32e4:	d0e00817 	ldw	r3,-32736(gp)
    32e8:	00800044 	movi	r2,1
    32ec:	18800015 	stw	r2,0(r3)
	usleep(0.1 seconds);
    32f0:	010000b4 	movhi	r4,2
    32f4:	2121a804 	addi	r4,r4,-31072
    32f8:	000b2100 	call	b210 <usleep>
	*CH0_timer_rst = 0x0;
    32fc:	d0a00817 	ldw	r2,-32736(gp)
    3300:	10000015 	stw	zero,0(r2)

	*CH1_timer_rst = 0x1;
    3304:	d0e01917 	ldw	r3,-32668(gp)
    3308:	00800044 	movi	r2,1
    330c:	18800015 	stw	r2,0(r3)
	usleep(0.1 seconds);
    3310:	010000b4 	movhi	r4,2
    3314:	2121a804 	addi	r4,r4,-31072
    3318:	000b2100 	call	b210 <usleep>
	*CH1_timer_rst = 0x0;
    331c:	d0a01917 	ldw	r2,-32668(gp)
    3320:	10000015 	stw	zero,0(r2)

	*CH2_timer_rst = 0x1;
    3324:	d0e02a17 	ldw	r3,-32600(gp)
    3328:	00800044 	movi	r2,1
    332c:	18800015 	stw	r2,0(r3)
	usleep(0.1 seconds);
    3330:	010000b4 	movhi	r4,2
    3334:	2121a804 	addi	r4,r4,-31072
    3338:	000b2100 	call	b210 <usleep>
	*CH2_timer_rst = 0x0;
    333c:	d0a02a17 	ldw	r2,-32600(gp)
    3340:	10000015 	stw	zero,0(r2)

	*CH3_timer_rst = 0x1;
    3344:	d0e03b17 	ldw	r3,-32532(gp)
    3348:	00800044 	movi	r2,1
    334c:	18800015 	stw	r2,0(r3)
	usleep(0.1 seconds);
    3350:	010000b4 	movhi	r4,2
    3354:	2121a804 	addi	r4,r4,-31072
    3358:	000b2100 	call	b210 <usleep>
	*CH3_timer_rst = 0x0;
    335c:	d0a03b17 	ldw	r2,-32532(gp)
    3360:	10000015 	stw	zero,0(r2)

	*CH4_timer_rst = 0x1;
    3364:	d0e04c17 	ldw	r3,-32464(gp)
    3368:	00800044 	movi	r2,1
    336c:	18800015 	stw	r2,0(r3)
	usleep(0.1 seconds);
    3370:	010000b4 	movhi	r4,2
    3374:	2121a804 	addi	r4,r4,-31072
    3378:	000b2100 	call	b210 <usleep>
	*CH4_timer_rst = 0x0;
    337c:	d0a04c17 	ldw	r2,-32464(gp)
    3380:	10000015 	stw	zero,0(r2)
}
    3384:	e037883a 	mov	sp,fp
    3388:	dfc00117 	ldw	ra,4(sp)
    338c:	df000017 	ldw	fp,0(sp)
    3390:	dec00204 	addi	sp,sp,8
    3394:	f800283a 	ret

00003398 <init_DETECTOR>:

//===============================
// Initialise Detection Thresholds:
//===============================
void init_DETECTOR(void)
{
    3398:	defffe04 	addi	sp,sp,-8
    339c:	de00012e 	bgeu	sp,et,33a4 <init_DETECTOR+0xc>
    33a0:	003da0fa 	break	3
    33a4:	dfc00115 	stw	ra,4(sp)
    33a8:	df000015 	stw	fp,0(sp)
    33ac:	d839883a 	mov	fp,sp
	thresholdMultiplier = threshold * sumHsq_CH0 / 100;
    33b0:	d0a05d03 	ldbu	r2,-32396(gp)
    33b4:	11003fcc 	andi	r4,r2,255
    33b8:	2100201c 	xori	r4,r4,128
    33bc:	213fe004 	addi	r4,r4,-128
    33c0:	d1605e17 	ldw	r5,-32392(gp)
    33c4:	000a6b00 	call	a6b0 <__mulsi3>
    33c8:	1009883a 	mov	r4,r2
    33cc:	01401904 	movi	r5,100
    33d0:	000a5e00 	call	a5e0 <__divsi3>
    33d4:	1009883a 	mov	r4,r2
    33d8:	200bd7fa 	srai	r5,r4,31
    33dc:	2005883a 	mov	r2,r4
    33e0:	2807883a 	mov	r3,r5
    33e4:	d0a6d015 	stw	r2,-25792(gp)
    33e8:	01000074 	movhi	r4,1
    33ec:	2107de04 	addi	r4,r4,8056
    33f0:	20c00015 	stw	r3,0(r4)
	thresholdMultiplier = thresholdMultiplier * threshold / 100;
    33f4:	d0a05d03 	ldbu	r2,-32396(gp)
    33f8:	10803fcc 	andi	r2,r2,255
    33fc:	1080201c 	xori	r2,r2,128
    3400:	10bfe004 	addi	r2,r2,-128
    3404:	1007d7fa 	srai	r3,r2,31
    3408:	100b883a 	mov	r5,r2
    340c:	180d883a 	mov	r6,r3
    3410:	d0a6d017 	ldw	r2,-25792(gp)
    3414:	01000074 	movhi	r4,1
    3418:	2107de04 	addi	r4,r4,8056
    341c:	20c00017 	ldw	r3,0(r4)
    3420:	2809883a 	mov	r4,r5
    3424:	300b883a 	mov	r5,r6
    3428:	100d883a 	mov	r6,r2
    342c:	180f883a 	mov	r7,r3
    3430:	00079b40 	call	79b4 <__muldi3>
    3434:	1009883a 	mov	r4,r2
    3438:	180b883a 	mov	r5,r3
    343c:	2005883a 	mov	r2,r4
    3440:	2807883a 	mov	r3,r5
    3444:	1009883a 	mov	r4,r2
    3448:	180b883a 	mov	r5,r3
    344c:	01801904 	movi	r6,100
    3450:	000f883a 	mov	r7,zero
    3454:	0007e300 	call	7e30 <__divdi3>
    3458:	1009883a 	mov	r4,r2
    345c:	180b883a 	mov	r5,r3
    3460:	2005883a 	mov	r2,r4
    3464:	2807883a 	mov	r3,r5
    3468:	d0a6d015 	stw	r2,-25792(gp)
    346c:	01000074 	movhi	r4,1
    3470:	2107de04 	addi	r4,r4,8056
    3474:	20c00015 	stw	r3,0(r4)
	*CH0_threshold	= thresholdMultiplier;
    3478:	d1600917 	ldw	r5,-32732(gp)
    347c:	d0a6d017 	ldw	r2,-25792(gp)
    3480:	01000074 	movhi	r4,1
    3484:	2107de04 	addi	r4,r4,8056
    3488:	20c00017 	ldw	r3,0(r4)
    348c:	28800015 	stw	r2,0(r5)

	thresholdMultiplier = threshold * sumHsq_CH1 / 100;
    3490:	d0a05d03 	ldbu	r2,-32396(gp)
    3494:	11003fcc 	andi	r4,r2,255
    3498:	2100201c 	xori	r4,r4,128
    349c:	213fe004 	addi	r4,r4,-128
    34a0:	d1605f17 	ldw	r5,-32388(gp)
    34a4:	000a6b00 	call	a6b0 <__mulsi3>
    34a8:	1009883a 	mov	r4,r2
    34ac:	01401904 	movi	r5,100
    34b0:	000a5e00 	call	a5e0 <__divsi3>
    34b4:	1009883a 	mov	r4,r2
    34b8:	200bd7fa 	srai	r5,r4,31
    34bc:	2005883a 	mov	r2,r4
    34c0:	2807883a 	mov	r3,r5
    34c4:	d0a6d015 	stw	r2,-25792(gp)
    34c8:	01000074 	movhi	r4,1
    34cc:	2107de04 	addi	r4,r4,8056
    34d0:	20c00015 	stw	r3,0(r4)
	thresholdMultiplier = thresholdMultiplier * threshold / 100;
    34d4:	d0a05d03 	ldbu	r2,-32396(gp)
    34d8:	10803fcc 	andi	r2,r2,255
    34dc:	1080201c 	xori	r2,r2,128
    34e0:	10bfe004 	addi	r2,r2,-128
    34e4:	1007d7fa 	srai	r3,r2,31
    34e8:	100b883a 	mov	r5,r2
    34ec:	180d883a 	mov	r6,r3
    34f0:	d0a6d017 	ldw	r2,-25792(gp)
    34f4:	01000074 	movhi	r4,1
    34f8:	2107de04 	addi	r4,r4,8056
    34fc:	20c00017 	ldw	r3,0(r4)
    3500:	2809883a 	mov	r4,r5
    3504:	300b883a 	mov	r5,r6
    3508:	100d883a 	mov	r6,r2
    350c:	180f883a 	mov	r7,r3
    3510:	00079b40 	call	79b4 <__muldi3>
    3514:	1009883a 	mov	r4,r2
    3518:	180b883a 	mov	r5,r3
    351c:	2005883a 	mov	r2,r4
    3520:	2807883a 	mov	r3,r5
    3524:	1009883a 	mov	r4,r2
    3528:	180b883a 	mov	r5,r3
    352c:	01801904 	movi	r6,100
    3530:	000f883a 	mov	r7,zero
    3534:	0007e300 	call	7e30 <__divdi3>
    3538:	1009883a 	mov	r4,r2
    353c:	180b883a 	mov	r5,r3
    3540:	2005883a 	mov	r2,r4
    3544:	2807883a 	mov	r3,r5
    3548:	d0a6d015 	stw	r2,-25792(gp)
    354c:	01000074 	movhi	r4,1
    3550:	2107de04 	addi	r4,r4,8056
    3554:	20c00015 	stw	r3,0(r4)
	*CH1_threshold	= thresholdMultiplier;
    3558:	d1601a17 	ldw	r5,-32664(gp)
    355c:	d0a6d017 	ldw	r2,-25792(gp)
    3560:	01000074 	movhi	r4,1
    3564:	2107de04 	addi	r4,r4,8056
    3568:	20c00017 	ldw	r3,0(r4)
    356c:	28800015 	stw	r2,0(r5)

	thresholdMultiplier = threshold * sumHsq_CH2 / 100;
    3570:	d0a05d03 	ldbu	r2,-32396(gp)
    3574:	11003fcc 	andi	r4,r2,255
    3578:	2100201c 	xori	r4,r4,128
    357c:	213fe004 	addi	r4,r4,-128
    3580:	d1606017 	ldw	r5,-32384(gp)
    3584:	000a6b00 	call	a6b0 <__mulsi3>
    3588:	1009883a 	mov	r4,r2
    358c:	01401904 	movi	r5,100
    3590:	000a5e00 	call	a5e0 <__divsi3>
    3594:	1009883a 	mov	r4,r2
    3598:	200bd7fa 	srai	r5,r4,31
    359c:	2005883a 	mov	r2,r4
    35a0:	2807883a 	mov	r3,r5
    35a4:	d0a6d015 	stw	r2,-25792(gp)
    35a8:	01000074 	movhi	r4,1
    35ac:	2107de04 	addi	r4,r4,8056
    35b0:	20c00015 	stw	r3,0(r4)
	thresholdMultiplier = thresholdMultiplier * threshold / 100;
    35b4:	d0a05d03 	ldbu	r2,-32396(gp)
    35b8:	10803fcc 	andi	r2,r2,255
    35bc:	1080201c 	xori	r2,r2,128
    35c0:	10bfe004 	addi	r2,r2,-128
    35c4:	1007d7fa 	srai	r3,r2,31
    35c8:	100b883a 	mov	r5,r2
    35cc:	180d883a 	mov	r6,r3
    35d0:	d0a6d017 	ldw	r2,-25792(gp)
    35d4:	01000074 	movhi	r4,1
    35d8:	2107de04 	addi	r4,r4,8056
    35dc:	20c00017 	ldw	r3,0(r4)
    35e0:	2809883a 	mov	r4,r5
    35e4:	300b883a 	mov	r5,r6
    35e8:	100d883a 	mov	r6,r2
    35ec:	180f883a 	mov	r7,r3
    35f0:	00079b40 	call	79b4 <__muldi3>
    35f4:	1009883a 	mov	r4,r2
    35f8:	180b883a 	mov	r5,r3
    35fc:	2005883a 	mov	r2,r4
    3600:	2807883a 	mov	r3,r5
    3604:	1009883a 	mov	r4,r2
    3608:	180b883a 	mov	r5,r3
    360c:	01801904 	movi	r6,100
    3610:	000f883a 	mov	r7,zero
    3614:	0007e300 	call	7e30 <__divdi3>
    3618:	1009883a 	mov	r4,r2
    361c:	180b883a 	mov	r5,r3
    3620:	2005883a 	mov	r2,r4
    3624:	2807883a 	mov	r3,r5
    3628:	d0a6d015 	stw	r2,-25792(gp)
    362c:	01000074 	movhi	r4,1
    3630:	2107de04 	addi	r4,r4,8056
    3634:	20c00015 	stw	r3,0(r4)
	*CH2_threshold	= thresholdMultiplier;
    3638:	d1602b17 	ldw	r5,-32596(gp)
    363c:	d0a6d017 	ldw	r2,-25792(gp)
    3640:	01000074 	movhi	r4,1
    3644:	2107de04 	addi	r4,r4,8056
    3648:	20c00017 	ldw	r3,0(r4)
    364c:	28800015 	stw	r2,0(r5)

	thresholdMultiplier = threshold * sumHsq_CH3 / 100;
    3650:	d0a05d03 	ldbu	r2,-32396(gp)
    3654:	11003fcc 	andi	r4,r2,255
    3658:	2100201c 	xori	r4,r4,128
    365c:	213fe004 	addi	r4,r4,-128
    3660:	d1606117 	ldw	r5,-32380(gp)
    3664:	000a6b00 	call	a6b0 <__mulsi3>
    3668:	1009883a 	mov	r4,r2
    366c:	01401904 	movi	r5,100
    3670:	000a5e00 	call	a5e0 <__divsi3>
    3674:	1009883a 	mov	r4,r2
    3678:	200bd7fa 	srai	r5,r4,31
    367c:	2005883a 	mov	r2,r4
    3680:	2807883a 	mov	r3,r5
    3684:	d0a6d015 	stw	r2,-25792(gp)
    3688:	01000074 	movhi	r4,1
    368c:	2107de04 	addi	r4,r4,8056
    3690:	20c00015 	stw	r3,0(r4)
	thresholdMultiplier = thresholdMultiplier * threshold / 100;
    3694:	d0a05d03 	ldbu	r2,-32396(gp)
    3698:	10803fcc 	andi	r2,r2,255
    369c:	1080201c 	xori	r2,r2,128
    36a0:	10bfe004 	addi	r2,r2,-128
    36a4:	1007d7fa 	srai	r3,r2,31
    36a8:	100b883a 	mov	r5,r2
    36ac:	180d883a 	mov	r6,r3
    36b0:	d0a6d017 	ldw	r2,-25792(gp)
    36b4:	01000074 	movhi	r4,1
    36b8:	2107de04 	addi	r4,r4,8056
    36bc:	20c00017 	ldw	r3,0(r4)
    36c0:	2809883a 	mov	r4,r5
    36c4:	300b883a 	mov	r5,r6
    36c8:	100d883a 	mov	r6,r2
    36cc:	180f883a 	mov	r7,r3
    36d0:	00079b40 	call	79b4 <__muldi3>
    36d4:	1009883a 	mov	r4,r2
    36d8:	180b883a 	mov	r5,r3
    36dc:	2005883a 	mov	r2,r4
    36e0:	2807883a 	mov	r3,r5
    36e4:	1009883a 	mov	r4,r2
    36e8:	180b883a 	mov	r5,r3
    36ec:	01801904 	movi	r6,100
    36f0:	000f883a 	mov	r7,zero
    36f4:	0007e300 	call	7e30 <__divdi3>
    36f8:	1009883a 	mov	r4,r2
    36fc:	180b883a 	mov	r5,r3
    3700:	2005883a 	mov	r2,r4
    3704:	2807883a 	mov	r3,r5
    3708:	d0a6d015 	stw	r2,-25792(gp)
    370c:	01000074 	movhi	r4,1
    3710:	2107de04 	addi	r4,r4,8056
    3714:	20c00015 	stw	r3,0(r4)
	*CH3_threshold	= thresholdMultiplier;
    3718:	d1603c17 	ldw	r5,-32528(gp)
    371c:	d0a6d017 	ldw	r2,-25792(gp)
    3720:	01000074 	movhi	r4,1
    3724:	2107de04 	addi	r4,r4,8056
    3728:	20c00017 	ldw	r3,0(r4)
    372c:	28800015 	stw	r2,0(r5)

	thresholdMultiplier = threshold * sumHsq_CH4 / 100;
    3730:	d0a05d03 	ldbu	r2,-32396(gp)
    3734:	11003fcc 	andi	r4,r2,255
    3738:	2100201c 	xori	r4,r4,128
    373c:	213fe004 	addi	r4,r4,-128
    3740:	d1606217 	ldw	r5,-32376(gp)
    3744:	000a6b00 	call	a6b0 <__mulsi3>
    3748:	1009883a 	mov	r4,r2
    374c:	01401904 	movi	r5,100
    3750:	000a5e00 	call	a5e0 <__divsi3>
    3754:	1009883a 	mov	r4,r2
    3758:	200bd7fa 	srai	r5,r4,31
    375c:	2005883a 	mov	r2,r4
    3760:	2807883a 	mov	r3,r5
    3764:	d0a6d015 	stw	r2,-25792(gp)
    3768:	01000074 	movhi	r4,1
    376c:	2107de04 	addi	r4,r4,8056
    3770:	20c00015 	stw	r3,0(r4)
	thresholdMultiplier = thresholdMultiplier * threshold / 100;
    3774:	d0a05d03 	ldbu	r2,-32396(gp)
    3778:	10803fcc 	andi	r2,r2,255
    377c:	1080201c 	xori	r2,r2,128
    3780:	10bfe004 	addi	r2,r2,-128
    3784:	1007d7fa 	srai	r3,r2,31
    3788:	100b883a 	mov	r5,r2
    378c:	180d883a 	mov	r6,r3
    3790:	d0a6d017 	ldw	r2,-25792(gp)
    3794:	01000074 	movhi	r4,1
    3798:	2107de04 	addi	r4,r4,8056
    379c:	20c00017 	ldw	r3,0(r4)
    37a0:	2809883a 	mov	r4,r5
    37a4:	300b883a 	mov	r5,r6
    37a8:	100d883a 	mov	r6,r2
    37ac:	180f883a 	mov	r7,r3
    37b0:	00079b40 	call	79b4 <__muldi3>
    37b4:	1009883a 	mov	r4,r2
    37b8:	180b883a 	mov	r5,r3
    37bc:	2005883a 	mov	r2,r4
    37c0:	2807883a 	mov	r3,r5
    37c4:	1009883a 	mov	r4,r2
    37c8:	180b883a 	mov	r5,r3
    37cc:	01801904 	movi	r6,100
    37d0:	000f883a 	mov	r7,zero
    37d4:	0007e300 	call	7e30 <__divdi3>
    37d8:	1009883a 	mov	r4,r2
    37dc:	180b883a 	mov	r5,r3
    37e0:	2005883a 	mov	r2,r4
    37e4:	2807883a 	mov	r3,r5
    37e8:	d0a6d015 	stw	r2,-25792(gp)
    37ec:	01000074 	movhi	r4,1
    37f0:	2107de04 	addi	r4,r4,8056
    37f4:	20c00015 	stw	r3,0(r4)
	*CH4_threshold	= thresholdMultiplier;
    37f8:	d1604d17 	ldw	r5,-32460(gp)
    37fc:	d0a6d017 	ldw	r2,-25792(gp)
    3800:	01000074 	movhi	r4,1
    3804:	2107de04 	addi	r4,r4,8056
    3808:	20c00017 	ldw	r3,0(r4)
    380c:	28800015 	stw	r2,0(r5)
}
    3810:	e037883a 	mov	sp,fp
    3814:	dfc00117 	ldw	ra,4(sp)
    3818:	df000017 	ldw	fp,0(sp)
    381c:	dec00204 	addi	sp,sp,8
    3820:	f800283a 	ret

00003824 <init_SYSTEM>:

//===============================
// MAIN INITIALISE SEQUENCE:
//===============================
void init_SYSTEM(void)
{
    3824:	defffe04 	addi	sp,sp,-8
    3828:	de00012e 	bgeu	sp,et,3830 <init_SYSTEM+0xc>
    382c:	003da0fa 	break	3
    3830:	dfc00115 	stw	ra,4(sp)
    3834:	df000015 	stw	fp,0(sp)
    3838:	d839883a 	mov	fp,sp
	// Set ADC, ADC FIFO & FIR OFF:
		*fifo_rst 		= 0x0;
    383c:	d0a00417 	ldw	r2,-32752(gp)
    3840:	10000015 	stw	zero,0(r2)
		*data_valid 	= 0x0;
    3844:	d0a00317 	ldw	r2,-32756(gp)
    3848:	10000015 	stw	zero,0(r2)
		*adc_on 		= 0x0;
    384c:	d0a00717 	ldw	r2,-32740(gp)
    3850:	10000015 	stw	zero,0(r2)
		*sub_on			= 0x0;
    3854:	d0a00517 	ldw	r2,-32748(gp)
    3858:	10000015 	stw	zero,0(r2)
		*det_on  		= 0x0;
    385c:	d0a00617 	ldw	r2,-32744(gp)
    3860:	10000015 	stw	zero,0(r2)

		*CH0_threshold 	= 0xFFFFFFFF;
    3864:	d0e00917 	ldw	r3,-32732(gp)
    3868:	00bfffc4 	movi	r2,-1
    386c:	18800015 	stw	r2,0(r3)
		*CH0_RD			= 0x0;
    3870:	d0a00b17 	ldw	r2,-32724(gp)
    3874:	10000015 	stw	zero,0(r2)
		*CH0_timer_rst 	= 0x1;
    3878:	d0e00817 	ldw	r3,-32736(gp)
    387c:	00800044 	movi	r2,1
    3880:	18800015 	stw	r2,0(r3)

		*CH1_threshold 	= 0xFFFFFFFF;
    3884:	d0e01a17 	ldw	r3,-32664(gp)
    3888:	00bfffc4 	movi	r2,-1
    388c:	18800015 	stw	r2,0(r3)
		*CH1_RD			= 0x0;
    3890:	d0a01c17 	ldw	r2,-32656(gp)
    3894:	10000015 	stw	zero,0(r2)
		*CH1_timer_rst 	= 0x1;
    3898:	d0e01917 	ldw	r3,-32668(gp)
    389c:	00800044 	movi	r2,1
    38a0:	18800015 	stw	r2,0(r3)

		*CH2_threshold 	= 0xFFFFFFFF;
    38a4:	d0e02b17 	ldw	r3,-32596(gp)
    38a8:	00bfffc4 	movi	r2,-1
    38ac:	18800015 	stw	r2,0(r3)
		*CH2_RD			= 0x0;
    38b0:	d0a02d17 	ldw	r2,-32588(gp)
    38b4:	10000015 	stw	zero,0(r2)
		*CH2_timer_rst 	= 0x1;
    38b8:	d0e02a17 	ldw	r3,-32600(gp)
    38bc:	00800044 	movi	r2,1
    38c0:	18800015 	stw	r2,0(r3)

		*CH3_threshold 	= 0xFFFFFFFF;
    38c4:	d0e03c17 	ldw	r3,-32528(gp)
    38c8:	00bfffc4 	movi	r2,-1
    38cc:	18800015 	stw	r2,0(r3)
		*CH3_RD			= 0x0;
    38d0:	d0a03e17 	ldw	r2,-32520(gp)
    38d4:	10000015 	stw	zero,0(r2)
		*CH3_timer_rst 	= 0x1;
    38d8:	d0e03b17 	ldw	r3,-32532(gp)
    38dc:	00800044 	movi	r2,1
    38e0:	18800015 	stw	r2,0(r3)

		*CH4_threshold 	= 0xFFFFFFFF;
    38e4:	d0e04d17 	ldw	r3,-32460(gp)
    38e8:	00bfffc4 	movi	r2,-1
    38ec:	18800015 	stw	r2,0(r3)
		*CH4_RD			= 0x0;
    38f0:	d0a04f17 	ldw	r2,-32452(gp)
    38f4:	10000015 	stw	zero,0(r2)
		*CH4_timer_rst 	= 0x1;
    38f8:	d0e04c17 	ldw	r3,-32464(gp)
    38fc:	00800044 	movi	r2,1
    3900:	18800015 	stw	r2,0(r3)

		// Start LCD:
		LCD_Init();
    3904:	00001e80 	call	1e8 <LCD_Init>
		LCD_Display("Ultrasonic Array", 1);
    3908:	01000074 	movhi	r4,1
    390c:	2139b204 	addi	r4,r4,-6456
    3910:	01400044 	movi	r5,1
    3914:	00002e00 	call	2e0 <LCD_Display>
		LCD_Display("Sensor - IH CA", 2);
    3918:	01000074 	movhi	r4,1
    391c:	2139b704 	addi	r4,r4,-6436
    3920:	01400084 	movi	r5,2
    3924:	00002e00 	call	2e0 <LCD_Display>

		usleep(1 seconds);
    3928:	010003f4 	movhi	r4,15
    392c:	21109004 	addi	r4,r4,16960
    3930:	000b2100 	call	b210 <usleep>


		LCD_Display("Initialise:     ", 1);
    3934:	01000074 	movhi	r4,1
    3938:	2139bb04 	addi	r4,r4,-6420
    393c:	01400044 	movi	r5,1
    3940:	00002e00 	call	2e0 <LCD_Display>
		init_ADC();
    3944:	0002f680 	call	2f68 <init_ADC>
		usleep(0.5 seconds);
    3948:	01000234 	movhi	r4,8
    394c:	21284804 	addi	r4,r4,-24288
    3950:	000b2100 	call	b210 <usleep>

		init_FIR();
    3954:	00030880 	call	3088 <init_FIR>
		usleep(0.5 seconds);
    3958:	01000234 	movhi	r4,8
    395c:	21284804 	addi	r4,r4,-24288
    3960:	000b2100 	call	b210 <usleep>

		init_FIFO();
    3964:	000319c0 	call	319c <init_FIFO>
		init_TIMER();
    3968:	00032cc0 	call	32cc <init_TIMER>
		init_DETECTOR();
    396c:	00033980 	call	3398 <init_DETECTOR>

		find_constants();
    3970:	0001b540 	call	1b54 <find_constants>

		*fifo_rst = 0x1;
    3974:	d0e00417 	ldw	r3,-32752(gp)
    3978:	00800044 	movi	r2,1
    397c:	18800015 	stw	r2,0(r3)
		usleep(0.1 seconds);
    3980:	010000b4 	movhi	r4,2
    3984:	2121a804 	addi	r4,r4,-31072
    3988:	000b2100 	call	b210 <usleep>
		*fifo_rst = 0x0;
    398c:	d0a00417 	ldw	r2,-32752(gp)
    3990:	10000015 	stw	zero,0(r2)

		*det_on = 0x1;
    3994:	d0e00617 	ldw	r3,-32744(gp)
    3998:	00800044 	movi	r2,1
    399c:	18800015 	stw	r2,0(r3)

		// SYSTEM READY TO RUN:
		LCD_Display(line1, 1);
    39a0:	01000074 	movhi	r4,1
    39a4:	213b3b04 	addi	r4,r4,-4884
    39a8:	01400044 	movi	r5,1
    39ac:	00002e00 	call	2e0 <LCD_Display>

		line2[0] = (((threshold)/100)%10) 	+ 0x30;
    39b0:	d0a05d03 	ldbu	r2,-32396(gp)
    39b4:	11003fcc 	andi	r4,r2,255
    39b8:	2100201c 	xori	r4,r4,128
    39bc:	213fe004 	addi	r4,r4,-128
    39c0:	01401904 	movi	r5,100
    39c4:	000a5e00 	call	a5e0 <__divsi3>
    39c8:	11003fcc 	andi	r4,r2,255
    39cc:	2100201c 	xori	r4,r4,128
    39d0:	213fe004 	addi	r4,r4,-128
    39d4:	01400284 	movi	r5,10
    39d8:	000a6400 	call	a640 <__modsi3>
    39dc:	10800c04 	addi	r2,r2,48
    39e0:	1007883a 	mov	r3,r2
    39e4:	00800074 	movhi	r2,1
    39e8:	10bb3f04 	addi	r2,r2,-4868
    39ec:	10c00005 	stb	r3,0(r2)
		line2[1] = (((threshold)/10)%10) 		+ 0x30;
    39f0:	d0a05d03 	ldbu	r2,-32396(gp)
    39f4:	11003fcc 	andi	r4,r2,255
    39f8:	2100201c 	xori	r4,r4,128
    39fc:	213fe004 	addi	r4,r4,-128
    3a00:	01400284 	movi	r5,10
    3a04:	000a5e00 	call	a5e0 <__divsi3>
    3a08:	11003fcc 	andi	r4,r2,255
    3a0c:	2100201c 	xori	r4,r4,128
    3a10:	213fe004 	addi	r4,r4,-128
    3a14:	01400284 	movi	r5,10
    3a18:	000a6400 	call	a640 <__modsi3>
    3a1c:	10800c04 	addi	r2,r2,48
    3a20:	1007883a 	mov	r3,r2
    3a24:	00800074 	movhi	r2,1
    3a28:	10bb3f04 	addi	r2,r2,-4868
    3a2c:	10c00045 	stb	r3,1(r2)
		line2[2] = ((threshold)%10) 			+ 0x30;
    3a30:	d0a05d03 	ldbu	r2,-32396(gp)
    3a34:	11003fcc 	andi	r4,r2,255
    3a38:	2100201c 	xori	r4,r4,128
    3a3c:	213fe004 	addi	r4,r4,-128
    3a40:	01400284 	movi	r5,10
    3a44:	000a6400 	call	a640 <__modsi3>
    3a48:	10800c04 	addi	r2,r2,48
    3a4c:	1007883a 	mov	r3,r2
    3a50:	00800074 	movhi	r2,1
    3a54:	10bb3f04 	addi	r2,r2,-4868
    3a58:	10c00085 	stb	r3,2(r2)
		LCD_Display(line2, 2);
    3a5c:	01000074 	movhi	r4,1
    3a60:	213b3f04 	addi	r4,r4,-4868
    3a64:	01400084 	movi	r5,2
    3a68:	00002e00 	call	2e0 <LCD_Display>
}
    3a6c:	e037883a 	mov	sp,fp
    3a70:	dfc00117 	ldw	ra,4(sp)
    3a74:	df000017 	ldw	fp,0(sp)
    3a78:	dec00204 	addi	sp,sp,8
    3a7c:	f800283a 	ret

00003a80 <start_SYSTEM>:

//===============================
// Turn on RTL:
//===============================
void start_SYSTEM(void)
{
    3a80:	defffe04 	addi	sp,sp,-8
    3a84:	de00012e 	bgeu	sp,et,3a8c <start_SYSTEM+0xc>
    3a88:	003da0fa 	break	3
    3a8c:	dfc00115 	stw	ra,4(sp)
    3a90:	df000015 	stw	fp,0(sp)
    3a94:	d839883a 	mov	fp,sp
	*fifo_rst 	= 0x0;
    3a98:	d0a00417 	ldw	r2,-32752(gp)
    3a9c:	10000015 	stw	zero,0(r2)
	*data_valid = 0x0;
    3aa0:	d0a00317 	ldw	r2,-32756(gp)
    3aa4:	10000015 	stw	zero,0(r2)

	*sub_on		= 0x1;
    3aa8:	d0e00517 	ldw	r3,-32748(gp)
    3aac:	00800044 	movi	r2,1
    3ab0:	18800015 	stw	r2,0(r3)
	usleep(0.1 seconds);
    3ab4:	010000b4 	movhi	r4,2
    3ab8:	2121a804 	addi	r4,r4,-31072
    3abc:	000b2100 	call	b210 <usleep>
	*adc_on		= 0x1;
    3ac0:	d0e00717 	ldw	r3,-32740(gp)
    3ac4:	00800044 	movi	r2,1
    3ac8:	18800015 	stw	r2,0(r3)
	*det_on		= 0x1;
    3acc:	d0e00617 	ldw	r3,-32744(gp)
    3ad0:	00800044 	movi	r2,1
    3ad4:	18800015 	stw	r2,0(r3)
}
    3ad8:	e037883a 	mov	sp,fp
    3adc:	dfc00117 	ldw	ra,4(sp)
    3ae0:	df000017 	ldw	fp,0(sp)
    3ae4:	dec00204 	addi	sp,sp,8
    3ae8:	f800283a 	ret

00003aec <main>:
#include "LCD.h"
#include "tests.h"
#include "RuntimeFunctions.h"

int main()
{ 
    3aec:	defffc04 	addi	sp,sp,-16
    3af0:	de00012e 	bgeu	sp,et,3af8 <main+0xc>
    3af4:	003da0fa 	break	3
    3af8:	dfc00315 	stw	ra,12(sp)
    3afc:	df000215 	stw	fp,8(sp)
    3b00:	df000204 	addi	fp,sp,8
	// Initialise SYSTEM components:
	usleep(0.1 seconds);
    3b04:	010000b4 	movhi	r4,2
    3b08:	2121a804 	addi	r4,r4,-31072
    3b0c:	000b2100 	call	b210 <usleep>
	init_SYSTEM();
    3b10:	00038240 	call	3824 <init_SYSTEM>

#ifdef RUN
	start_SYSTEM();
    3b14:	0003a800 	call	3a80 <start_SYSTEM>
#elif defined DETECTION_TEST
		DETECTION_test();		// Run a test vector to make sure Detection and Quadratic Interpolation are functioning
#elif defined RUN
		// Running loop: Sample for any detections on the 5 Channels,
		// Then perform arithmetic to solve system of equations for R, Yaw and Elevation:
		sampleChannels();
    3b18:	000037c0 	call	37c <sampleChannels>
		find_coordinates(counter,Nreceivers,calc_mode,&R,&phi,&theta);
    3b1c:	d1600117 	ldw	r5,-32764(gp)
    3b20:	d1a6c317 	ldw	r6,-25844(gp)
    3b24:	d0a6c404 	addi	r2,gp,-25840
    3b28:	d8800015 	stw	r2,0(sp)
    3b2c:	d0a6c604 	addi	r2,gp,-25832
    3b30:	d8800115 	stw	r2,4(sp)
    3b34:	01000074 	movhi	r4,1
    3b38:	2107ec04 	addi	r4,r4,8112
    3b3c:	d1e6ce04 	addi	r7,gp,-25800
    3b40:	0001e140 	call	1e14 <find_coordinates>
		Display_Results(calc_mode, R, phi, theta);
    3b44:	d126c317 	ldw	r4,-25844(gp)
    3b48:	d0a6ce17 	ldw	r2,-25800(gp)
    3b4c:	d0e6c417 	ldw	r3,-25840(gp)
    3b50:	d1e6c617 	ldw	r7,-25832(gp)
    3b54:	100b883a 	mov	r5,r2
    3b58:	180d883a 	mov	r6,r3
    3b5c:	00018ec0 	call	18ec <Display_Results>
#else
		usleep(0.25 seconds);
#endif
	}
    3b60:	003fed06 	br	3b18 <main+0x2c>

00003b64 <floor>:
    3b64:	2805d53a 	srai	r2,r5,20
    3b68:	defff604 	addi	sp,sp,-40
    3b6c:	dd800615 	stw	r22,24(sp)
    3b70:	10c1ffcc 	andi	r3,r2,2047
    3b74:	1dbf0044 	addi	r22,r3,-1023
    3b78:	008004c4 	movi	r2,19
    3b7c:	ddc00715 	stw	r23,28(sp)
    3b80:	dc800215 	stw	r18,8(sp)
    3b84:	dc400115 	stw	r17,4(sp)
    3b88:	dc000015 	stw	r16,0(sp)
    3b8c:	dfc00915 	stw	ra,36(sp)
    3b90:	df000815 	stw	fp,32(sp)
    3b94:	dd400515 	stw	r21,20(sp)
    3b98:	dd000415 	stw	r20,16(sp)
    3b9c:	dcc00315 	stw	r19,12(sp)
    3ba0:	2021883a 	mov	r16,r4
    3ba4:	2823883a 	mov	r17,r5
    3ba8:	282f883a 	mov	r23,r5
    3bac:	2025883a 	mov	r18,r4
    3bb0:	15802916 	blt	r2,r22,3c58 <floor+0xf4>
    3bb4:	b0004816 	blt	r22,zero,3cd8 <floor+0x174>
    3bb8:	00800434 	movhi	r2,16
    3bbc:	10bfffc4 	addi	r2,r2,-1
    3bc0:	15b9d83a 	sra	fp,r2,r22
    3bc4:	282f883a 	mov	r23,r5
    3bc8:	e144703a 	and	r2,fp,r5
    3bcc:	1104b03a 	or	r2,r2,r4
    3bd0:	10001326 	beq	r2,zero,3c20 <floor+0xbc>
    3bd4:	00a20034 	movhi	r2,34816
    3bd8:	109d6704 	addi	r2,r2,30108
    3bdc:	00df8e34 	movhi	r3,32312
    3be0:	18f90f04 	addi	r3,r3,-7108
    3be4:	180f883a 	mov	r7,r3
    3be8:	100d883a 	mov	r6,r2
    3bec:	00098a40 	call	98a4 <__adddf3>
    3bf0:	180b883a 	mov	r5,r3
    3bf4:	000d883a 	mov	r6,zero
    3bf8:	000f883a 	mov	r7,zero
    3bfc:	1009883a 	mov	r4,r2
    3c00:	0009fbc0 	call	9fbc <__gtdf2>
    3c04:	0080040e 	bge	zero,r2,3c18 <floor+0xb4>
    3c08:	88004416 	blt	r17,zero,3d1c <floor+0x1b8>
    3c0c:	0704303a 	nor	r2,zero,fp
    3c10:	b8ae703a 	and	r23,r23,r2
    3c14:	0025883a 	mov	r18,zero
    3c18:	9021883a 	mov	r16,r18
    3c1c:	b823883a 	mov	r17,r23
    3c20:	8005883a 	mov	r2,r16
    3c24:	8807883a 	mov	r3,r17
    3c28:	dfc00917 	ldw	ra,36(sp)
    3c2c:	df000817 	ldw	fp,32(sp)
    3c30:	ddc00717 	ldw	r23,28(sp)
    3c34:	dd800617 	ldw	r22,24(sp)
    3c38:	dd400517 	ldw	r21,20(sp)
    3c3c:	dd000417 	ldw	r20,16(sp)
    3c40:	dcc00317 	ldw	r19,12(sp)
    3c44:	dc800217 	ldw	r18,8(sp)
    3c48:	dc400117 	ldw	r17,4(sp)
    3c4c:	dc000017 	ldw	r16,0(sp)
    3c50:	dec00a04 	addi	sp,sp,40
    3c54:	f800283a 	ret
    3c58:	00800cc4 	movi	r2,51
    3c5c:	15801616 	blt	r2,r22,3cb8 <floor+0x154>
    3c60:	18befb44 	addi	r2,r3,-1043
    3c64:	00ffffc4 	movi	r3,-1
    3c68:	18b8d83a 	srl	fp,r3,r2
    3c6c:	e104703a 	and	r2,fp,r4
    3c70:	103feb26 	beq	r2,zero,3c20 <floor+0xbc>
    3c74:	00a20034 	movhi	r2,34816
    3c78:	109d6704 	addi	r2,r2,30108
    3c7c:	00df8e34 	movhi	r3,32312
    3c80:	18f90f04 	addi	r3,r3,-7108
    3c84:	180f883a 	mov	r7,r3
    3c88:	100d883a 	mov	r6,r2
    3c8c:	00098a40 	call	98a4 <__adddf3>
    3c90:	180b883a 	mov	r5,r3
    3c94:	000d883a 	mov	r6,zero
    3c98:	000f883a 	mov	r7,zero
    3c9c:	1009883a 	mov	r4,r2
    3ca0:	0009fbc0 	call	9fbc <__gtdf2>
    3ca4:	0080210e 	bge	zero,r2,3d2c <floor+0x1c8>
    3ca8:	88002216 	blt	r17,zero,3d34 <floor+0x1d0>
    3cac:	0704303a 	nor	r2,zero,fp
    3cb0:	90a4703a 	and	r18,r18,r2
    3cb4:	003fd806 	br	3c18 <floor+0xb4>
    3cb8:	00810004 	movi	r2,1024
    3cbc:	b0bfd81e 	bne	r22,r2,3c20 <floor+0xbc>
    3cc0:	800d883a 	mov	r6,r16
    3cc4:	280f883a 	mov	r7,r5
    3cc8:	00098a40 	call	98a4 <__adddf3>
    3ccc:	1021883a 	mov	r16,r2
    3cd0:	1823883a 	mov	r17,r3
    3cd4:	003fd206 	br	3c20 <floor+0xbc>
    3cd8:	00a20034 	movhi	r2,34816
    3cdc:	109d6704 	addi	r2,r2,30108
    3ce0:	00df8e34 	movhi	r3,32312
    3ce4:	18f90f04 	addi	r3,r3,-7108
    3ce8:	180f883a 	mov	r7,r3
    3cec:	100d883a 	mov	r6,r2
    3cf0:	00098a40 	call	98a4 <__adddf3>
    3cf4:	180b883a 	mov	r5,r3
    3cf8:	000d883a 	mov	r6,zero
    3cfc:	000f883a 	mov	r7,zero
    3d00:	1009883a 	mov	r4,r2
    3d04:	0009fbc0 	call	9fbc <__gtdf2>
    3d08:	00bfc30e 	bge	zero,r2,3c18 <floor+0xb4>
    3d0c:	88001416 	blt	r17,zero,3d60 <floor+0x1fc>
    3d10:	002f883a 	mov	r23,zero
    3d14:	0025883a 	mov	r18,zero
    3d18:	003fbf06 	br	3c18 <floor+0xb4>
    3d1c:	00800434 	movhi	r2,16
    3d20:	1585d83a 	sra	r2,r2,r22
    3d24:	88af883a 	add	r23,r17,r2
    3d28:	003fb806 	br	3c0c <floor+0xa8>
    3d2c:	882f883a 	mov	r23,r17
    3d30:	003fb906 	br	3c18 <floor+0xb4>
    3d34:	00800504 	movi	r2,20
    3d38:	b0801126 	beq	r22,r2,3d80 <floor+0x21c>
    3d3c:	00c00d04 	movi	r3,52
    3d40:	1d87c83a 	sub	r3,r3,r22
    3d44:	00800044 	movi	r2,1
    3d48:	10c4983a 	sll	r2,r2,r3
    3d4c:	8085883a 	add	r2,r16,r2
    3d50:	1400012e 	bgeu	r2,r16,3d58 <floor+0x1f4>
    3d54:	8dc00044 	addi	r23,r17,1
    3d58:	1025883a 	mov	r18,r2
    3d5c:	003fd306 	br	3cac <floor+0x148>
    3d60:	00a00034 	movhi	r2,32768
    3d64:	10bfffc4 	addi	r2,r2,-1
    3d68:	8884703a 	and	r2,r17,r2
    3d6c:	8084b03a 	or	r2,r16,r2
    3d70:	103fee26 	beq	r2,zero,3d2c <floor+0x1c8>
    3d74:	05effc34 	movhi	r23,49136
    3d78:	0025883a 	mov	r18,zero
    3d7c:	003fa606 	br	3c18 <floor+0xb4>
    3d80:	8dc00044 	addi	r23,r17,1
    3d84:	003fc906 	br	3cac <floor+0x148>

00003d88 <sin>:
    3d88:	00a00034 	movhi	r2,32768
    3d8c:	10bfffc4 	addi	r2,r2,-1
    3d90:	defffa04 	addi	sp,sp,-24
    3d94:	114c703a 	and	r6,r2,r5
    3d98:	008ffa74 	movhi	r2,16361
    3d9c:	10887ec4 	addi	r2,r2,8699
    3da0:	dfc00515 	stw	ra,20(sp)
    3da4:	2011883a 	mov	r8,r4
    3da8:	1180220e 	bge	r2,r6,3e34 <sin+0xac>
    3dac:	009ffc34 	movhi	r2,32752
    3db0:	10bfffc4 	addi	r2,r2,-1
    3db4:	11800a0e 	bge	r2,r6,3de0 <sin+0x58>
    3db8:	280f883a 	mov	r7,r5
    3dbc:	400d883a 	mov	r6,r8
    3dc0:	00098240 	call	9824 <__subdf3>
    3dc4:	100d883a 	mov	r6,r2
    3dc8:	180f883a 	mov	r7,r3
    3dcc:	3005883a 	mov	r2,r6
    3dd0:	3807883a 	mov	r3,r7
    3dd4:	dfc00517 	ldw	ra,20(sp)
    3dd8:	dec00604 	addi	sp,sp,24
    3ddc:	f800283a 	ret
    3de0:	d9800104 	addi	r6,sp,4
    3de4:	00055980 	call	5598 <__ieee754_rem_pio2>
    3de8:	10c000cc 	andi	r3,r2,3
    3dec:	01000044 	movi	r4,1
    3df0:	19001b26 	beq	r3,r4,3e60 <sin+0xd8>
    3df4:	00800084 	movi	r2,2
    3df8:	18803126 	beq	r3,r2,3ec0 <sin+0x138>
    3dfc:	1800241e 	bne	r3,zero,3e90 <sin+0x108>
    3e00:	d8800117 	ldw	r2,4(sp)
    3e04:	da000317 	ldw	r8,12(sp)
    3e08:	d8c00217 	ldw	r3,8(sp)
    3e0c:	da400417 	ldw	r9,16(sp)
    3e10:	d9000015 	stw	r4,0(sp)
    3e14:	400d883a 	mov	r6,r8
    3e18:	480f883a 	mov	r7,r9
    3e1c:	180b883a 	mov	r5,r3
    3e20:	1009883a 	mov	r4,r2
    3e24:	00074380 	call	7438 <__kernel_sin>
    3e28:	100d883a 	mov	r6,r2
    3e2c:	180f883a 	mov	r7,r3
    3e30:	003fe606 	br	3dcc <sin+0x44>
    3e34:	000d883a 	mov	r6,zero
    3e38:	000f883a 	mov	r7,zero
    3e3c:	d8000015 	stw	zero,0(sp)
    3e40:	00074380 	call	7438 <__kernel_sin>
    3e44:	100d883a 	mov	r6,r2
    3e48:	180f883a 	mov	r7,r3
    3e4c:	3005883a 	mov	r2,r6
    3e50:	3807883a 	mov	r3,r7
    3e54:	dfc00517 	ldw	ra,20(sp)
    3e58:	dec00604 	addi	sp,sp,24
    3e5c:	f800283a 	ret
    3e60:	d8800117 	ldw	r2,4(sp)
    3e64:	da000317 	ldw	r8,12(sp)
    3e68:	d8c00217 	ldw	r3,8(sp)
    3e6c:	da400417 	ldw	r9,16(sp)
    3e70:	400d883a 	mov	r6,r8
    3e74:	180b883a 	mov	r5,r3
    3e78:	480f883a 	mov	r7,r9
    3e7c:	1009883a 	mov	r4,r2
    3e80:	00060880 	call	6088 <__kernel_cos>
    3e84:	100d883a 	mov	r6,r2
    3e88:	180f883a 	mov	r7,r3
    3e8c:	003fcf06 	br	3dcc <sin+0x44>
    3e90:	d8800117 	ldw	r2,4(sp)
    3e94:	da000317 	ldw	r8,12(sp)
    3e98:	d8c00217 	ldw	r3,8(sp)
    3e9c:	da400417 	ldw	r9,16(sp)
    3ea0:	400d883a 	mov	r6,r8
    3ea4:	180b883a 	mov	r5,r3
    3ea8:	480f883a 	mov	r7,r9
    3eac:	1009883a 	mov	r4,r2
    3eb0:	00060880 	call	6088 <__kernel_cos>
    3eb4:	100d883a 	mov	r6,r2
    3eb8:	19e0003c 	xorhi	r7,r3,32768
    3ebc:	003fc306 	br	3dcc <sin+0x44>
    3ec0:	d8800117 	ldw	r2,4(sp)
    3ec4:	da000317 	ldw	r8,12(sp)
    3ec8:	d8c00217 	ldw	r3,8(sp)
    3ecc:	da400417 	ldw	r9,16(sp)
    3ed0:	d9000015 	stw	r4,0(sp)
    3ed4:	400d883a 	mov	r6,r8
    3ed8:	480f883a 	mov	r7,r9
    3edc:	180b883a 	mov	r5,r3
    3ee0:	1009883a 	mov	r4,r2
    3ee4:	00074380 	call	7438 <__kernel_sin>
    3ee8:	100d883a 	mov	r6,r2
    3eec:	19e0003c 	xorhi	r7,r3,32768
    3ef0:	003fb606 	br	3dcc <sin+0x44>

00003ef4 <acos>:
    3ef4:	defff104 	addi	sp,sp,-60
    3ef8:	dd000d15 	stw	r20,52(sp)
    3efc:	05000074 	movhi	r20,1
    3f00:	a5017004 	addi	r20,r20,1472
    3f04:	dcc00c15 	stw	r19,48(sp)
    3f08:	dc800b15 	stw	r18,44(sp)
    3f0c:	dc400a15 	stw	r17,40(sp)
    3f10:	dc000915 	stw	r16,36(sp)
    3f14:	2025883a 	mov	r18,r4
    3f18:	dfc00e15 	stw	ra,56(sp)
    3f1c:	2827883a 	mov	r19,r5
    3f20:	00042840 	call	4284 <__ieee754_acos>
    3f24:	a1000017 	ldw	r4,0(r20)
    3f28:	1021883a 	mov	r16,r2
    3f2c:	00bfffc4 	movi	r2,-1
    3f30:	1823883a 	mov	r17,r3
    3f34:	20800426 	beq	r4,r2,3f48 <acos+0x54>
    3f38:	9009883a 	mov	r4,r18
    3f3c:	980b883a 	mov	r5,r19
    3f40:	00077680 	call	7768 <__isnand>
    3f44:	10000a26 	beq	r2,zero,3f70 <acos+0x7c>
    3f48:	8005883a 	mov	r2,r16
    3f4c:	8807883a 	mov	r3,r17
    3f50:	dfc00e17 	ldw	ra,56(sp)
    3f54:	dd000d17 	ldw	r20,52(sp)
    3f58:	dcc00c17 	ldw	r19,48(sp)
    3f5c:	dc800b17 	ldw	r18,44(sp)
    3f60:	dc400a17 	ldw	r17,40(sp)
    3f64:	dc000917 	ldw	r16,36(sp)
    3f68:	dec00f04 	addi	sp,sp,60
    3f6c:	f800283a 	ret
    3f70:	9009883a 	mov	r4,r18
    3f74:	980b883a 	mov	r5,r19
    3f78:	00077500 	call	7750 <fabs>
    3f7c:	0011883a 	mov	r8,zero
    3f80:	024ffc34 	movhi	r9,16368
    3f84:	180b883a 	mov	r5,r3
    3f88:	480f883a 	mov	r7,r9
    3f8c:	1009883a 	mov	r4,r2
    3f90:	400d883a 	mov	r6,r8
    3f94:	0009fbc0 	call	9fbc <__gtdf2>
    3f98:	00bfeb0e 	bge	zero,r2,3f48 <acos+0x54>
    3f9c:	00800044 	movi	r2,1
    3fa0:	00c00074 	movhi	r3,1
    3fa4:	18f9c004 	addi	r3,r3,-6400
    3fa8:	01000074 	movhi	r4,1
    3fac:	2139c304 	addi	r4,r4,-6388
    3fb0:	d8800015 	stw	r2,0(sp)
    3fb4:	d8c00115 	stw	r3,4(sp)
    3fb8:	dcc00315 	stw	r19,12(sp)
    3fbc:	d8000815 	stw	zero,32(sp)
    3fc0:	dc800415 	stw	r18,16(sp)
    3fc4:	dcc00515 	stw	r19,20(sp)
    3fc8:	dc800215 	stw	r18,8(sp)
    3fcc:	00077a00 	call	77a0 <nan>
    3fd0:	a1800017 	ldw	r6,0(r20)
    3fd4:	d8800615 	stw	r2,24(sp)
    3fd8:	00800084 	movi	r2,2
    3fdc:	d8c00715 	stw	r3,28(sp)
    3fe0:	30800826 	beq	r6,r2,4004 <acos+0x110>
    3fe4:	d809883a 	mov	r4,sp
    3fe8:	00077980 	call	7798 <matherr>
    3fec:	10000526 	beq	r2,zero,4004 <acos+0x110>
    3ff0:	d8800817 	ldw	r2,32(sp)
    3ff4:	1000071e 	bne	r2,zero,4014 <acos+0x120>
    3ff8:	dc000617 	ldw	r16,24(sp)
    3ffc:	dc400717 	ldw	r17,28(sp)
    4000:	003fd106 	br	3f48 <acos+0x54>
    4004:	000b01c0 	call	b01c <__errno>
    4008:	00c00844 	movi	r3,33
    400c:	10c00015 	stw	r3,0(r2)
    4010:	003ff706 	br	3ff0 <acos+0xfc>
    4014:	000b01c0 	call	b01c <__errno>
    4018:	d8c00817 	ldw	r3,32(sp)
    401c:	10c00015 	stw	r3,0(r2)
    4020:	003ff506 	br	3ff8 <acos+0x104>

00004024 <asin>:
    4024:	defff104 	addi	sp,sp,-60
    4028:	dd000d15 	stw	r20,52(sp)
    402c:	05000074 	movhi	r20,1
    4030:	a5017004 	addi	r20,r20,1472
    4034:	dcc00c15 	stw	r19,48(sp)
    4038:	dc800b15 	stw	r18,44(sp)
    403c:	dc400a15 	stw	r17,40(sp)
    4040:	dc000915 	stw	r16,36(sp)
    4044:	2025883a 	mov	r18,r4
    4048:	dfc00e15 	stw	ra,56(sp)
    404c:	2827883a 	mov	r19,r5
    4050:	0004cdc0 	call	4cdc <__ieee754_asin>
    4054:	a1000017 	ldw	r4,0(r20)
    4058:	1021883a 	mov	r16,r2
    405c:	00bfffc4 	movi	r2,-1
    4060:	1823883a 	mov	r17,r3
    4064:	20800426 	beq	r4,r2,4078 <asin+0x54>
    4068:	9009883a 	mov	r4,r18
    406c:	980b883a 	mov	r5,r19
    4070:	00077680 	call	7768 <__isnand>
    4074:	10000a26 	beq	r2,zero,40a0 <asin+0x7c>
    4078:	8005883a 	mov	r2,r16
    407c:	8807883a 	mov	r3,r17
    4080:	dfc00e17 	ldw	ra,56(sp)
    4084:	dd000d17 	ldw	r20,52(sp)
    4088:	dcc00c17 	ldw	r19,48(sp)
    408c:	dc800b17 	ldw	r18,44(sp)
    4090:	dc400a17 	ldw	r17,40(sp)
    4094:	dc000917 	ldw	r16,36(sp)
    4098:	dec00f04 	addi	sp,sp,60
    409c:	f800283a 	ret
    40a0:	9009883a 	mov	r4,r18
    40a4:	980b883a 	mov	r5,r19
    40a8:	00077500 	call	7750 <fabs>
    40ac:	0011883a 	mov	r8,zero
    40b0:	024ffc34 	movhi	r9,16368
    40b4:	180b883a 	mov	r5,r3
    40b8:	480f883a 	mov	r7,r9
    40bc:	1009883a 	mov	r4,r2
    40c0:	400d883a 	mov	r6,r8
    40c4:	0009fbc0 	call	9fbc <__gtdf2>
    40c8:	00bfeb0e 	bge	zero,r2,4078 <asin+0x54>
    40cc:	00800044 	movi	r2,1
    40d0:	00c00074 	movhi	r3,1
    40d4:	18f9c204 	addi	r3,r3,-6392
    40d8:	01000074 	movhi	r4,1
    40dc:	2139c304 	addi	r4,r4,-6388
    40e0:	d8800015 	stw	r2,0(sp)
    40e4:	d8c00115 	stw	r3,4(sp)
    40e8:	dcc00315 	stw	r19,12(sp)
    40ec:	d8000815 	stw	zero,32(sp)
    40f0:	dc800415 	stw	r18,16(sp)
    40f4:	dcc00515 	stw	r19,20(sp)
    40f8:	dc800215 	stw	r18,8(sp)
    40fc:	00077a00 	call	77a0 <nan>
    4100:	a1800017 	ldw	r6,0(r20)
    4104:	d8800615 	stw	r2,24(sp)
    4108:	00800084 	movi	r2,2
    410c:	d8c00715 	stw	r3,28(sp)
    4110:	30800826 	beq	r6,r2,4134 <asin+0x110>
    4114:	d809883a 	mov	r4,sp
    4118:	00077980 	call	7798 <matherr>
    411c:	10000526 	beq	r2,zero,4134 <asin+0x110>
    4120:	d8800817 	ldw	r2,32(sp)
    4124:	1000071e 	bne	r2,zero,4144 <asin+0x120>
    4128:	dc000617 	ldw	r16,24(sp)
    412c:	dc400717 	ldw	r17,28(sp)
    4130:	003fd106 	br	4078 <asin+0x54>
    4134:	000b01c0 	call	b01c <__errno>
    4138:	00c00844 	movi	r3,33
    413c:	10c00015 	stw	r3,0(r2)
    4140:	003ff706 	br	4120 <asin+0xfc>
    4144:	000b01c0 	call	b01c <__errno>
    4148:	d8c00817 	ldw	r3,32(sp)
    414c:	10c00015 	stw	r3,0(r2)
    4150:	003ff506 	br	4128 <asin+0x104>

00004154 <sqrt>:
    4154:	defff104 	addi	sp,sp,-60
    4158:	dd000d15 	stw	r20,52(sp)
    415c:	05000074 	movhi	r20,1
    4160:	a5017004 	addi	r20,r20,1472
    4164:	dcc00c15 	stw	r19,48(sp)
    4168:	dc800b15 	stw	r18,44(sp)
    416c:	dc400a15 	stw	r17,40(sp)
    4170:	dc000915 	stw	r16,36(sp)
    4174:	2025883a 	mov	r18,r4
    4178:	dfc00e15 	stw	ra,56(sp)
    417c:	2827883a 	mov	r19,r5
    4180:	0005dc00 	call	5dc0 <__ieee754_sqrt>
    4184:	a1000017 	ldw	r4,0(r20)
    4188:	1021883a 	mov	r16,r2
    418c:	00bfffc4 	movi	r2,-1
    4190:	1823883a 	mov	r17,r3
    4194:	20800a26 	beq	r4,r2,41c0 <sqrt+0x6c>
    4198:	9009883a 	mov	r4,r18
    419c:	980b883a 	mov	r5,r19
    41a0:	00077680 	call	7768 <__isnand>
    41a4:	1000061e 	bne	r2,zero,41c0 <sqrt+0x6c>
    41a8:	000d883a 	mov	r6,zero
    41ac:	000f883a 	mov	r7,zero
    41b0:	9009883a 	mov	r4,r18
    41b4:	980b883a 	mov	r5,r19
    41b8:	000a0cc0 	call	a0cc <__ltdf2>
    41bc:	10000a16 	blt	r2,zero,41e8 <sqrt+0x94>
    41c0:	8005883a 	mov	r2,r16
    41c4:	8807883a 	mov	r3,r17
    41c8:	dfc00e17 	ldw	ra,56(sp)
    41cc:	dd000d17 	ldw	r20,52(sp)
    41d0:	dcc00c17 	ldw	r19,48(sp)
    41d4:	dc800b17 	ldw	r18,44(sp)
    41d8:	dc400a17 	ldw	r17,40(sp)
    41dc:	dc000917 	ldw	r16,36(sp)
    41e0:	dec00f04 	addi	sp,sp,60
    41e4:	f800283a 	ret
    41e8:	a4000017 	ldw	r16,0(r20)
    41ec:	00800044 	movi	r2,1
    41f0:	00c00074 	movhi	r3,1
    41f4:	18f9c404 	addi	r3,r3,-6384
    41f8:	d8800015 	stw	r2,0(sp)
    41fc:	d8c00115 	stw	r3,4(sp)
    4200:	dcc00315 	stw	r19,12(sp)
    4204:	d8000815 	stw	zero,32(sp)
    4208:	dc800415 	stw	r18,16(sp)
    420c:	dcc00515 	stw	r19,20(sp)
    4210:	dc800215 	stw	r18,8(sp)
    4214:	80000a1e 	bne	r16,zero,4240 <sqrt+0xec>
    4218:	d8000615 	stw	zero,24(sp)
    421c:	d8000715 	stw	zero,28(sp)
    4220:	d809883a 	mov	r4,sp
    4224:	00077980 	call	7798 <matherr>
    4228:	10000e26 	beq	r2,zero,4264 <sqrt+0x110>
    422c:	d8800817 	ldw	r2,32(sp)
    4230:	1000101e 	bne	r2,zero,4274 <sqrt+0x120>
    4234:	dc000617 	ldw	r16,24(sp)
    4238:	dc400717 	ldw	r17,28(sp)
    423c:	003fe006 	br	41c0 <sqrt+0x6c>
    4240:	0009883a 	mov	r4,zero
    4244:	000d883a 	mov	r6,zero
    4248:	000b883a 	mov	r5,zero
    424c:	000f883a 	mov	r7,zero
    4250:	0009cdc0 	call	9cdc <__divdf3>
    4254:	d8800615 	stw	r2,24(sp)
    4258:	00800084 	movi	r2,2
    425c:	d8c00715 	stw	r3,28(sp)
    4260:	80bfef1e 	bne	r16,r2,4220 <sqrt+0xcc>
    4264:	000b01c0 	call	b01c <__errno>
    4268:	00c00844 	movi	r3,33
    426c:	10c00015 	stw	r3,0(r2)
    4270:	003fee06 	br	422c <sqrt+0xd8>
    4274:	000b01c0 	call	b01c <__errno>
    4278:	d8c00817 	ldw	r3,32(sp)
    427c:	10c00015 	stw	r3,0(r2)
    4280:	003fec06 	br	4234 <sqrt+0xe0>

00004284 <__ieee754_acos>:
    4284:	00a00034 	movhi	r2,32768
    4288:	10bfffc4 	addi	r2,r2,-1
    428c:	deffeb04 	addi	sp,sp,-84
    4290:	288c703a 	and	r6,r5,r2
    4294:	008ffc34 	movhi	r2,16368
    4298:	10bfffc4 	addi	r2,r2,-1
    429c:	dfc01415 	stw	ra,80(sp)
    42a0:	ddc01315 	stw	r23,76(sp)
    42a4:	dd801215 	stw	r22,72(sp)
    42a8:	dd401115 	stw	r21,68(sp)
    42ac:	dd001015 	stw	r20,64(sp)
    42b0:	dcc00f15 	stw	r19,60(sp)
    42b4:	dc800e15 	stw	r18,56(sp)
    42b8:	dc400d15 	stw	r17,52(sp)
    42bc:	dc000c15 	stw	r16,48(sp)
    42c0:	d9000615 	stw	r4,24(sp)
    42c4:	d9400715 	stw	r5,28(sp)
    42c8:	1180150e 	bge	r2,r6,4320 <__ieee754_acos+0x9c>
    42cc:	2005883a 	mov	r2,r4
    42d0:	01300434 	movhi	r4,49168
    42d4:	3109883a 	add	r4,r6,r4
    42d8:	2088b03a 	or	r4,r4,r2
    42dc:	2001a51e 	bne	r4,zero,4974 <__ieee754_acos+0x6f0>
    42e0:	0142790e 	bge	zero,r5,4cc8 <__ieee754_acos+0xa44>
    42e4:	000d883a 	mov	r6,zero
    42e8:	000f883a 	mov	r7,zero
    42ec:	3005883a 	mov	r2,r6
    42f0:	3807883a 	mov	r3,r7
    42f4:	dfc01417 	ldw	ra,80(sp)
    42f8:	ddc01317 	ldw	r23,76(sp)
    42fc:	dd801217 	ldw	r22,72(sp)
    4300:	dd401117 	ldw	r21,68(sp)
    4304:	dd001017 	ldw	r20,64(sp)
    4308:	dcc00f17 	ldw	r19,60(sp)
    430c:	dc800e17 	ldw	r18,56(sp)
    4310:	dc400d17 	ldw	r17,52(sp)
    4314:	dc000c17 	ldw	r16,48(sp)
    4318:	dec01504 	addi	sp,sp,84
    431c:	f800283a 	ret
    4320:	008ff834 	movhi	r2,16352
    4324:	10bfffc4 	addi	r2,r2,-1
    4328:	1180db0e 	bge	r2,r6,4698 <__ieee754_acos+0x414>
    432c:	2801a216 	blt	r5,zero,49b8 <__ieee754_acos+0x734>
    4330:	010ffc34 	movhi	r4,16368
    4334:	d9000915 	stw	r4,36(sp)
    4338:	d9c00717 	ldw	r7,28(sp)
    433c:	d9400917 	ldw	r5,36(sp)
    4340:	d9800617 	ldw	r6,24(sp)
    4344:	0005883a 	mov	r2,zero
    4348:	0009883a 	mov	r4,zero
    434c:	d8800815 	stw	r2,32(sp)
    4350:	00098240 	call	9824 <__subdf3>
    4354:	0011883a 	mov	r8,zero
    4358:	024ff834 	movhi	r9,16352
    435c:	480f883a 	mov	r7,r9
    4360:	400d883a 	mov	r6,r8
    4364:	180b883a 	mov	r5,r3
    4368:	1009883a 	mov	r4,r2
    436c:	00099180 	call	9918 <__muldf3>
    4370:	1009883a 	mov	r4,r2
    4374:	180b883a 	mov	r5,r3
    4378:	1025883a 	mov	r18,r2
    437c:	1827883a 	mov	r19,r3
    4380:	0005dc00 	call	5dc0 <__ieee754_sqrt>
    4384:	180b883a 	mov	r5,r3
    4388:	0009883a 	mov	r4,zero
    438c:	000d883a 	mov	r6,zero
    4390:	180f883a 	mov	r7,r3
    4394:	182f883a 	mov	r23,r3
    4398:	d9000215 	stw	r4,8(sp)
    439c:	d8800415 	stw	r2,16(sp)
    43a0:	d8c00515 	stw	r3,20(sp)
    43a4:	d8c00315 	stw	r3,12(sp)
    43a8:	00099180 	call	9918 <__muldf3>
    43ac:	180f883a 	mov	r7,r3
    43b0:	9009883a 	mov	r4,r18
    43b4:	980b883a 	mov	r5,r19
    43b8:	100d883a 	mov	r6,r2
    43bc:	00098240 	call	9824 <__subdf3>
    43c0:	d9000417 	ldw	r4,16(sp)
    43c4:	d9400517 	ldw	r5,20(sp)
    43c8:	d9800217 	ldw	r6,8(sp)
    43cc:	b80f883a 	mov	r7,r23
    43d0:	1021883a 	mov	r16,r2
    43d4:	1823883a 	mov	r17,r3
    43d8:	00098a40 	call	98a4 <__adddf3>
    43dc:	180f883a 	mov	r7,r3
    43e0:	880b883a 	mov	r5,r17
    43e4:	8009883a 	mov	r4,r16
    43e8:	100d883a 	mov	r6,r2
    43ec:	0009cdc0 	call	9cdc <__divdf3>
    43f0:	02037fb4 	movhi	r8,3582
    43f4:	423dc244 	addi	r8,r8,-2295
    43f8:	024fc0b4 	movhi	r9,16130
    43fc:	4a4f7844 	addi	r9,r9,15841
    4400:	480f883a 	mov	r7,r9
    4404:	400d883a 	mov	r6,r8
    4408:	9009883a 	mov	r4,r18
    440c:	980b883a 	mov	r5,r19
    4410:	d8800a15 	stw	r2,40(sp)
    4414:	d8c00b15 	stw	r3,44(sp)
    4418:	00099180 	call	9918 <__muldf3>
    441c:	021d40b4 	movhi	r8,29954
    4420:	422ca204 	addi	r8,r8,-19832
    4424:	024fd2b4 	movhi	r9,16202
    4428:	4a7bf804 	addi	r9,r9,-4128
    442c:	480f883a 	mov	r7,r9
    4430:	400d883a 	mov	r6,r8
    4434:	180b883a 	mov	r5,r3
    4438:	1009883a 	mov	r4,r2
    443c:	00098a40 	call	98a4 <__adddf3>
    4440:	180f883a 	mov	r7,r3
    4444:	9009883a 	mov	r4,r18
    4448:	980b883a 	mov	r5,r19
    444c:	100d883a 	mov	r6,r2
    4450:	00099180 	call	9918 <__muldf3>
    4454:	022d5a74 	movhi	r8,46441
    4458:	4223cec4 	addi	r8,r8,-28869
    445c:	024fe974 	movhi	r9,16293
    4460:	4a608a04 	addi	r9,r9,-32216
    4464:	480f883a 	mov	r7,r9
    4468:	400d883a 	mov	r6,r8
    446c:	180b883a 	mov	r5,r3
    4470:	1009883a 	mov	r4,r2
    4474:	00098240 	call	9824 <__subdf3>
    4478:	180f883a 	mov	r7,r3
    447c:	9009883a 	mov	r4,r18
    4480:	980b883a 	mov	r5,r19
    4484:	100d883a 	mov	r6,r2
    4488:	00099180 	call	9918 <__muldf3>
    448c:	0203a234 	movhi	r8,3720
    4490:	42111544 	addi	r8,r8,17493
    4494:	024ff2b4 	movhi	r9,16330
    4498:	4a705544 	addi	r9,r9,-16043
    449c:	480f883a 	mov	r7,r9
    44a0:	400d883a 	mov	r6,r8
    44a4:	180b883a 	mov	r5,r3
    44a8:	1009883a 	mov	r4,r2
    44ac:	00098a40 	call	98a4 <__adddf3>
    44b0:	180f883a 	mov	r7,r3
    44b4:	9009883a 	mov	r4,r18
    44b8:	980b883a 	mov	r5,r19
    44bc:	100d883a 	mov	r6,r2
    44c0:	00099180 	call	9918 <__muldf3>
    44c4:	0200faf4 	movhi	r8,1003
    44c8:	421bdf44 	addi	r8,r8,28541
    44cc:	024ff574 	movhi	r9,16341
    44d0:	4a758484 	addi	r9,r9,-10734
    44d4:	480f883a 	mov	r7,r9
    44d8:	400d883a 	mov	r6,r8
    44dc:	180b883a 	mov	r5,r3
    44e0:	1009883a 	mov	r4,r2
    44e4:	00098240 	call	9824 <__subdf3>
    44e8:	180f883a 	mov	r7,r3
    44ec:	9009883a 	mov	r4,r18
    44f0:	980b883a 	mov	r5,r19
    44f4:	100d883a 	mov	r6,r2
    44f8:	00099180 	call	9918 <__muldf3>
    44fc:	02155574 	movhi	r8,21845
    4500:	42155544 	addi	r8,r8,21845
    4504:	024ff174 	movhi	r9,16325
    4508:	4a555544 	addi	r9,r9,21845
    450c:	480f883a 	mov	r7,r9
    4510:	400d883a 	mov	r6,r8
    4514:	180b883a 	mov	r5,r3
    4518:	1009883a 	mov	r4,r2
    451c:	00098a40 	call	98a4 <__adddf3>
    4520:	180f883a 	mov	r7,r3
    4524:	9009883a 	mov	r4,r18
    4528:	980b883a 	mov	r5,r19
    452c:	100d883a 	mov	r6,r2
    4530:	00099180 	call	9918 <__muldf3>
    4534:	022c4bf4 	movhi	r8,45359
    4538:	4224a084 	addi	r8,r8,-28030
    453c:	024fed34 	movhi	r9,16308
    4540:	4a6e3144 	addi	r9,r9,-18235
    4544:	480f883a 	mov	r7,r9
    4548:	400d883a 	mov	r6,r8
    454c:	9009883a 	mov	r4,r18
    4550:	980b883a 	mov	r5,r19
    4554:	1021883a 	mov	r16,r2
    4558:	1823883a 	mov	r17,r3
    455c:	00099180 	call	9918 <__muldf3>
    4560:	0206e374 	movhi	r8,7053
    4564:	42005644 	addi	r8,r8,345
    4568:	024ff9b4 	movhi	r9,16358
    456c:	4a419b04 	addi	r9,r9,1644
    4570:	480f883a 	mov	r7,r9
    4574:	400d883a 	mov	r6,r8
    4578:	180b883a 	mov	r5,r3
    457c:	1009883a 	mov	r4,r2
    4580:	00098240 	call	9824 <__subdf3>
    4584:	180f883a 	mov	r7,r3
    4588:	9009883a 	mov	r4,r18
    458c:	980b883a 	mov	r5,r19
    4590:	100d883a 	mov	r6,r2
    4594:	00099180 	call	9918 <__muldf3>
    4598:	022716b4 	movhi	r8,40026
    459c:	4222b204 	addi	r8,r8,-30008
    45a0:	02500034 	movhi	r9,16384
    45a4:	4a4ab944 	addi	r9,r9,10981
    45a8:	480f883a 	mov	r7,r9
    45ac:	400d883a 	mov	r6,r8
    45b0:	180b883a 	mov	r5,r3
    45b4:	1009883a 	mov	r4,r2
    45b8:	00098a40 	call	98a4 <__adddf3>
    45bc:	180f883a 	mov	r7,r3
    45c0:	9009883a 	mov	r4,r18
    45c4:	980b883a 	mov	r5,r19
    45c8:	100d883a 	mov	r6,r2
    45cc:	00099180 	call	9918 <__muldf3>
    45d0:	025000f4 	movhi	r9,16387
    45d4:	4a4e89c4 	addi	r9,r9,14887
    45d8:	020722b4 	movhi	r8,7306
    45dc:	420b52c4 	addi	r8,r8,11595
    45e0:	480f883a 	mov	r7,r9
    45e4:	400d883a 	mov	r6,r8
    45e8:	180b883a 	mov	r5,r3
    45ec:	1009883a 	mov	r4,r2
    45f0:	00098240 	call	9824 <__subdf3>
    45f4:	180f883a 	mov	r7,r3
    45f8:	9009883a 	mov	r4,r18
    45fc:	980b883a 	mov	r5,r19
    4600:	100d883a 	mov	r6,r2
    4604:	00099180 	call	9918 <__muldf3>
    4608:	1011883a 	mov	r8,r2
    460c:	d8800917 	ldw	r2,36(sp)
    4610:	4009883a 	mov	r4,r8
    4614:	000d883a 	mov	r6,zero
    4618:	100f883a 	mov	r7,r2
    461c:	180b883a 	mov	r5,r3
    4620:	00098a40 	call	98a4 <__adddf3>
    4624:	180f883a 	mov	r7,r3
    4628:	880b883a 	mov	r5,r17
    462c:	8009883a 	mov	r4,r16
    4630:	100d883a 	mov	r6,r2
    4634:	0009cdc0 	call	9cdc <__divdf3>
    4638:	d9400517 	ldw	r5,20(sp)
    463c:	d9000417 	ldw	r4,16(sp)
    4640:	180f883a 	mov	r7,r3
    4644:	100d883a 	mov	r6,r2
    4648:	00099180 	call	9918 <__muldf3>
    464c:	d9400b17 	ldw	r5,44(sp)
    4650:	d9000a17 	ldw	r4,40(sp)
    4654:	180f883a 	mov	r7,r3
    4658:	100d883a 	mov	r6,r2
    465c:	00098a40 	call	98a4 <__adddf3>
    4660:	d9000217 	ldw	r4,8(sp)
    4664:	b80b883a 	mov	r5,r23
    4668:	180f883a 	mov	r7,r3
    466c:	100d883a 	mov	r6,r2
    4670:	00098a40 	call	98a4 <__adddf3>
    4674:	1011883a 	mov	r8,r2
    4678:	180f883a 	mov	r7,r3
    467c:	1009883a 	mov	r4,r2
    4680:	180b883a 	mov	r5,r3
    4684:	400d883a 	mov	r6,r8
    4688:	00098a40 	call	98a4 <__adddf3>
    468c:	100d883a 	mov	r6,r2
    4690:	180f883a 	mov	r7,r3
    4694:	003f1506 	br	42ec <__ieee754_acos+0x68>
    4698:	008f1834 	movhi	r2,15456
    469c:	1180c10e 	bge	r2,r6,49a4 <__ieee754_acos+0x720>
    46a0:	d9000617 	ldw	r4,24(sp)
    46a4:	d9c00717 	ldw	r7,28(sp)
    46a8:	200d883a 	mov	r6,r4
    46ac:	00099180 	call	9918 <__muldf3>
    46b0:	1021883a 	mov	r16,r2
    46b4:	1823883a 	mov	r17,r3
    46b8:	00837fb4 	movhi	r2,3582
    46bc:	10bdc244 	addi	r2,r2,-2295
    46c0:	00cfc0b4 	movhi	r3,16130
    46c4:	18cf7844 	addi	r3,r3,15841
    46c8:	180f883a 	mov	r7,r3
    46cc:	8009883a 	mov	r4,r16
    46d0:	880b883a 	mov	r5,r17
    46d4:	100d883a 	mov	r6,r2
    46d8:	00099180 	call	9918 <__muldf3>
    46dc:	021d40b4 	movhi	r8,29954
    46e0:	422ca204 	addi	r8,r8,-19832
    46e4:	024fd2b4 	movhi	r9,16202
    46e8:	4a7bf804 	addi	r9,r9,-4128
    46ec:	480f883a 	mov	r7,r9
    46f0:	400d883a 	mov	r6,r8
    46f4:	180b883a 	mov	r5,r3
    46f8:	1009883a 	mov	r4,r2
    46fc:	00098a40 	call	98a4 <__adddf3>
    4700:	180f883a 	mov	r7,r3
    4704:	8009883a 	mov	r4,r16
    4708:	880b883a 	mov	r5,r17
    470c:	100d883a 	mov	r6,r2
    4710:	00099180 	call	9918 <__muldf3>
    4714:	022d5a74 	movhi	r8,46441
    4718:	4223cec4 	addi	r8,r8,-28869
    471c:	024fe974 	movhi	r9,16293
    4720:	4a608a04 	addi	r9,r9,-32216
    4724:	480f883a 	mov	r7,r9
    4728:	400d883a 	mov	r6,r8
    472c:	180b883a 	mov	r5,r3
    4730:	1009883a 	mov	r4,r2
    4734:	00098240 	call	9824 <__subdf3>
    4738:	180f883a 	mov	r7,r3
    473c:	8009883a 	mov	r4,r16
    4740:	880b883a 	mov	r5,r17
    4744:	100d883a 	mov	r6,r2
    4748:	00099180 	call	9918 <__muldf3>
    474c:	0203a234 	movhi	r8,3720
    4750:	42111544 	addi	r8,r8,17493
    4754:	024ff2b4 	movhi	r9,16330
    4758:	4a705544 	addi	r9,r9,-16043
    475c:	480f883a 	mov	r7,r9
    4760:	400d883a 	mov	r6,r8
    4764:	180b883a 	mov	r5,r3
    4768:	1009883a 	mov	r4,r2
    476c:	00098a40 	call	98a4 <__adddf3>
    4770:	180f883a 	mov	r7,r3
    4774:	8009883a 	mov	r4,r16
    4778:	880b883a 	mov	r5,r17
    477c:	100d883a 	mov	r6,r2
    4780:	00099180 	call	9918 <__muldf3>
    4784:	0200faf4 	movhi	r8,1003
    4788:	421bdf44 	addi	r8,r8,28541
    478c:	024ff574 	movhi	r9,16341
    4790:	4a758484 	addi	r9,r9,-10734
    4794:	480f883a 	mov	r7,r9
    4798:	400d883a 	mov	r6,r8
    479c:	180b883a 	mov	r5,r3
    47a0:	1009883a 	mov	r4,r2
    47a4:	00098240 	call	9824 <__subdf3>
    47a8:	180f883a 	mov	r7,r3
    47ac:	8009883a 	mov	r4,r16
    47b0:	880b883a 	mov	r5,r17
    47b4:	100d883a 	mov	r6,r2
    47b8:	00099180 	call	9918 <__muldf3>
    47bc:	02155574 	movhi	r8,21845
    47c0:	42155544 	addi	r8,r8,21845
    47c4:	024ff174 	movhi	r9,16325
    47c8:	4a555544 	addi	r9,r9,21845
    47cc:	480f883a 	mov	r7,r9
    47d0:	400d883a 	mov	r6,r8
    47d4:	180b883a 	mov	r5,r3
    47d8:	1009883a 	mov	r4,r2
    47dc:	00098a40 	call	98a4 <__adddf3>
    47e0:	180f883a 	mov	r7,r3
    47e4:	8009883a 	mov	r4,r16
    47e8:	880b883a 	mov	r5,r17
    47ec:	100d883a 	mov	r6,r2
    47f0:	00099180 	call	9918 <__muldf3>
    47f4:	022c4bf4 	movhi	r8,45359
    47f8:	4224a084 	addi	r8,r8,-28030
    47fc:	024fed34 	movhi	r9,16308
    4800:	4a6e3144 	addi	r9,r9,-18235
    4804:	480f883a 	mov	r7,r9
    4808:	400d883a 	mov	r6,r8
    480c:	8009883a 	mov	r4,r16
    4810:	880b883a 	mov	r5,r17
    4814:	1029883a 	mov	r20,r2
    4818:	182b883a 	mov	r21,r3
    481c:	00099180 	call	9918 <__muldf3>
    4820:	0206e374 	movhi	r8,7053
    4824:	42005644 	addi	r8,r8,345
    4828:	024ff9b4 	movhi	r9,16358
    482c:	4a419b04 	addi	r9,r9,1644
    4830:	480f883a 	mov	r7,r9
    4834:	400d883a 	mov	r6,r8
    4838:	180b883a 	mov	r5,r3
    483c:	1009883a 	mov	r4,r2
    4840:	00098240 	call	9824 <__subdf3>
    4844:	180f883a 	mov	r7,r3
    4848:	8009883a 	mov	r4,r16
    484c:	880b883a 	mov	r5,r17
    4850:	100d883a 	mov	r6,r2
    4854:	00099180 	call	9918 <__muldf3>
    4858:	022716b4 	movhi	r8,40026
    485c:	4222b204 	addi	r8,r8,-30008
    4860:	02500034 	movhi	r9,16384
    4864:	4a4ab944 	addi	r9,r9,10981
    4868:	480f883a 	mov	r7,r9
    486c:	400d883a 	mov	r6,r8
    4870:	180b883a 	mov	r5,r3
    4874:	1009883a 	mov	r4,r2
    4878:	00098a40 	call	98a4 <__adddf3>
    487c:	180f883a 	mov	r7,r3
    4880:	8009883a 	mov	r4,r16
    4884:	880b883a 	mov	r5,r17
    4888:	100d883a 	mov	r6,r2
    488c:	00099180 	call	9918 <__muldf3>
    4890:	020722b4 	movhi	r8,7306
    4894:	420b52c4 	addi	r8,r8,11595
    4898:	025000f4 	movhi	r9,16387
    489c:	4a4e89c4 	addi	r9,r9,14887
    48a0:	480f883a 	mov	r7,r9
    48a4:	400d883a 	mov	r6,r8
    48a8:	180b883a 	mov	r5,r3
    48ac:	1009883a 	mov	r4,r2
    48b0:	00098240 	call	9824 <__subdf3>
    48b4:	180f883a 	mov	r7,r3
    48b8:	8009883a 	mov	r4,r16
    48bc:	880b883a 	mov	r5,r17
    48c0:	100d883a 	mov	r6,r2
    48c4:	00099180 	call	9918 <__muldf3>
    48c8:	0011883a 	mov	r8,zero
    48cc:	024ffc34 	movhi	r9,16368
    48d0:	480f883a 	mov	r7,r9
    48d4:	400d883a 	mov	r6,r8
    48d8:	180b883a 	mov	r5,r3
    48dc:	1009883a 	mov	r4,r2
    48e0:	00098a40 	call	98a4 <__adddf3>
    48e4:	180f883a 	mov	r7,r3
    48e8:	a80b883a 	mov	r5,r21
    48ec:	a009883a 	mov	r4,r20
    48f0:	100d883a 	mov	r6,r2
    48f4:	0009cdc0 	call	9cdc <__divdf3>
    48f8:	d9000617 	ldw	r4,24(sp)
    48fc:	d9400717 	ldw	r5,28(sp)
    4900:	180f883a 	mov	r7,r3
    4904:	100d883a 	mov	r6,r2
    4908:	00099180 	call	9918 <__muldf3>
    490c:	020cc534 	movhi	r8,13076
    4910:	421701c4 	addi	r8,r8,23559
    4914:	024f24b4 	movhi	r9,15506
    4918:	4a698984 	addi	r9,r9,-23002
    491c:	480b883a 	mov	r5,r9
    4920:	4009883a 	mov	r4,r8
    4924:	180f883a 	mov	r7,r3
    4928:	100d883a 	mov	r6,r2
    492c:	00098240 	call	9824 <__subdf3>
    4930:	d9400717 	ldw	r5,28(sp)
    4934:	d9000617 	ldw	r4,24(sp)
    4938:	180f883a 	mov	r7,r3
    493c:	100d883a 	mov	r6,r2
    4940:	00098240 	call	9824 <__subdf3>
    4944:	02151134 	movhi	r8,21572
    4948:	420b4604 	addi	r8,r8,11544
    494c:	024ffe74 	movhi	r9,16377
    4950:	4a487ec4 	addi	r9,r9,8699
    4954:	180f883a 	mov	r7,r3
    4958:	100d883a 	mov	r6,r2
    495c:	480b883a 	mov	r5,r9
    4960:	4009883a 	mov	r4,r8
    4964:	00098240 	call	9824 <__subdf3>
    4968:	100d883a 	mov	r6,r2
    496c:	180f883a 	mov	r7,r3
    4970:	003e5e06 	br	42ec <__ieee754_acos+0x68>
    4974:	d9000617 	ldw	r4,24(sp)
    4978:	d9c00717 	ldw	r7,28(sp)
    497c:	200d883a 	mov	r6,r4
    4980:	00098240 	call	9824 <__subdf3>
    4984:	100d883a 	mov	r6,r2
    4988:	180f883a 	mov	r7,r3
    498c:	1009883a 	mov	r4,r2
    4990:	180b883a 	mov	r5,r3
    4994:	0009cdc0 	call	9cdc <__divdf3>
    4998:	100d883a 	mov	r6,r2
    499c:	180f883a 	mov	r7,r3
    49a0:	003e5206 	br	42ec <__ieee754_acos+0x68>
    49a4:	01951134 	movhi	r6,21572
    49a8:	318b4604 	addi	r6,r6,11544
    49ac:	01cffe74 	movhi	r7,16377
    49b0:	39c87ec4 	addi	r7,r7,8699
    49b4:	003e4d06 	br	42ec <__ieee754_acos+0x68>
    49b8:	d9000617 	ldw	r4,24(sp)
    49bc:	05cffc34 	movhi	r23,16368
    49c0:	002d883a 	mov	r22,zero
    49c4:	b00d883a 	mov	r6,r22
    49c8:	b80f883a 	mov	r7,r23
    49cc:	00098a40 	call	98a4 <__adddf3>
    49d0:	0011883a 	mov	r8,zero
    49d4:	024ff834 	movhi	r9,16352
    49d8:	480f883a 	mov	r7,r9
    49dc:	400d883a 	mov	r6,r8
    49e0:	180b883a 	mov	r5,r3
    49e4:	1009883a 	mov	r4,r2
    49e8:	00099180 	call	9918 <__muldf3>
    49ec:	1009883a 	mov	r4,r2
    49f0:	180b883a 	mov	r5,r3
    49f4:	1021883a 	mov	r16,r2
    49f8:	1823883a 	mov	r17,r3
    49fc:	0005dc00 	call	5dc0 <__ieee754_sqrt>
    4a00:	02037fb4 	movhi	r8,3582
    4a04:	423dc244 	addi	r8,r8,-2295
    4a08:	024fc0b4 	movhi	r9,16130
    4a0c:	4a4f7844 	addi	r9,r9,15841
    4a10:	480f883a 	mov	r7,r9
    4a14:	400d883a 	mov	r6,r8
    4a18:	8009883a 	mov	r4,r16
    4a1c:	880b883a 	mov	r5,r17
    4a20:	d8800015 	stw	r2,0(sp)
    4a24:	d8c00115 	stw	r3,4(sp)
    4a28:	00099180 	call	9918 <__muldf3>
    4a2c:	021d40b4 	movhi	r8,29954
    4a30:	422ca204 	addi	r8,r8,-19832
    4a34:	024fd2b4 	movhi	r9,16202
    4a38:	4a7bf804 	addi	r9,r9,-4128
    4a3c:	480f883a 	mov	r7,r9
    4a40:	400d883a 	mov	r6,r8
    4a44:	180b883a 	mov	r5,r3
    4a48:	1009883a 	mov	r4,r2
    4a4c:	00098a40 	call	98a4 <__adddf3>
    4a50:	180f883a 	mov	r7,r3
    4a54:	8009883a 	mov	r4,r16
    4a58:	880b883a 	mov	r5,r17
    4a5c:	100d883a 	mov	r6,r2
    4a60:	00099180 	call	9918 <__muldf3>
    4a64:	022d5a74 	movhi	r8,46441
    4a68:	4223cec4 	addi	r8,r8,-28869
    4a6c:	024fe974 	movhi	r9,16293
    4a70:	4a608a04 	addi	r9,r9,-32216
    4a74:	480f883a 	mov	r7,r9
    4a78:	400d883a 	mov	r6,r8
    4a7c:	180b883a 	mov	r5,r3
    4a80:	1009883a 	mov	r4,r2
    4a84:	00098240 	call	9824 <__subdf3>
    4a88:	180f883a 	mov	r7,r3
    4a8c:	8009883a 	mov	r4,r16
    4a90:	880b883a 	mov	r5,r17
    4a94:	100d883a 	mov	r6,r2
    4a98:	00099180 	call	9918 <__muldf3>
    4a9c:	0203a234 	movhi	r8,3720
    4aa0:	42111544 	addi	r8,r8,17493
    4aa4:	024ff2b4 	movhi	r9,16330
    4aa8:	4a705544 	addi	r9,r9,-16043
    4aac:	480f883a 	mov	r7,r9
    4ab0:	400d883a 	mov	r6,r8
    4ab4:	180b883a 	mov	r5,r3
    4ab8:	1009883a 	mov	r4,r2
    4abc:	00098a40 	call	98a4 <__adddf3>
    4ac0:	180f883a 	mov	r7,r3
    4ac4:	8009883a 	mov	r4,r16
    4ac8:	880b883a 	mov	r5,r17
    4acc:	100d883a 	mov	r6,r2
    4ad0:	00099180 	call	9918 <__muldf3>
    4ad4:	0200faf4 	movhi	r8,1003
    4ad8:	421bdf44 	addi	r8,r8,28541
    4adc:	024ff574 	movhi	r9,16341
    4ae0:	4a758484 	addi	r9,r9,-10734
    4ae4:	480f883a 	mov	r7,r9
    4ae8:	400d883a 	mov	r6,r8
    4aec:	180b883a 	mov	r5,r3
    4af0:	1009883a 	mov	r4,r2
    4af4:	00098240 	call	9824 <__subdf3>
    4af8:	180f883a 	mov	r7,r3
    4afc:	8009883a 	mov	r4,r16
    4b00:	880b883a 	mov	r5,r17
    4b04:	100d883a 	mov	r6,r2
    4b08:	00099180 	call	9918 <__muldf3>
    4b0c:	02155574 	movhi	r8,21845
    4b10:	42155544 	addi	r8,r8,21845
    4b14:	024ff174 	movhi	r9,16325
    4b18:	4a555544 	addi	r9,r9,21845
    4b1c:	480f883a 	mov	r7,r9
    4b20:	400d883a 	mov	r6,r8
    4b24:	180b883a 	mov	r5,r3
    4b28:	1009883a 	mov	r4,r2
    4b2c:	00098a40 	call	98a4 <__adddf3>
    4b30:	180f883a 	mov	r7,r3
    4b34:	8009883a 	mov	r4,r16
    4b38:	880b883a 	mov	r5,r17
    4b3c:	100d883a 	mov	r6,r2
    4b40:	00099180 	call	9918 <__muldf3>
    4b44:	022c4bf4 	movhi	r8,45359
    4b48:	4224a084 	addi	r8,r8,-28030
    4b4c:	024fed34 	movhi	r9,16308
    4b50:	4a6e3144 	addi	r9,r9,-18235
    4b54:	480f883a 	mov	r7,r9
    4b58:	400d883a 	mov	r6,r8
    4b5c:	8009883a 	mov	r4,r16
    4b60:	880b883a 	mov	r5,r17
    4b64:	1029883a 	mov	r20,r2
    4b68:	182b883a 	mov	r21,r3
    4b6c:	00099180 	call	9918 <__muldf3>
    4b70:	0206e374 	movhi	r8,7053
    4b74:	42005644 	addi	r8,r8,345
    4b78:	024ff9b4 	movhi	r9,16358
    4b7c:	4a419b04 	addi	r9,r9,1644
    4b80:	480f883a 	mov	r7,r9
    4b84:	400d883a 	mov	r6,r8
    4b88:	180b883a 	mov	r5,r3
    4b8c:	1009883a 	mov	r4,r2
    4b90:	00098240 	call	9824 <__subdf3>
    4b94:	180f883a 	mov	r7,r3
    4b98:	8009883a 	mov	r4,r16
    4b9c:	880b883a 	mov	r5,r17
    4ba0:	100d883a 	mov	r6,r2
    4ba4:	00099180 	call	9918 <__muldf3>
    4ba8:	022716b4 	movhi	r8,40026
    4bac:	4222b204 	addi	r8,r8,-30008
    4bb0:	02500034 	movhi	r9,16384
    4bb4:	4a4ab944 	addi	r9,r9,10981
    4bb8:	480f883a 	mov	r7,r9
    4bbc:	400d883a 	mov	r6,r8
    4bc0:	180b883a 	mov	r5,r3
    4bc4:	1009883a 	mov	r4,r2
    4bc8:	00098a40 	call	98a4 <__adddf3>
    4bcc:	180f883a 	mov	r7,r3
    4bd0:	8009883a 	mov	r4,r16
    4bd4:	880b883a 	mov	r5,r17
    4bd8:	100d883a 	mov	r6,r2
    4bdc:	00099180 	call	9918 <__muldf3>
    4be0:	020722b4 	movhi	r8,7306
    4be4:	420b52c4 	addi	r8,r8,11595
    4be8:	025000f4 	movhi	r9,16387
    4bec:	4a4e89c4 	addi	r9,r9,14887
    4bf0:	480f883a 	mov	r7,r9
    4bf4:	400d883a 	mov	r6,r8
    4bf8:	180b883a 	mov	r5,r3
    4bfc:	1009883a 	mov	r4,r2
    4c00:	00098240 	call	9824 <__subdf3>
    4c04:	180f883a 	mov	r7,r3
    4c08:	8009883a 	mov	r4,r16
    4c0c:	880b883a 	mov	r5,r17
    4c10:	100d883a 	mov	r6,r2
    4c14:	00099180 	call	9918 <__muldf3>
    4c18:	180b883a 	mov	r5,r3
    4c1c:	000d883a 	mov	r6,zero
    4c20:	b80f883a 	mov	r7,r23
    4c24:	1009883a 	mov	r4,r2
    4c28:	00098a40 	call	98a4 <__adddf3>
    4c2c:	180f883a 	mov	r7,r3
    4c30:	a80b883a 	mov	r5,r21
    4c34:	a009883a 	mov	r4,r20
    4c38:	100d883a 	mov	r6,r2
    4c3c:	0009cdc0 	call	9cdc <__divdf3>
    4c40:	d9000017 	ldw	r4,0(sp)
    4c44:	d9400117 	ldw	r5,4(sp)
    4c48:	180f883a 	mov	r7,r3
    4c4c:	100d883a 	mov	r6,r2
    4c50:	00099180 	call	9918 <__muldf3>
    4c54:	020cc534 	movhi	r8,13076
    4c58:	421701c4 	addi	r8,r8,23559
    4c5c:	024f24b4 	movhi	r9,15506
    4c60:	4a698984 	addi	r9,r9,-23002
    4c64:	480f883a 	mov	r7,r9
    4c68:	400d883a 	mov	r6,r8
    4c6c:	180b883a 	mov	r5,r3
    4c70:	1009883a 	mov	r4,r2
    4c74:	00098240 	call	9824 <__subdf3>
    4c78:	d9400117 	ldw	r5,4(sp)
    4c7c:	d9000017 	ldw	r4,0(sp)
    4c80:	180f883a 	mov	r7,r3
    4c84:	100d883a 	mov	r6,r2
    4c88:	00098a40 	call	98a4 <__adddf3>
    4c8c:	0011883a 	mov	r8,zero
    4c90:	02700034 	movhi	r9,49152
    4c94:	480f883a 	mov	r7,r9
    4c98:	180b883a 	mov	r5,r3
    4c9c:	1009883a 	mov	r4,r2
    4ca0:	400d883a 	mov	r6,r8
    4ca4:	00099180 	call	9918 <__muldf3>
    4ca8:	02500274 	movhi	r9,16393
    4cac:	4a487ec4 	addi	r9,r9,8699
    4cb0:	02151134 	movhi	r8,21572
    4cb4:	420b4604 	addi	r8,r8,11544
    4cb8:	180b883a 	mov	r5,r3
    4cbc:	480f883a 	mov	r7,r9
    4cc0:	1009883a 	mov	r4,r2
    4cc4:	003e6f06 	br	4684 <__ieee754_acos+0x400>
    4cc8:	01951134 	movhi	r6,21572
    4ccc:	318b4604 	addi	r6,r6,11544
    4cd0:	01d00274 	movhi	r7,16393
    4cd4:	39c87ec4 	addi	r7,r7,8699
    4cd8:	003d8406 	br	42ec <__ieee754_acos+0x68>

00004cdc <__ieee754_asin>:
    4cdc:	defff004 	addi	sp,sp,-64
    4ce0:	00a00034 	movhi	r2,32768
    4ce4:	10bfffc4 	addi	r2,r2,-1
    4ce8:	dd000a15 	stw	r20,40(sp)
    4cec:	28a8703a 	and	r20,r5,r2
    4cf0:	008ffc34 	movhi	r2,16368
    4cf4:	10bfffc4 	addi	r2,r2,-1
    4cf8:	df000e15 	stw	fp,56(sp)
    4cfc:	ddc00d15 	stw	r23,52(sp)
    4d00:	dd800c15 	stw	r22,48(sp)
    4d04:	dfc00f15 	stw	ra,60(sp)
    4d08:	dd400b15 	stw	r21,44(sp)
    4d0c:	dcc00915 	stw	r19,36(sp)
    4d10:	dc800815 	stw	r18,32(sp)
    4d14:	dc400715 	stw	r17,28(sp)
    4d18:	dc000615 	stw	r16,24(sp)
    4d1c:	202d883a 	mov	r22,r4
    4d20:	282f883a 	mov	r23,r5
    4d24:	2839883a 	mov	fp,r5
    4d28:	15002d0e 	bge	r2,r20,4de0 <__ieee754_asin+0x104>
    4d2c:	01300434 	movhi	r4,49168
    4d30:	a109883a 	add	r4,r20,r4
    4d34:	2588b03a 	or	r4,r4,r22
    4d38:	2000ce1e 	bne	r4,zero,5074 <__ieee754_asin+0x398>
    4d3c:	00951134 	movhi	r2,21572
    4d40:	108b4604 	addi	r2,r2,11544
    4d44:	00cffe74 	movhi	r3,16377
    4d48:	18c87ec4 	addi	r3,r3,8699
    4d4c:	180f883a 	mov	r7,r3
    4d50:	b009883a 	mov	r4,r22
    4d54:	100d883a 	mov	r6,r2
    4d58:	00099180 	call	9918 <__muldf3>
    4d5c:	020cc534 	movhi	r8,13076
    4d60:	421701c4 	addi	r8,r8,23559
    4d64:	024f24b4 	movhi	r9,15506
    4d68:	4a698984 	addi	r9,r9,-23002
    4d6c:	b80b883a 	mov	r5,r23
    4d70:	480f883a 	mov	r7,r9
    4d74:	b009883a 	mov	r4,r22
    4d78:	400d883a 	mov	r6,r8
    4d7c:	1021883a 	mov	r16,r2
    4d80:	1823883a 	mov	r17,r3
    4d84:	00099180 	call	9918 <__muldf3>
    4d88:	1011883a 	mov	r8,r2
    4d8c:	880b883a 	mov	r5,r17
    4d90:	180f883a 	mov	r7,r3
    4d94:	8009883a 	mov	r4,r16
    4d98:	400d883a 	mov	r6,r8
    4d9c:	00098a40 	call	98a4 <__adddf3>
    4da0:	102d883a 	mov	r22,r2
    4da4:	182f883a 	mov	r23,r3
    4da8:	b005883a 	mov	r2,r22
    4dac:	b807883a 	mov	r3,r23
    4db0:	dfc00f17 	ldw	ra,60(sp)
    4db4:	df000e17 	ldw	fp,56(sp)
    4db8:	ddc00d17 	ldw	r23,52(sp)
    4dbc:	dd800c17 	ldw	r22,48(sp)
    4dc0:	dd400b17 	ldw	r21,44(sp)
    4dc4:	dd000a17 	ldw	r20,40(sp)
    4dc8:	dcc00917 	ldw	r19,36(sp)
    4dcc:	dc800817 	ldw	r18,32(sp)
    4dd0:	dc400717 	ldw	r17,28(sp)
    4dd4:	dc000617 	ldw	r16,24(sp)
    4dd8:	dec01004 	addi	sp,sp,64
    4ddc:	f800283a 	ret
    4de0:	008ff834 	movhi	r2,16352
    4de4:	10bfffc4 	addi	r2,r2,-1
    4de8:	1500bd16 	blt	r2,r20,50e0 <__ieee754_asin+0x404>
    4dec:	008f9034 	movhi	r2,15936
    4df0:	10bfffc4 	addi	r2,r2,-1
    4df4:	1500ab0e 	bge	r2,r20,50a4 <__ieee754_asin+0x3c8>
    4df8:	280f883a 	mov	r7,r5
    4dfc:	b00d883a 	mov	r6,r22
    4e00:	00099180 	call	9918 <__muldf3>
    4e04:	1021883a 	mov	r16,r2
    4e08:	1823883a 	mov	r17,r3
    4e0c:	00837fb4 	movhi	r2,3582
    4e10:	10bdc244 	addi	r2,r2,-2295
    4e14:	00cfc0b4 	movhi	r3,16130
    4e18:	18cf7844 	addi	r3,r3,15841
    4e1c:	180f883a 	mov	r7,r3
    4e20:	8009883a 	mov	r4,r16
    4e24:	880b883a 	mov	r5,r17
    4e28:	100d883a 	mov	r6,r2
    4e2c:	00099180 	call	9918 <__muldf3>
    4e30:	021d40b4 	movhi	r8,29954
    4e34:	422ca204 	addi	r8,r8,-19832
    4e38:	024fd2b4 	movhi	r9,16202
    4e3c:	4a7bf804 	addi	r9,r9,-4128
    4e40:	480f883a 	mov	r7,r9
    4e44:	400d883a 	mov	r6,r8
    4e48:	180b883a 	mov	r5,r3
    4e4c:	1009883a 	mov	r4,r2
    4e50:	00098a40 	call	98a4 <__adddf3>
    4e54:	180f883a 	mov	r7,r3
    4e58:	8009883a 	mov	r4,r16
    4e5c:	880b883a 	mov	r5,r17
    4e60:	100d883a 	mov	r6,r2
    4e64:	00099180 	call	9918 <__muldf3>
    4e68:	022d5a74 	movhi	r8,46441
    4e6c:	4223cec4 	addi	r8,r8,-28869
    4e70:	024fe974 	movhi	r9,16293
    4e74:	4a608a04 	addi	r9,r9,-32216
    4e78:	480f883a 	mov	r7,r9
    4e7c:	400d883a 	mov	r6,r8
    4e80:	180b883a 	mov	r5,r3
    4e84:	1009883a 	mov	r4,r2
    4e88:	00098240 	call	9824 <__subdf3>
    4e8c:	180f883a 	mov	r7,r3
    4e90:	8009883a 	mov	r4,r16
    4e94:	880b883a 	mov	r5,r17
    4e98:	100d883a 	mov	r6,r2
    4e9c:	00099180 	call	9918 <__muldf3>
    4ea0:	0203a234 	movhi	r8,3720
    4ea4:	42111544 	addi	r8,r8,17493
    4ea8:	024ff2b4 	movhi	r9,16330
    4eac:	4a705544 	addi	r9,r9,-16043
    4eb0:	480f883a 	mov	r7,r9
    4eb4:	400d883a 	mov	r6,r8
    4eb8:	180b883a 	mov	r5,r3
    4ebc:	1009883a 	mov	r4,r2
    4ec0:	00098a40 	call	98a4 <__adddf3>
    4ec4:	180f883a 	mov	r7,r3
    4ec8:	8009883a 	mov	r4,r16
    4ecc:	880b883a 	mov	r5,r17
    4ed0:	100d883a 	mov	r6,r2
    4ed4:	00099180 	call	9918 <__muldf3>
    4ed8:	0200faf4 	movhi	r8,1003
    4edc:	421bdf44 	addi	r8,r8,28541
    4ee0:	024ff574 	movhi	r9,16341
    4ee4:	4a758484 	addi	r9,r9,-10734
    4ee8:	480f883a 	mov	r7,r9
    4eec:	400d883a 	mov	r6,r8
    4ef0:	180b883a 	mov	r5,r3
    4ef4:	1009883a 	mov	r4,r2
    4ef8:	00098240 	call	9824 <__subdf3>
    4efc:	180f883a 	mov	r7,r3
    4f00:	8009883a 	mov	r4,r16
    4f04:	880b883a 	mov	r5,r17
    4f08:	100d883a 	mov	r6,r2
    4f0c:	00099180 	call	9918 <__muldf3>
    4f10:	02155574 	movhi	r8,21845
    4f14:	42155544 	addi	r8,r8,21845
    4f18:	024ff174 	movhi	r9,16325
    4f1c:	4a555544 	addi	r9,r9,21845
    4f20:	480f883a 	mov	r7,r9
    4f24:	400d883a 	mov	r6,r8
    4f28:	180b883a 	mov	r5,r3
    4f2c:	1009883a 	mov	r4,r2
    4f30:	00098a40 	call	98a4 <__adddf3>
    4f34:	180f883a 	mov	r7,r3
    4f38:	8009883a 	mov	r4,r16
    4f3c:	880b883a 	mov	r5,r17
    4f40:	100d883a 	mov	r6,r2
    4f44:	00099180 	call	9918 <__muldf3>
    4f48:	022c4bf4 	movhi	r8,45359
    4f4c:	4224a084 	addi	r8,r8,-28030
    4f50:	024fed34 	movhi	r9,16308
    4f54:	4a6e3144 	addi	r9,r9,-18235
    4f58:	480f883a 	mov	r7,r9
    4f5c:	400d883a 	mov	r6,r8
    4f60:	8009883a 	mov	r4,r16
    4f64:	880b883a 	mov	r5,r17
    4f68:	1029883a 	mov	r20,r2
    4f6c:	182b883a 	mov	r21,r3
    4f70:	00099180 	call	9918 <__muldf3>
    4f74:	0206e374 	movhi	r8,7053
    4f78:	42005644 	addi	r8,r8,345
    4f7c:	024ff9b4 	movhi	r9,16358
    4f80:	4a419b04 	addi	r9,r9,1644
    4f84:	480f883a 	mov	r7,r9
    4f88:	400d883a 	mov	r6,r8
    4f8c:	180b883a 	mov	r5,r3
    4f90:	1009883a 	mov	r4,r2
    4f94:	00098240 	call	9824 <__subdf3>
    4f98:	180f883a 	mov	r7,r3
    4f9c:	8009883a 	mov	r4,r16
    4fa0:	880b883a 	mov	r5,r17
    4fa4:	100d883a 	mov	r6,r2
    4fa8:	00099180 	call	9918 <__muldf3>
    4fac:	022716b4 	movhi	r8,40026
    4fb0:	4222b204 	addi	r8,r8,-30008
    4fb4:	02500034 	movhi	r9,16384
    4fb8:	4a4ab944 	addi	r9,r9,10981
    4fbc:	480f883a 	mov	r7,r9
    4fc0:	400d883a 	mov	r6,r8
    4fc4:	180b883a 	mov	r5,r3
    4fc8:	1009883a 	mov	r4,r2
    4fcc:	00098a40 	call	98a4 <__adddf3>
    4fd0:	180f883a 	mov	r7,r3
    4fd4:	8009883a 	mov	r4,r16
    4fd8:	880b883a 	mov	r5,r17
    4fdc:	100d883a 	mov	r6,r2
    4fe0:	00099180 	call	9918 <__muldf3>
    4fe4:	020722b4 	movhi	r8,7306
    4fe8:	420b52c4 	addi	r8,r8,11595
    4fec:	025000f4 	movhi	r9,16387
    4ff0:	4a4e89c4 	addi	r9,r9,14887
    4ff4:	480f883a 	mov	r7,r9
    4ff8:	400d883a 	mov	r6,r8
    4ffc:	180b883a 	mov	r5,r3
    5000:	1009883a 	mov	r4,r2
    5004:	00098240 	call	9824 <__subdf3>
    5008:	180f883a 	mov	r7,r3
    500c:	8009883a 	mov	r4,r16
    5010:	880b883a 	mov	r5,r17
    5014:	100d883a 	mov	r6,r2
    5018:	00099180 	call	9918 <__muldf3>
    501c:	0011883a 	mov	r8,zero
    5020:	024ffc34 	movhi	r9,16368
    5024:	400d883a 	mov	r6,r8
    5028:	480f883a 	mov	r7,r9
    502c:	180b883a 	mov	r5,r3
    5030:	1009883a 	mov	r4,r2
    5034:	00098a40 	call	98a4 <__adddf3>
    5038:	180f883a 	mov	r7,r3
    503c:	a80b883a 	mov	r5,r21
    5040:	a009883a 	mov	r4,r20
    5044:	100d883a 	mov	r6,r2
    5048:	0009cdc0 	call	9cdc <__divdf3>
    504c:	180f883a 	mov	r7,r3
    5050:	b009883a 	mov	r4,r22
    5054:	b80b883a 	mov	r5,r23
    5058:	100d883a 	mov	r6,r2
    505c:	00099180 	call	9918 <__muldf3>
    5060:	1011883a 	mov	r8,r2
    5064:	b80b883a 	mov	r5,r23
    5068:	180f883a 	mov	r7,r3
    506c:	b009883a 	mov	r4,r22
    5070:	003f4906 	br	4d98 <__ieee754_asin+0xbc>
    5074:	280f883a 	mov	r7,r5
    5078:	b009883a 	mov	r4,r22
    507c:	b00d883a 	mov	r6,r22
    5080:	00098240 	call	9824 <__subdf3>
    5084:	1009883a 	mov	r4,r2
    5088:	180b883a 	mov	r5,r3
    508c:	100d883a 	mov	r6,r2
    5090:	180f883a 	mov	r7,r3
    5094:	0009cdc0 	call	9cdc <__divdf3>
    5098:	102d883a 	mov	r22,r2
    509c:	182f883a 	mov	r23,r3
    50a0:	003f4106 	br	4da8 <__ieee754_asin+0xcc>
    50a4:	00a20034 	movhi	r2,34816
    50a8:	109d6704 	addi	r2,r2,30108
    50ac:	00df8e34 	movhi	r3,32312
    50b0:	18f90f04 	addi	r3,r3,-7108
    50b4:	180f883a 	mov	r7,r3
    50b8:	100d883a 	mov	r6,r2
    50bc:	00098a40 	call	98a4 <__adddf3>
    50c0:	0011883a 	mov	r8,zero
    50c4:	024ffc34 	movhi	r9,16368
    50c8:	180b883a 	mov	r5,r3
    50cc:	480f883a 	mov	r7,r9
    50d0:	1009883a 	mov	r4,r2
    50d4:	400d883a 	mov	r6,r8
    50d8:	0009fbc0 	call	9fbc <__gtdf2>
    50dc:	00bf3216 	blt	zero,r2,4da8 <__ieee754_asin+0xcc>
    50e0:	b80b883a 	mov	r5,r23
    50e4:	b009883a 	mov	r4,r22
    50e8:	00077500 	call	7750 <fabs>
    50ec:	044ffc34 	movhi	r17,16368
    50f0:	0021883a 	mov	r16,zero
    50f4:	180f883a 	mov	r7,r3
    50f8:	8009883a 	mov	r4,r16
    50fc:	880b883a 	mov	r5,r17
    5100:	100d883a 	mov	r6,r2
    5104:	00098240 	call	9824 <__subdf3>
    5108:	0011883a 	mov	r8,zero
    510c:	024ff834 	movhi	r9,16352
    5110:	480f883a 	mov	r7,r9
    5114:	400d883a 	mov	r6,r8
    5118:	180b883a 	mov	r5,r3
    511c:	1009883a 	mov	r4,r2
    5120:	00099180 	call	9918 <__muldf3>
    5124:	d8c00515 	stw	r3,20(sp)
    5128:	d8800015 	stw	r2,0(sp)
    512c:	d9000017 	ldw	r4,0(sp)
    5130:	d9400517 	ldw	r5,20(sp)
    5134:	d8800415 	stw	r2,16(sp)
    5138:	d8c00115 	stw	r3,4(sp)
    513c:	00837fb4 	movhi	r2,3582
    5140:	10bdc244 	addi	r2,r2,-2295
    5144:	00cfc0b4 	movhi	r3,16130
    5148:	18cf7844 	addi	r3,r3,15841
    514c:	180f883a 	mov	r7,r3
    5150:	100d883a 	mov	r6,r2
    5154:	00099180 	call	9918 <__muldf3>
    5158:	021d40b4 	movhi	r8,29954
    515c:	422ca204 	addi	r8,r8,-19832
    5160:	024fd2b4 	movhi	r9,16202
    5164:	4a7bf804 	addi	r9,r9,-4128
    5168:	480f883a 	mov	r7,r9
    516c:	400d883a 	mov	r6,r8
    5170:	180b883a 	mov	r5,r3
    5174:	1009883a 	mov	r4,r2
    5178:	00098a40 	call	98a4 <__adddf3>
    517c:	d9000017 	ldw	r4,0(sp)
    5180:	d9400517 	ldw	r5,20(sp)
    5184:	180f883a 	mov	r7,r3
    5188:	100d883a 	mov	r6,r2
    518c:	00099180 	call	9918 <__muldf3>
    5190:	022d5a74 	movhi	r8,46441
    5194:	4223cec4 	addi	r8,r8,-28869
    5198:	024fe974 	movhi	r9,16293
    519c:	4a608a04 	addi	r9,r9,-32216
    51a0:	480f883a 	mov	r7,r9
    51a4:	400d883a 	mov	r6,r8
    51a8:	180b883a 	mov	r5,r3
    51ac:	1009883a 	mov	r4,r2
    51b0:	00098240 	call	9824 <__subdf3>
    51b4:	d9000017 	ldw	r4,0(sp)
    51b8:	d9400517 	ldw	r5,20(sp)
    51bc:	180f883a 	mov	r7,r3
    51c0:	100d883a 	mov	r6,r2
    51c4:	00099180 	call	9918 <__muldf3>
    51c8:	0203a234 	movhi	r8,3720
    51cc:	42111544 	addi	r8,r8,17493
    51d0:	024ff2b4 	movhi	r9,16330
    51d4:	4a705544 	addi	r9,r9,-16043
    51d8:	480f883a 	mov	r7,r9
    51dc:	400d883a 	mov	r6,r8
    51e0:	180b883a 	mov	r5,r3
    51e4:	1009883a 	mov	r4,r2
    51e8:	00098a40 	call	98a4 <__adddf3>
    51ec:	d9000017 	ldw	r4,0(sp)
    51f0:	d9400517 	ldw	r5,20(sp)
    51f4:	180f883a 	mov	r7,r3
    51f8:	100d883a 	mov	r6,r2
    51fc:	00099180 	call	9918 <__muldf3>
    5200:	0200faf4 	movhi	r8,1003
    5204:	421bdf44 	addi	r8,r8,28541
    5208:	024ff574 	movhi	r9,16341
    520c:	4a758484 	addi	r9,r9,-10734
    5210:	480f883a 	mov	r7,r9
    5214:	400d883a 	mov	r6,r8
    5218:	180b883a 	mov	r5,r3
    521c:	1009883a 	mov	r4,r2
    5220:	00098240 	call	9824 <__subdf3>
    5224:	d9000017 	ldw	r4,0(sp)
    5228:	d9400517 	ldw	r5,20(sp)
    522c:	180f883a 	mov	r7,r3
    5230:	100d883a 	mov	r6,r2
    5234:	00099180 	call	9918 <__muldf3>
    5238:	02155574 	movhi	r8,21845
    523c:	42155544 	addi	r8,r8,21845
    5240:	024ff174 	movhi	r9,16325
    5244:	4a555544 	addi	r9,r9,21845
    5248:	480f883a 	mov	r7,r9
    524c:	400d883a 	mov	r6,r8
    5250:	180b883a 	mov	r5,r3
    5254:	1009883a 	mov	r4,r2
    5258:	00098a40 	call	98a4 <__adddf3>
    525c:	d9000017 	ldw	r4,0(sp)
    5260:	d9400517 	ldw	r5,20(sp)
    5264:	180f883a 	mov	r7,r3
    5268:	100d883a 	mov	r6,r2
    526c:	00099180 	call	9918 <__muldf3>
    5270:	d9000017 	ldw	r4,0(sp)
    5274:	d9400517 	ldw	r5,20(sp)
    5278:	022c4bf4 	movhi	r8,45359
    527c:	4224a084 	addi	r8,r8,-28030
    5280:	024fed34 	movhi	r9,16308
    5284:	4a6e3144 	addi	r9,r9,-18235
    5288:	480f883a 	mov	r7,r9
    528c:	400d883a 	mov	r6,r8
    5290:	1025883a 	mov	r18,r2
    5294:	1827883a 	mov	r19,r3
    5298:	00099180 	call	9918 <__muldf3>
    529c:	0206e374 	movhi	r8,7053
    52a0:	42005644 	addi	r8,r8,345
    52a4:	024ff9b4 	movhi	r9,16358
    52a8:	4a419b04 	addi	r9,r9,1644
    52ac:	480f883a 	mov	r7,r9
    52b0:	400d883a 	mov	r6,r8
    52b4:	180b883a 	mov	r5,r3
    52b8:	1009883a 	mov	r4,r2
    52bc:	00098240 	call	9824 <__subdf3>
    52c0:	d9000017 	ldw	r4,0(sp)
    52c4:	d9400517 	ldw	r5,20(sp)
    52c8:	180f883a 	mov	r7,r3
    52cc:	100d883a 	mov	r6,r2
    52d0:	00099180 	call	9918 <__muldf3>
    52d4:	022716b4 	movhi	r8,40026
    52d8:	4222b204 	addi	r8,r8,-30008
    52dc:	02500034 	movhi	r9,16384
    52e0:	4a4ab944 	addi	r9,r9,10981
    52e4:	480f883a 	mov	r7,r9
    52e8:	400d883a 	mov	r6,r8
    52ec:	180b883a 	mov	r5,r3
    52f0:	1009883a 	mov	r4,r2
    52f4:	00098a40 	call	98a4 <__adddf3>
    52f8:	d9000017 	ldw	r4,0(sp)
    52fc:	d9400517 	ldw	r5,20(sp)
    5300:	180f883a 	mov	r7,r3
    5304:	100d883a 	mov	r6,r2
    5308:	00099180 	call	9918 <__muldf3>
    530c:	020722b4 	movhi	r8,7306
    5310:	420b52c4 	addi	r8,r8,11595
    5314:	025000f4 	movhi	r9,16387
    5318:	4a4e89c4 	addi	r9,r9,14887
    531c:	480f883a 	mov	r7,r9
    5320:	400d883a 	mov	r6,r8
    5324:	180b883a 	mov	r5,r3
    5328:	1009883a 	mov	r4,r2
    532c:	00098240 	call	9824 <__subdf3>
    5330:	d9000017 	ldw	r4,0(sp)
    5334:	d9400517 	ldw	r5,20(sp)
    5338:	180f883a 	mov	r7,r3
    533c:	100d883a 	mov	r6,r2
    5340:	00099180 	call	9918 <__muldf3>
    5344:	180b883a 	mov	r5,r3
    5348:	000d883a 	mov	r6,zero
    534c:	880f883a 	mov	r7,r17
    5350:	1009883a 	mov	r4,r2
    5354:	00098a40 	call	98a4 <__adddf3>
    5358:	d9000017 	ldw	r4,0(sp)
    535c:	d9400517 	ldw	r5,20(sp)
    5360:	102d883a 	mov	r22,r2
    5364:	182f883a 	mov	r23,r3
    5368:	0005dc00 	call	5dc0 <__ieee754_sqrt>
    536c:	d8800215 	stw	r2,8(sp)
    5370:	008ffbf4 	movhi	r2,16367
    5374:	108ccc84 	addi	r2,r2,13106
    5378:	9009883a 	mov	r4,r18
    537c:	b00d883a 	mov	r6,r22
    5380:	d8c00315 	stw	r3,12(sp)
    5384:	980b883a 	mov	r5,r19
    5388:	b80f883a 	mov	r7,r23
    538c:	1500260e 	bge	r2,r20,5428 <__ieee754_asin+0x74c>
    5390:	0009cdc0 	call	9cdc <__divdf3>
    5394:	d9000217 	ldw	r4,8(sp)
    5398:	d9400317 	ldw	r5,12(sp)
    539c:	180f883a 	mov	r7,r3
    53a0:	100d883a 	mov	r6,r2
    53a4:	00099180 	call	9918 <__muldf3>
    53a8:	d9400317 	ldw	r5,12(sp)
    53ac:	d9000217 	ldw	r4,8(sp)
    53b0:	180f883a 	mov	r7,r3
    53b4:	100d883a 	mov	r6,r2
    53b8:	00098a40 	call	98a4 <__adddf3>
    53bc:	180f883a 	mov	r7,r3
    53c0:	1009883a 	mov	r4,r2
    53c4:	180b883a 	mov	r5,r3
    53c8:	100d883a 	mov	r6,r2
    53cc:	00098a40 	call	98a4 <__adddf3>
    53d0:	020cc534 	movhi	r8,13076
    53d4:	421701c4 	addi	r8,r8,23559
    53d8:	024f24b4 	movhi	r9,15506
    53dc:	4a698984 	addi	r9,r9,-23002
    53e0:	480f883a 	mov	r7,r9
    53e4:	400d883a 	mov	r6,r8
    53e8:	180b883a 	mov	r5,r3
    53ec:	1009883a 	mov	r4,r2
    53f0:	00098240 	call	9824 <__subdf3>
    53f4:	02151134 	movhi	r8,21572
    53f8:	420b4604 	addi	r8,r8,11544
    53fc:	024ffe74 	movhi	r9,16377
    5400:	4a487ec4 	addi	r9,r9,8699
    5404:	480b883a 	mov	r5,r9
    5408:	180f883a 	mov	r7,r3
    540c:	4009883a 	mov	r4,r8
    5410:	100d883a 	mov	r6,r2
    5414:	00098240 	call	9824 <__subdf3>
    5418:	07005c0e 	bge	zero,fp,558c <__ieee754_asin+0x8b0>
    541c:	102d883a 	mov	r22,r2
    5420:	182f883a 	mov	r23,r3
    5424:	003e6006 	br	4da8 <__ieee754_asin+0xcc>
    5428:	980b883a 	mov	r5,r19
    542c:	b80f883a 	mov	r7,r23
    5430:	0009cdc0 	call	9cdc <__divdf3>
    5434:	d9000217 	ldw	r4,8(sp)
    5438:	d9400317 	ldw	r5,12(sp)
    543c:	1021883a 	mov	r16,r2
    5440:	200d883a 	mov	r6,r4
    5444:	280f883a 	mov	r7,r5
    5448:	1823883a 	mov	r17,r3
    544c:	00098a40 	call	98a4 <__adddf3>
    5450:	d9000317 	ldw	r4,12(sp)
    5454:	0029883a 	mov	r20,zero
    5458:	880b883a 	mov	r5,r17
    545c:	2027883a 	mov	r19,r4
    5460:	180f883a 	mov	r7,r3
    5464:	8009883a 	mov	r4,r16
    5468:	100d883a 	mov	r6,r2
    546c:	00099180 	call	9918 <__muldf3>
    5470:	980b883a 	mov	r5,r19
    5474:	980f883a 	mov	r7,r19
    5478:	a009883a 	mov	r4,r20
    547c:	a00d883a 	mov	r6,r20
    5480:	102d883a 	mov	r22,r2
    5484:	182f883a 	mov	r23,r3
    5488:	00099180 	call	9918 <__muldf3>
    548c:	d9000017 	ldw	r4,0(sp)
    5490:	d9400517 	ldw	r5,20(sp)
    5494:	180f883a 	mov	r7,r3
    5498:	100d883a 	mov	r6,r2
    549c:	00098240 	call	9824 <__subdf3>
    54a0:	d9400317 	ldw	r5,12(sp)
    54a4:	d9000217 	ldw	r4,8(sp)
    54a8:	980f883a 	mov	r7,r19
    54ac:	a00d883a 	mov	r6,r20
    54b0:	1021883a 	mov	r16,r2
    54b4:	1823883a 	mov	r17,r3
    54b8:	00098a40 	call	98a4 <__adddf3>
    54bc:	180f883a 	mov	r7,r3
    54c0:	880b883a 	mov	r5,r17
    54c4:	8009883a 	mov	r4,r16
    54c8:	100d883a 	mov	r6,r2
    54cc:	0009cdc0 	call	9cdc <__divdf3>
    54d0:	04700034 	movhi	r17,49152
    54d4:	0021883a 	mov	r16,zero
    54d8:	800d883a 	mov	r6,r16
    54dc:	880f883a 	mov	r7,r17
    54e0:	180b883a 	mov	r5,r3
    54e4:	1009883a 	mov	r4,r2
    54e8:	00099180 	call	9918 <__muldf3>
    54ec:	020cc534 	movhi	r8,13076
    54f0:	421701c4 	addi	r8,r8,23559
    54f4:	024f24b4 	movhi	r9,15506
    54f8:	4a698984 	addi	r9,r9,-23002
    54fc:	480f883a 	mov	r7,r9
    5500:	400d883a 	mov	r6,r8
    5504:	180b883a 	mov	r5,r3
    5508:	1009883a 	mov	r4,r2
    550c:	00098a40 	call	98a4 <__adddf3>
    5510:	180f883a 	mov	r7,r3
    5514:	b80b883a 	mov	r5,r23
    5518:	b009883a 	mov	r4,r22
    551c:	100d883a 	mov	r6,r2
    5520:	00098240 	call	9824 <__subdf3>
    5524:	880f883a 	mov	r7,r17
    5528:	980b883a 	mov	r5,r19
    552c:	000d883a 	mov	r6,zero
    5530:	a009883a 	mov	r4,r20
    5534:	1025883a 	mov	r18,r2
    5538:	1827883a 	mov	r19,r3
    553c:	04151134 	movhi	r16,21572
    5540:	840b4604 	addi	r16,r16,11544
    5544:	00099180 	call	9918 <__muldf3>
    5548:	044ffa74 	movhi	r17,16361
    554c:	8c487ec4 	addi	r17,r17,8699
    5550:	180b883a 	mov	r5,r3
    5554:	1009883a 	mov	r4,r2
    5558:	800d883a 	mov	r6,r16
    555c:	880f883a 	mov	r7,r17
    5560:	00098a40 	call	98a4 <__adddf3>
    5564:	180f883a 	mov	r7,r3
    5568:	980b883a 	mov	r5,r19
    556c:	9009883a 	mov	r4,r18
    5570:	100d883a 	mov	r6,r2
    5574:	00098240 	call	9824 <__subdf3>
    5578:	180f883a 	mov	r7,r3
    557c:	8009883a 	mov	r4,r16
    5580:	880b883a 	mov	r5,r17
    5584:	100d883a 	mov	r6,r2
    5588:	003fa206 	br	5414 <__ieee754_asin+0x738>
    558c:	102d883a 	mov	r22,r2
    5590:	1de0003c 	xorhi	r23,r3,32768
    5594:	003e0406 	br	4da8 <__ieee754_asin+0xcc>

00005598 <__ieee754_rem_pio2>:
    5598:	deffe304 	addi	sp,sp,-116
    559c:	00a00034 	movhi	r2,32768
    55a0:	10bfffc4 	addi	r2,r2,-1
    55a4:	dd801915 	stw	r22,100(sp)
    55a8:	28ac703a 	and	r22,r5,r2
    55ac:	008ffa74 	movhi	r2,16361
    55b0:	10887ec4 	addi	r2,r2,8699
    55b4:	df001b15 	stw	fp,108(sp)
    55b8:	dfc01c15 	stw	ra,112(sp)
    55bc:	ddc01a15 	stw	r23,104(sp)
    55c0:	dd401815 	stw	r21,96(sp)
    55c4:	dd001715 	stw	r20,92(sp)
    55c8:	dcc01615 	stw	r19,88(sp)
    55cc:	dc801515 	stw	r18,84(sp)
    55d0:	dc401415 	stw	r17,80(sp)
    55d4:	dc001315 	stw	r16,76(sp)
    55d8:	2013883a 	mov	r9,r4
    55dc:	d9400a15 	stw	r5,40(sp)
    55e0:	3039883a 	mov	fp,r6
    55e4:	15801216 	blt	r2,r22,5630 <__ieee754_rem_pio2+0x98>
    55e8:	e1400115 	stw	r5,4(fp)
    55ec:	30000315 	stw	zero,12(r6)
    55f0:	e1000015 	stw	r4,0(fp)
    55f4:	d8000b15 	stw	zero,44(sp)
    55f8:	30000215 	stw	zero,8(r6)
    55fc:	d8800b17 	ldw	r2,44(sp)
    5600:	dfc01c17 	ldw	ra,112(sp)
    5604:	df001b17 	ldw	fp,108(sp)
    5608:	ddc01a17 	ldw	r23,104(sp)
    560c:	dd801917 	ldw	r22,100(sp)
    5610:	dd401817 	ldw	r21,96(sp)
    5614:	dd001717 	ldw	r20,92(sp)
    5618:	dcc01617 	ldw	r19,88(sp)
    561c:	dc801517 	ldw	r18,84(sp)
    5620:	dc401417 	ldw	r17,80(sp)
    5624:	dc001317 	ldw	r16,76(sp)
    5628:	dec01d04 	addi	sp,sp,116
    562c:	f800283a 	ret
    5630:	009000f4 	movhi	r2,16387
    5634:	10b65ec4 	addi	r2,r2,-9861
    5638:	15800f0e 	bge	r2,r22,5678 <__ieee754_rem_pio2+0xe0>
    563c:	00904e74 	movhi	r2,16697
    5640:	10887ec4 	addi	r2,r2,8699
    5644:	1580330e 	bge	r2,r22,5714 <__ieee754_rem_pio2+0x17c>
    5648:	009ffc34 	movhi	r2,32752
    564c:	10bfffc4 	addi	r2,r2,-1
    5650:	1580fe0e 	bge	r2,r22,5a4c <__ieee754_rem_pio2+0x4b4>
    5654:	280f883a 	mov	r7,r5
    5658:	480d883a 	mov	r6,r9
    565c:	00098240 	call	9824 <__subdf3>
    5660:	e0c00115 	stw	r3,4(fp)
    5664:	d8000b15 	stw	zero,44(sp)
    5668:	e0800015 	stw	r2,0(fp)
    566c:	e0800215 	stw	r2,8(fp)
    5670:	e0c00315 	stw	r3,12(fp)
    5674:	003fe106 	br	55fc <__ieee754_rem_pio2+0x64>
    5678:	d9000a17 	ldw	r4,40(sp)
    567c:	0100ce0e 	bge	zero,r4,59b8 <__ieee754_rem_pio2+0x420>
    5680:	04151034 	movhi	r16,21568
    5684:	044ffe74 	movhi	r17,16377
    5688:	8c487ec4 	addi	r17,r17,8699
    568c:	4809883a 	mov	r4,r9
    5690:	800d883a 	mov	r6,r16
    5694:	880f883a 	mov	r7,r17
    5698:	00098240 	call	9824 <__subdf3>
    569c:	1025883a 	mov	r18,r2
    56a0:	1827883a 	mov	r19,r3
    56a4:	b4413c26 	beq	r22,r17,5b98 <__ieee754_rem_pio2+0x600>
    56a8:	040698b4 	movhi	r16,6754
    56ac:	8418cc44 	addi	r16,r16,25393
    56b0:	044f7474 	movhi	r17,15825
    56b4:	8c6d1844 	addi	r17,r17,-19359
    56b8:	1009883a 	mov	r4,r2
    56bc:	180b883a 	mov	r5,r3
    56c0:	800d883a 	mov	r6,r16
    56c4:	880f883a 	mov	r7,r17
    56c8:	00098240 	call	9824 <__subdf3>
    56cc:	100d883a 	mov	r6,r2
    56d0:	9009883a 	mov	r4,r18
    56d4:	980b883a 	mov	r5,r19
    56d8:	180f883a 	mov	r7,r3
    56dc:	e0800015 	stw	r2,0(fp)
    56e0:	e0c00115 	stw	r3,4(fp)
    56e4:	00098240 	call	9824 <__subdf3>
    56e8:	1009883a 	mov	r4,r2
    56ec:	800d883a 	mov	r6,r16
    56f0:	880f883a 	mov	r7,r17
    56f4:	180b883a 	mov	r5,r3
    56f8:	00098240 	call	9824 <__subdf3>
    56fc:	1009883a 	mov	r4,r2
    5700:	00800044 	movi	r2,1
    5704:	d8800b15 	stw	r2,44(sp)
    5708:	e0c00315 	stw	r3,12(fp)
    570c:	e1000215 	stw	r4,8(fp)
    5710:	003fba06 	br	55fc <__ieee754_rem_pio2+0x64>
    5714:	00077500 	call	7750 <fabs>
    5718:	021b72b4 	movhi	r8,28106
    571c:	423220c4 	addi	r8,r8,-14205
    5720:	024ff934 	movhi	r9,16356
    5724:	4a57cc04 	addi	r9,r9,24368
    5728:	480f883a 	mov	r7,r9
    572c:	400d883a 	mov	r6,r8
    5730:	1009883a 	mov	r4,r2
    5734:	180b883a 	mov	r5,r3
    5738:	1025883a 	mov	r18,r2
    573c:	1827883a 	mov	r19,r3
    5740:	00099180 	call	9918 <__muldf3>
    5744:	0011883a 	mov	r8,zero
    5748:	024ff834 	movhi	r9,16352
    574c:	480f883a 	mov	r7,r9
    5750:	400d883a 	mov	r6,r8
    5754:	180b883a 	mov	r5,r3
    5758:	1009883a 	mov	r4,r2
    575c:	00098a40 	call	98a4 <__adddf3>
    5760:	180b883a 	mov	r5,r3
    5764:	1009883a 	mov	r4,r2
    5768:	000a24c0 	call	a24c <__fixdfsi>
    576c:	1009883a 	mov	r4,r2
    5770:	d8800b15 	stw	r2,44(sp)
    5774:	000a1540 	call	a154 <__floatsidf>
    5778:	1823883a 	mov	r17,r3
    577c:	1009883a 	mov	r4,r2
    5780:	d8800c15 	stw	r2,48(sp)
    5784:	00effe74 	movhi	r3,49145
    5788:	18c87ec4 	addi	r3,r3,8699
    578c:	00951034 	movhi	r2,21568
    5790:	880b883a 	mov	r5,r17
    5794:	180f883a 	mov	r7,r3
    5798:	100d883a 	mov	r6,r2
    579c:	dc400d15 	stw	r17,52(sp)
    57a0:	00099180 	call	9918 <__muldf3>
    57a4:	180f883a 	mov	r7,r3
    57a8:	980b883a 	mov	r5,r19
    57ac:	9009883a 	mov	r4,r18
    57b0:	100d883a 	mov	r6,r2
    57b4:	00098a40 	call	98a4 <__adddf3>
    57b8:	d9000c17 	ldw	r4,48(sp)
    57bc:	020698b4 	movhi	r8,6754
    57c0:	4218cc44 	addi	r8,r8,25393
    57c4:	024f7474 	movhi	r9,15825
    57c8:	4a6d1844 	addi	r9,r9,-19359
    57cc:	880b883a 	mov	r5,r17
    57d0:	480f883a 	mov	r7,r9
    57d4:	400d883a 	mov	r6,r8
    57d8:	1025883a 	mov	r18,r2
    57dc:	1827883a 	mov	r19,r3
    57e0:	00099180 	call	9918 <__muldf3>
    57e4:	d9000b17 	ldw	r4,44(sp)
    57e8:	100f883a 	mov	r7,r2
    57ec:	1811883a 	mov	r8,r3
    57f0:	008007c4 	movi	r2,31
    57f4:	dc800e15 	stw	r18,56(sp)
    57f8:	3821883a 	mov	r16,r7
    57fc:	dcc00f15 	stw	r19,60(sp)
    5800:	4023883a 	mov	r17,r8
    5804:	11010a0e 	bge	r2,r4,5c30 <__ieee754_rem_pio2+0x698>
    5808:	d9000e17 	ldw	r4,56(sp)
    580c:	d9400f17 	ldw	r5,60(sp)
    5810:	800d883a 	mov	r6,r16
    5814:	880f883a 	mov	r7,r17
    5818:	00098240 	call	9824 <__subdf3>
    581c:	1810d53a 	srli	r8,r3,20
    5820:	b02dd53a 	srai	r22,r22,20
    5824:	1009883a 	mov	r4,r2
    5828:	4201ffcc 	andi	r8,r8,2047
    582c:	180b883a 	mov	r5,r3
    5830:	b211c83a 	sub	r8,r22,r8
    5834:	00800404 	movi	r2,16
    5838:	dd801015 	stw	r22,64(sp)
    583c:	e1000015 	stw	r4,0(fp)
    5840:	e1400115 	stw	r5,4(fp)
    5844:	1200430e 	bge	r2,r8,5954 <__ieee754_rem_pio2+0x3bc>
    5848:	d9000c17 	ldw	r4,48(sp)
    584c:	d9400d17 	ldw	r5,52(sp)
    5850:	00869834 	movhi	r2,6752
    5854:	00cf7474 	movhi	r3,15825
    5858:	18ed1844 	addi	r3,r3,-19359
    585c:	180f883a 	mov	r7,r3
    5860:	100d883a 	mov	r6,r2
    5864:	00099180 	call	9918 <__muldf3>
    5868:	d9000e17 	ldw	r4,56(sp)
    586c:	d9400f17 	ldw	r5,60(sp)
    5870:	100d883a 	mov	r6,r2
    5874:	180f883a 	mov	r7,r3
    5878:	1025883a 	mov	r18,r2
    587c:	1827883a 	mov	r19,r3
    5880:	00098240 	call	9824 <__subdf3>
    5884:	d9000c17 	ldw	r4,48(sp)
    5888:	d9400d17 	ldw	r5,52(sp)
    588c:	058b80f4 	movhi	r22,11779
    5890:	b59c1cc4 	addi	r22,r22,28787
    5894:	05cee8f4 	movhi	r23,15267
    5898:	bdc66284 	addi	r23,r23,6538
    589c:	b00d883a 	mov	r6,r22
    58a0:	b80f883a 	mov	r7,r23
    58a4:	d8801115 	stw	r2,68(sp)
    58a8:	d8c01215 	stw	r3,72(sp)
    58ac:	d8800815 	stw	r2,32(sp)
    58b0:	00099180 	call	9918 <__muldf3>
    58b4:	d9001217 	ldw	r4,72(sp)
    58b8:	d9400f17 	ldw	r5,60(sp)
    58bc:	d9800817 	ldw	r6,32(sp)
    58c0:	d9000915 	stw	r4,36(sp)
    58c4:	d9c01217 	ldw	r7,72(sp)
    58c8:	d9000e17 	ldw	r4,56(sp)
    58cc:	1021883a 	mov	r16,r2
    58d0:	1823883a 	mov	r17,r3
    58d4:	00098240 	call	9824 <__subdf3>
    58d8:	180b883a 	mov	r5,r3
    58dc:	900d883a 	mov	r6,r18
    58e0:	980f883a 	mov	r7,r19
    58e4:	1009883a 	mov	r4,r2
    58e8:	00098240 	call	9824 <__subdf3>
    58ec:	180f883a 	mov	r7,r3
    58f0:	880b883a 	mov	r5,r17
    58f4:	8009883a 	mov	r4,r16
    58f8:	100d883a 	mov	r6,r2
    58fc:	00098240 	call	9824 <__subdf3>
    5900:	d9000817 	ldw	r4,32(sp)
    5904:	d9401217 	ldw	r5,72(sp)
    5908:	180f883a 	mov	r7,r3
    590c:	100d883a 	mov	r6,r2
    5910:	1021883a 	mov	r16,r2
    5914:	1823883a 	mov	r17,r3
    5918:	00098240 	call	9824 <__subdf3>
    591c:	1810d53a 	srli	r8,r3,20
    5920:	1009883a 	mov	r4,r2
    5924:	d8801017 	ldw	r2,64(sp)
    5928:	4201ffcc 	andi	r8,r8,2047
    592c:	180b883a 	mov	r5,r3
    5930:	1211c83a 	sub	r8,r2,r8
    5934:	00800c44 	movi	r2,49
    5938:	e1000015 	stw	r4,0(fp)
    593c:	e1400115 	stw	r5,4(fp)
    5940:	1200f016 	blt	r2,r8,5d04 <__ieee754_rem_pio2+0x76c>
    5944:	d8c00817 	ldw	r3,32(sp)
    5948:	d9001217 	ldw	r4,72(sp)
    594c:	d8c00e15 	stw	r3,56(sp)
    5950:	d9000f15 	stw	r4,60(sp)
    5954:	e1800017 	ldw	r6,0(fp)
    5958:	e1c00117 	ldw	r7,4(fp)
    595c:	d9400f17 	ldw	r5,60(sp)
    5960:	d9000e17 	ldw	r4,56(sp)
    5964:	00098240 	call	9824 <__subdf3>
    5968:	180b883a 	mov	r5,r3
    596c:	800d883a 	mov	r6,r16
    5970:	880f883a 	mov	r7,r17
    5974:	1009883a 	mov	r4,r2
    5978:	00098240 	call	9824 <__subdf3>
    597c:	d9400a17 	ldw	r5,40(sp)
    5980:	e0800215 	stw	r2,8(fp)
    5984:	e1800204 	addi	r6,fp,8
    5988:	30c00115 	stw	r3,4(r6)
    598c:	283f1b0e 	bge	r5,zero,55fc <__ieee754_rem_pio2+0x64>
    5990:	e0c00117 	ldw	r3,4(fp)
    5994:	d8800b17 	ldw	r2,44(sp)
    5998:	18e0003c 	xorhi	r3,r3,32768
    599c:	0085c83a 	sub	r2,zero,r2
    59a0:	e0c00115 	stw	r3,4(fp)
    59a4:	d8800b15 	stw	r2,44(sp)
    59a8:	30800117 	ldw	r2,4(r6)
    59ac:	10a0003c 	xorhi	r2,r2,32768
    59b0:	30800115 	stw	r2,4(r6)
    59b4:	003f1106 	br	55fc <__ieee754_rem_pio2+0x64>
    59b8:	04151034 	movhi	r16,21568
    59bc:	044ffe74 	movhi	r17,16377
    59c0:	8c487ec4 	addi	r17,r17,8699
    59c4:	4809883a 	mov	r4,r9
    59c8:	800d883a 	mov	r6,r16
    59cc:	880f883a 	mov	r7,r17
    59d0:	00098a40 	call	98a4 <__adddf3>
    59d4:	1025883a 	mov	r18,r2
    59d8:	1827883a 	mov	r19,r3
    59dc:	b440a326 	beq	r22,r17,5c6c <__ieee754_rem_pio2+0x6d4>
    59e0:	040698b4 	movhi	r16,6754
    59e4:	8418cc44 	addi	r16,r16,25393
    59e8:	044f7474 	movhi	r17,15825
    59ec:	8c6d1844 	addi	r17,r17,-19359
    59f0:	1009883a 	mov	r4,r2
    59f4:	180b883a 	mov	r5,r3
    59f8:	800d883a 	mov	r6,r16
    59fc:	880f883a 	mov	r7,r17
    5a00:	00098a40 	call	98a4 <__adddf3>
    5a04:	100d883a 	mov	r6,r2
    5a08:	9009883a 	mov	r4,r18
    5a0c:	980b883a 	mov	r5,r19
    5a10:	180f883a 	mov	r7,r3
    5a14:	e0800015 	stw	r2,0(fp)
    5a18:	e0c00115 	stw	r3,4(fp)
    5a1c:	00098240 	call	9824 <__subdf3>
    5a20:	1009883a 	mov	r4,r2
    5a24:	800d883a 	mov	r6,r16
    5a28:	880f883a 	mov	r7,r17
    5a2c:	180b883a 	mov	r5,r3
    5a30:	00098a40 	call	98a4 <__adddf3>
    5a34:	1009883a 	mov	r4,r2
    5a38:	00bfffc4 	movi	r2,-1
    5a3c:	d8800b15 	stw	r2,44(sp)
    5a40:	e0c00315 	stw	r3,12(fp)
    5a44:	e1000215 	stw	r4,8(fp)
    5a48:	003eec06 	br	55fc <__ieee754_rem_pio2+0x64>
    5a4c:	b005d53a 	srai	r2,r22,20
    5a50:	4821883a 	mov	r16,r9
    5a54:	05505c34 	movhi	r21,16752
    5a58:	15fefa84 	addi	r23,r2,-1046
    5a5c:	b826953a 	slli	r19,r23,20
    5a60:	0029883a 	mov	r20,zero
    5a64:	048000c4 	movi	r18,3
    5a68:	b4e7c83a 	sub	r19,r22,r19
    5a6c:	980b883a 	mov	r5,r19
    5a70:	000a24c0 	call	a24c <__fixdfsi>
    5a74:	1009883a 	mov	r4,r2
    5a78:	000a1540 	call	a154 <__floatsidf>
    5a7c:	980b883a 	mov	r5,r19
    5a80:	8009883a 	mov	r4,r16
    5a84:	180f883a 	mov	r7,r3
    5a88:	100d883a 	mov	r6,r2
    5a8c:	d8800215 	stw	r2,8(sp)
    5a90:	d8c00315 	stw	r3,12(sp)
    5a94:	00098240 	call	9824 <__subdf3>
    5a98:	180b883a 	mov	r5,r3
    5a9c:	a00d883a 	mov	r6,r20
    5aa0:	a80f883a 	mov	r7,r21
    5aa4:	1009883a 	mov	r4,r2
    5aa8:	00099180 	call	9918 <__muldf3>
    5aac:	180b883a 	mov	r5,r3
    5ab0:	1009883a 	mov	r4,r2
    5ab4:	1823883a 	mov	r17,r3
    5ab8:	1021883a 	mov	r16,r2
    5abc:	000a24c0 	call	a24c <__fixdfsi>
    5ac0:	1009883a 	mov	r4,r2
    5ac4:	000a1540 	call	a154 <__floatsidf>
    5ac8:	880b883a 	mov	r5,r17
    5acc:	8009883a 	mov	r4,r16
    5ad0:	180f883a 	mov	r7,r3
    5ad4:	100d883a 	mov	r6,r2
    5ad8:	d8800415 	stw	r2,16(sp)
    5adc:	d8c00515 	stw	r3,20(sp)
    5ae0:	00098240 	call	9824 <__subdf3>
    5ae4:	180b883a 	mov	r5,r3
    5ae8:	000d883a 	mov	r6,zero
    5aec:	a80f883a 	mov	r7,r21
    5af0:	1009883a 	mov	r4,r2
    5af4:	00099180 	call	9918 <__muldf3>
    5af8:	d8c00715 	stw	r3,28(sp)
    5afc:	d8800615 	stw	r2,24(sp)
    5b00:	00000106 	br	5b08 <__ieee754_rem_pio2+0x570>
    5b04:	8025883a 	mov	r18,r16
    5b08:	943fffc4 	addi	r16,r18,-1
    5b0c:	800890fa 	slli	r4,r16,3
    5b10:	d9400204 	addi	r5,sp,8
    5b14:	000d883a 	mov	r6,zero
    5b18:	2149883a 	add	r4,r4,r5
    5b1c:	20c00117 	ldw	r3,4(r4)
    5b20:	20800017 	ldw	r2,0(r4)
    5b24:	000f883a 	mov	r7,zero
    5b28:	180b883a 	mov	r5,r3
    5b2c:	1009883a 	mov	r4,r2
    5b30:	0009f340 	call	9f34 <__eqdf2>
    5b34:	103ff326 	beq	r2,zero,5b04 <__ieee754_rem_pio2+0x56c>
    5b38:	00800084 	movi	r2,2
    5b3c:	00c00074 	movhi	r3,1
    5b40:	18f9e604 	addi	r3,r3,-6248
    5b44:	b80d883a 	mov	r6,r23
    5b48:	900f883a 	mov	r7,r18
    5b4c:	d9000204 	addi	r4,sp,8
    5b50:	e00b883a 	mov	r5,fp
    5b54:	d8800015 	stw	r2,0(sp)
    5b58:	d8c00115 	stw	r3,4(sp)
    5b5c:	00065b40 	call	65b4 <__kernel_rem_pio2>
    5b60:	d8800b15 	stw	r2,44(sp)
    5b64:	d8800a17 	ldw	r2,40(sp)
    5b68:	103ea40e 	bge	r2,zero,55fc <__ieee754_rem_pio2+0x64>
    5b6c:	e0800117 	ldw	r2,4(fp)
    5b70:	d8c00b17 	ldw	r3,44(sp)
    5b74:	e1000204 	addi	r4,fp,8
    5b78:	10a0003c 	xorhi	r2,r2,32768
    5b7c:	00c7c83a 	sub	r3,zero,r3
    5b80:	e0800115 	stw	r2,4(fp)
    5b84:	d8c00b15 	stw	r3,44(sp)
    5b88:	20c00117 	ldw	r3,4(r4)
    5b8c:	18e0003c 	xorhi	r3,r3,32768
    5b90:	20c00115 	stw	r3,4(r4)
    5b94:	003e9906 	br	55fc <__ieee754_rem_pio2+0x64>
    5b98:	00869834 	movhi	r2,6752
    5b9c:	00cf7474 	movhi	r3,15825
    5ba0:	18ed1844 	addi	r3,r3,-19359
    5ba4:	9009883a 	mov	r4,r18
    5ba8:	980b883a 	mov	r5,r19
    5bac:	180f883a 	mov	r7,r3
    5bb0:	100d883a 	mov	r6,r2
    5bb4:	00098240 	call	9824 <__subdf3>
    5bb8:	048b80f4 	movhi	r18,11779
    5bbc:	949c1cc4 	addi	r18,r18,28787
    5bc0:	04cee8f4 	movhi	r19,15267
    5bc4:	9cc66284 	addi	r19,r19,6538
    5bc8:	1009883a 	mov	r4,r2
    5bcc:	180b883a 	mov	r5,r3
    5bd0:	900d883a 	mov	r6,r18
    5bd4:	980f883a 	mov	r7,r19
    5bd8:	1021883a 	mov	r16,r2
    5bdc:	1823883a 	mov	r17,r3
    5be0:	00098240 	call	9824 <__subdf3>
    5be4:	100d883a 	mov	r6,r2
    5be8:	8009883a 	mov	r4,r16
    5bec:	880b883a 	mov	r5,r17
    5bf0:	180f883a 	mov	r7,r3
    5bf4:	e0800015 	stw	r2,0(fp)
    5bf8:	e0c00115 	stw	r3,4(fp)
    5bfc:	00098240 	call	9824 <__subdf3>
    5c00:	180b883a 	mov	r5,r3
    5c04:	1009883a 	mov	r4,r2
    5c08:	900d883a 	mov	r6,r18
    5c0c:	980f883a 	mov	r7,r19
    5c10:	00098240 	call	9824 <__subdf3>
    5c14:	180b883a 	mov	r5,r3
    5c18:	1009883a 	mov	r4,r2
    5c1c:	00c00044 	movi	r3,1
    5c20:	d8c00b15 	stw	r3,44(sp)
    5c24:	e1400315 	stw	r5,12(fp)
    5c28:	e1000215 	stw	r4,8(fp)
    5c2c:	003e7306 	br	55fc <__ieee754_rem_pio2+0x64>
    5c30:	2105883a 	add	r2,r4,r4
    5c34:	1085883a 	add	r2,r2,r2
    5c38:	00c00074 	movhi	r3,1
    5c3c:	18f9c604 	addi	r3,r3,-6376
    5c40:	10c5883a 	add	r2,r2,r3
    5c44:	113fff17 	ldw	r4,-4(r2)
    5c48:	b13eef26 	beq	r22,r4,5808 <__ieee754_rem_pio2+0x270>
    5c4c:	980b883a 	mov	r5,r19
    5c50:	400f883a 	mov	r7,r8
    5c54:	9009883a 	mov	r4,r18
    5c58:	800d883a 	mov	r6,r16
    5c5c:	00098240 	call	9824 <__subdf3>
    5c60:	e0c00115 	stw	r3,4(fp)
    5c64:	e0800015 	stw	r2,0(fp)
    5c68:	003f3a06 	br	5954 <__ieee754_rem_pio2+0x3bc>
    5c6c:	00869834 	movhi	r2,6752
    5c70:	00cf7474 	movhi	r3,15825
    5c74:	18ed1844 	addi	r3,r3,-19359
    5c78:	9009883a 	mov	r4,r18
    5c7c:	980b883a 	mov	r5,r19
    5c80:	180f883a 	mov	r7,r3
    5c84:	100d883a 	mov	r6,r2
    5c88:	00098a40 	call	98a4 <__adddf3>
    5c8c:	048b80f4 	movhi	r18,11779
    5c90:	949c1cc4 	addi	r18,r18,28787
    5c94:	04cee8f4 	movhi	r19,15267
    5c98:	9cc66284 	addi	r19,r19,6538
    5c9c:	1009883a 	mov	r4,r2
    5ca0:	180b883a 	mov	r5,r3
    5ca4:	900d883a 	mov	r6,r18
    5ca8:	980f883a 	mov	r7,r19
    5cac:	1021883a 	mov	r16,r2
    5cb0:	1823883a 	mov	r17,r3
    5cb4:	00098a40 	call	98a4 <__adddf3>
    5cb8:	100d883a 	mov	r6,r2
    5cbc:	8009883a 	mov	r4,r16
    5cc0:	880b883a 	mov	r5,r17
    5cc4:	180f883a 	mov	r7,r3
    5cc8:	e0800015 	stw	r2,0(fp)
    5ccc:	e0c00115 	stw	r3,4(fp)
    5cd0:	00098240 	call	9824 <__subdf3>
    5cd4:	180b883a 	mov	r5,r3
    5cd8:	1009883a 	mov	r4,r2
    5cdc:	900d883a 	mov	r6,r18
    5ce0:	980f883a 	mov	r7,r19
    5ce4:	00098a40 	call	98a4 <__adddf3>
    5ce8:	180b883a 	mov	r5,r3
    5cec:	1009883a 	mov	r4,r2
    5cf0:	00ffffc4 	movi	r3,-1
    5cf4:	d8c00b15 	stw	r3,44(sp)
    5cf8:	e1400315 	stw	r5,12(fp)
    5cfc:	e1000215 	stw	r4,8(fp)
    5d00:	003e3e06 	br	55fc <__ieee754_rem_pio2+0x64>
    5d04:	d9000c17 	ldw	r4,48(sp)
    5d08:	d9400d17 	ldw	r5,52(sp)
    5d0c:	018b8034 	movhi	r6,11776
    5d10:	b80f883a 	mov	r7,r23
    5d14:	00099180 	call	9918 <__muldf3>
    5d18:	d9000817 	ldw	r4,32(sp)
    5d1c:	d9401217 	ldw	r5,72(sp)
    5d20:	100d883a 	mov	r6,r2
    5d24:	180f883a 	mov	r7,r3
    5d28:	1025883a 	mov	r18,r2
    5d2c:	1827883a 	mov	r19,r3
    5d30:	00098240 	call	9824 <__subdf3>
    5d34:	d9400d17 	ldw	r5,52(sp)
    5d38:	d9000c17 	ldw	r4,48(sp)
    5d3c:	02094834 	movhi	r8,9504
    5d40:	42127044 	addi	r8,r8,18881
    5d44:	024e5f34 	movhi	r9,14716
    5d48:	4a60e684 	addi	r9,r9,-31846
    5d4c:	480f883a 	mov	r7,r9
    5d50:	400d883a 	mov	r6,r8
    5d54:	182b883a 	mov	r21,r3
    5d58:	d8800e15 	stw	r2,56(sp)
    5d5c:	00099180 	call	9918 <__muldf3>
    5d60:	d9000817 	ldw	r4,32(sp)
    5d64:	d9401217 	ldw	r5,72(sp)
    5d68:	d9800e17 	ldw	r6,56(sp)
    5d6c:	a80f883a 	mov	r7,r21
    5d70:	1021883a 	mov	r16,r2
    5d74:	1823883a 	mov	r17,r3
    5d78:	dd400f15 	stw	r21,60(sp)
    5d7c:	00098240 	call	9824 <__subdf3>
    5d80:	180b883a 	mov	r5,r3
    5d84:	900d883a 	mov	r6,r18
    5d88:	980f883a 	mov	r7,r19
    5d8c:	1009883a 	mov	r4,r2
    5d90:	00098240 	call	9824 <__subdf3>
    5d94:	180f883a 	mov	r7,r3
    5d98:	880b883a 	mov	r5,r17
    5d9c:	8009883a 	mov	r4,r16
    5da0:	100d883a 	mov	r6,r2
    5da4:	00098240 	call	9824 <__subdf3>
    5da8:	d9000e17 	ldw	r4,56(sp)
    5dac:	1021883a 	mov	r16,r2
    5db0:	1823883a 	mov	r17,r3
    5db4:	a80b883a 	mov	r5,r21
    5db8:	180f883a 	mov	r7,r3
    5dbc:	003fa606 	br	5c58 <__ieee754_rem_pio2+0x6c0>

00005dc0 <__ieee754_sqrt>:
    5dc0:	defffd04 	addi	sp,sp,-12
    5dc4:	dc000015 	stw	r16,0(sp)
    5dc8:	009ffc34 	movhi	r2,32752
    5dcc:	2021883a 	mov	r16,r4
    5dd0:	291ffc2c 	andhi	r4,r5,32752
    5dd4:	dc400115 	stw	r17,4(sp)
    5dd8:	dfc00215 	stw	ra,8(sp)
    5ddc:	2823883a 	mov	r17,r5
    5de0:	280f883a 	mov	r7,r5
    5de4:	2807883a 	mov	r3,r5
    5de8:	8011883a 	mov	r8,r16
    5dec:	20807d26 	beq	r4,r2,5fe4 <__ieee754_sqrt+0x224>
    5df0:	01408d0e 	bge	zero,r5,6028 <__ieee754_sqrt+0x268>
    5df4:	380dd53a 	srai	r6,r7,20
    5df8:	3000131e 	bne	r6,zero,5e48 <__ieee754_sqrt+0x88>
    5dfc:	1800041e 	bne	r3,zero,5e10 <__ieee754_sqrt+0x50>
    5e00:	400ed2fa 	srli	r7,r8,11
    5e04:	31bffac4 	addi	r6,r6,-21
    5e08:	4010957a 	slli	r8,r8,21
    5e0c:	383ffc26 	beq	r7,zero,5e00 <__ieee754_sqrt+0x40>
    5e10:	3880042c 	andhi	r2,r7,16
    5e14:	1000991e 	bne	r2,zero,607c <__ieee754_sqrt+0x2bc>
    5e18:	0009883a 	mov	r4,zero
    5e1c:	39cf883a 	add	r7,r7,r7
    5e20:	3880042c 	andhi	r2,r7,16
    5e24:	21000044 	addi	r4,r4,1
    5e28:	103ffc26 	beq	r2,zero,5e1c <__ieee754_sqrt+0x5c>
    5e2c:	00800804 	movi	r2,32
    5e30:	1105c83a 	sub	r2,r2,r4
    5e34:	4086d83a 	srl	r3,r8,r2
    5e38:	4110983a 	sll	r8,r8,r4
    5e3c:	3105c83a 	sub	r2,r6,r4
    5e40:	38ceb03a 	or	r7,r7,r3
    5e44:	11800044 	addi	r6,r2,1
    5e48:	31bf0044 	addi	r6,r6,-1023
    5e4c:	30c0004c 	andi	r3,r6,1
    5e50:	00800434 	movhi	r2,16
    5e54:	10bfffc4 	addi	r2,r2,-1
    5e58:	3884703a 	and	r2,r7,r2
    5e5c:	1807003a 	cmpeq	r3,r3,zero
    5e60:	11000434 	orhi	r4,r2,16
    5e64:	18005426 	beq	r3,zero,5fb8 <__ieee754_sqrt+0x1f8>
    5e68:	4004d7fa 	srli	r2,r8,31
    5e6c:	4207883a 	add	r3,r8,r8
    5e70:	02800834 	movhi	r10,32
    5e74:	1105883a 	add	r2,r2,r4
    5e78:	2089883a 	add	r4,r4,r2
    5e7c:	0011883a 	mov	r8,zero
    5e80:	000b883a 	mov	r5,zero
    5e84:	0013883a 	mov	r9,zero
    5e88:	02c00584 	movi	r11,22
    5e8c:	520f883a 	add	r7,r10,r8
    5e90:	1804d7fa 	srli	r2,r3,31
    5e94:	4a400044 	addi	r9,r9,1
    5e98:	18c7883a 	add	r3,r3,r3
    5e9c:	21c00316 	blt	r4,r7,5eac <__ieee754_sqrt+0xec>
    5ea0:	21c9c83a 	sub	r4,r4,r7
    5ea4:	2a8b883a 	add	r5,r5,r10
    5ea8:	51d1883a 	add	r8,r10,r7
    5eac:	1105883a 	add	r2,r2,r4
    5eb0:	5014d07a 	srli	r10,r10,1
    5eb4:	2089883a 	add	r4,r4,r2
    5eb8:	4afff41e 	bne	r9,r11,5e8c <__ieee754_sqrt+0xcc>
    5ebc:	02600034 	movhi	r9,32768
    5ec0:	0017883a 	mov	r11,zero
    5ec4:	0019883a 	mov	r12,zero
    5ec8:	0015883a 	mov	r10,zero
    5ecc:	4821883a 	mov	r16,r9
    5ed0:	03c00804 	movi	r15,32
    5ed4:	00000806 	br	5ef8 <__ieee754_sqrt+0x138>
    5ed8:	22003426 	beq	r4,r8,5fac <__ieee754_sqrt+0x1ec>
    5edc:	1804d7fa 	srli	r2,r3,31
    5ee0:	52800044 	addi	r10,r10,1
    5ee4:	18c7883a 	add	r3,r3,r3
    5ee8:	1105883a 	add	r2,r2,r4
    5eec:	2089883a 	add	r4,r4,r2
    5ef0:	4812d07a 	srli	r9,r9,1
    5ef4:	53c01326 	beq	r10,r15,5f44 <__ieee754_sqrt+0x184>
    5ef8:	4acf883a 	add	r7,r9,r11
    5efc:	413ff60e 	bge	r8,r4,5ed8 <__ieee754_sqrt+0x118>
    5f00:	38a0002c 	andhi	r2,r7,32768
    5f04:	3a57883a 	add	r11,r7,r9
    5f08:	14002426 	beq	r2,r16,5f9c <__ieee754_sqrt+0x1dc>
    5f0c:	4005883a 	mov	r2,r8
    5f10:	2209c83a 	sub	r4,r4,r8
    5f14:	19c0012e 	bgeu	r3,r7,5f1c <__ieee754_sqrt+0x15c>
    5f18:	213fffc4 	addi	r4,r4,-1
    5f1c:	19c7c83a 	sub	r3,r3,r7
    5f20:	1011883a 	mov	r8,r2
    5f24:	1804d7fa 	srli	r2,r3,31
    5f28:	52800044 	addi	r10,r10,1
    5f2c:	6259883a 	add	r12,r12,r9
    5f30:	1105883a 	add	r2,r2,r4
    5f34:	18c7883a 	add	r3,r3,r3
    5f38:	2089883a 	add	r4,r4,r2
    5f3c:	4812d07a 	srli	r9,r9,1
    5f40:	53ffed1e 	bne	r10,r15,5ef8 <__ieee754_sqrt+0x138>
    5f44:	20c4b03a 	or	r2,r4,r3
    5f48:	1000201e 	bne	r2,zero,5fcc <__ieee754_sqrt+0x20c>
    5f4c:	600ed07a 	srli	r7,r12,1
    5f50:	2880004c 	andi	r2,r5,1
    5f54:	1005003a 	cmpeq	r2,r2,zero
    5f58:	1000011e 	bne	r2,zero,5f60 <__ieee754_sqrt+0x1a0>
    5f5c:	39e00034 	orhi	r7,r7,32768
    5f60:	300dd07a 	srai	r6,r6,1
    5f64:	280bd07a 	srai	r5,r5,1
    5f68:	010ff834 	movhi	r4,16352
    5f6c:	300c953a 	slli	r6,r6,20
    5f70:	290b883a 	add	r5,r5,r4
    5f74:	3821883a 	mov	r16,r7
    5f78:	299d883a 	add	r14,r5,r6
    5f7c:	7023883a 	mov	r17,r14
    5f80:	8005883a 	mov	r2,r16
    5f84:	8807883a 	mov	r3,r17
    5f88:	dfc00217 	ldw	ra,8(sp)
    5f8c:	dc400117 	ldw	r17,4(sp)
    5f90:	dc000017 	ldw	r16,0(sp)
    5f94:	dec00304 	addi	sp,sp,12
    5f98:	f800283a 	ret
    5f9c:	5884703a 	and	r2,r11,r2
    5fa0:	103fda1e 	bne	r2,zero,5f0c <__ieee754_sqrt+0x14c>
    5fa4:	40800044 	addi	r2,r8,1
    5fa8:	003fd906 	br	5f10 <__ieee754_sqrt+0x150>
    5fac:	19ffd42e 	bgeu	r3,r7,5f00 <__ieee754_sqrt+0x140>
    5fb0:	2011883a 	mov	r8,r4
    5fb4:	003fc906 	br	5edc <__ieee754_sqrt+0x11c>
    5fb8:	4004d7fa 	srli	r2,r8,31
    5fbc:	4211883a 	add	r8,r8,r8
    5fc0:	1105883a 	add	r2,r2,r4
    5fc4:	2089883a 	add	r4,r4,r2
    5fc8:	003fa706 	br	5e68 <__ieee754_sqrt+0xa8>
    5fcc:	00bfffc4 	movi	r2,-1
    5fd0:	60802726 	beq	r12,r2,6070 <__ieee754_sqrt+0x2b0>
    5fd4:	6080004c 	andi	r2,r12,1
    5fd8:	6085883a 	add	r2,r12,r2
    5fdc:	100ed07a 	srli	r7,r2,1
    5fe0:	003fdb06 	br	5f50 <__ieee754_sqrt+0x190>
    5fe4:	8009883a 	mov	r4,r16
    5fe8:	800d883a 	mov	r6,r16
    5fec:	00099180 	call	9918 <__muldf3>
    5ff0:	180f883a 	mov	r7,r3
    5ff4:	880b883a 	mov	r5,r17
    5ff8:	8009883a 	mov	r4,r16
    5ffc:	100d883a 	mov	r6,r2
    6000:	00098a40 	call	98a4 <__adddf3>
    6004:	1021883a 	mov	r16,r2
    6008:	1823883a 	mov	r17,r3
    600c:	8005883a 	mov	r2,r16
    6010:	8807883a 	mov	r3,r17
    6014:	dfc00217 	ldw	ra,8(sp)
    6018:	dc400117 	ldw	r17,4(sp)
    601c:	dc000017 	ldw	r16,0(sp)
    6020:	dec00304 	addi	sp,sp,12
    6024:	f800283a 	ret
    6028:	00a00034 	movhi	r2,32768
    602c:	10bfffc4 	addi	r2,r2,-1
    6030:	2884703a 	and	r2,r5,r2
    6034:	8084b03a 	or	r2,r16,r2
    6038:	103fd126 	beq	r2,zero,5f80 <__ieee754_sqrt+0x1c0>
    603c:	283f6d26 	beq	r5,zero,5df4 <__ieee754_sqrt+0x34>
    6040:	280f883a 	mov	r7,r5
    6044:	8009883a 	mov	r4,r16
    6048:	800d883a 	mov	r6,r16
    604c:	00098240 	call	9824 <__subdf3>
    6050:	1009883a 	mov	r4,r2
    6054:	180b883a 	mov	r5,r3
    6058:	100d883a 	mov	r6,r2
    605c:	180f883a 	mov	r7,r3
    6060:	0009cdc0 	call	9cdc <__divdf3>
    6064:	1021883a 	mov	r16,r2
    6068:	1823883a 	mov	r17,r3
    606c:	003fc406 	br	5f80 <__ieee754_sqrt+0x1c0>
    6070:	29400044 	addi	r5,r5,1
    6074:	000f883a 	mov	r7,zero
    6078:	003fb506 	br	5f50 <__ieee754_sqrt+0x190>
    607c:	0009883a 	mov	r4,zero
    6080:	00800804 	movi	r2,32
    6084:	003f6b06 	br	5e34 <__ieee754_sqrt+0x74>

00006088 <__kernel_cos>:
    6088:	defff104 	addi	sp,sp,-60
    608c:	00a00034 	movhi	r2,32768
    6090:	10bfffc4 	addi	r2,r2,-1
    6094:	dd800c15 	stw	r22,48(sp)
    6098:	116c703a 	and	r22,r2,r5
    609c:	0005883a 	mov	r2,zero
    60a0:	dd000a15 	stw	r20,40(sp)
    60a4:	d8800215 	stw	r2,8(sp)
    60a8:	2029883a 	mov	r20,r4
    60ac:	008f9034 	movhi	r2,15936
    60b0:	10bfffc4 	addi	r2,r2,-1
    60b4:	0009883a 	mov	r4,zero
    60b8:	dd400b15 	stw	r21,44(sp)
    60bc:	dfc00e15 	stw	ra,56(sp)
    60c0:	ddc00d15 	stw	r23,52(sp)
    60c4:	dcc00915 	stw	r19,36(sp)
    60c8:	dc800815 	stw	r18,32(sp)
    60cc:	dc400715 	stw	r17,28(sp)
    60d0:	dc000615 	stw	r16,24(sp)
    60d4:	282b883a 	mov	r21,r5
    60d8:	d9800415 	stw	r6,16(sp)
    60dc:	d9c00515 	stw	r7,20(sp)
    60e0:	d9000315 	stw	r4,12(sp)
    60e4:	15809216 	blt	r2,r22,6330 <__kernel_cos+0x2a8>
    60e8:	a009883a 	mov	r4,r20
    60ec:	000a24c0 	call	a24c <__fixdfsi>
    60f0:	10011c26 	beq	r2,zero,6564 <__kernel_cos+0x4dc>
    60f4:	a009883a 	mov	r4,r20
    60f8:	a80b883a 	mov	r5,r21
    60fc:	a00d883a 	mov	r6,r20
    6100:	a80f883a 	mov	r7,r21
    6104:	00099180 	call	9918 <__muldf3>
    6108:	1021883a 	mov	r16,r2
    610c:	1823883a 	mov	r17,r3
    6110:	1025883a 	mov	r18,r2
    6114:	1827883a 	mov	r19,r3
    6118:	00afa234 	movhi	r2,48776
    611c:	108e3504 	addi	r2,r2,14548
    6120:	00ef6a74 	movhi	r3,48553
    6124:	18feba44 	addi	r3,r3,-1303
    6128:	8009883a 	mov	r4,r16
    612c:	880b883a 	mov	r5,r17
    6130:	180f883a 	mov	r7,r3
    6134:	100d883a 	mov	r6,r2
    6138:	00099180 	call	9918 <__muldf3>
    613c:	022f6d74 	movhi	r8,48565
    6140:	422c7104 	addi	r8,r8,-20028
    6144:	024f88b4 	movhi	r9,15906
    6148:	4a7ba784 	addi	r9,r9,-4450
    614c:	480f883a 	mov	r7,r9
    6150:	400d883a 	mov	r6,r8
    6154:	180b883a 	mov	r5,r3
    6158:	1009883a 	mov	r4,r2
    615c:	00098a40 	call	98a4 <__adddf3>
    6160:	180f883a 	mov	r7,r3
    6164:	8009883a 	mov	r4,r16
    6168:	880b883a 	mov	r5,r17
    616c:	100d883a 	mov	r6,r2
    6170:	00099180 	call	9918 <__muldf3>
    6174:	02202734 	movhi	r8,32924
    6178:	4214ab44 	addi	r8,r8,21165
    617c:	024fa4b4 	movhi	r9,16018
    6180:	4a5f93c4 	addi	r9,r9,32335
    6184:	480f883a 	mov	r7,r9
    6188:	400d883a 	mov	r6,r8
    618c:	180b883a 	mov	r5,r3
    6190:	1009883a 	mov	r4,r2
    6194:	00098240 	call	9824 <__subdf3>
    6198:	180f883a 	mov	r7,r3
    619c:	8009883a 	mov	r4,r16
    61a0:	880b883a 	mov	r5,r17
    61a4:	100d883a 	mov	r6,r2
    61a8:	00099180 	call	9918 <__muldf3>
    61ac:	020672f4 	movhi	r8,6603
    61b0:	42056404 	addi	r8,r8,5520
    61b4:	024fbeb4 	movhi	r9,16122
    61b8:	4a406804 	addi	r9,r9,416
    61bc:	480f883a 	mov	r7,r9
    61c0:	400d883a 	mov	r6,r8
    61c4:	180b883a 	mov	r5,r3
    61c8:	1009883a 	mov	r4,r2
    61cc:	00098a40 	call	98a4 <__adddf3>
    61d0:	180f883a 	mov	r7,r3
    61d4:	8009883a 	mov	r4,r16
    61d8:	880b883a 	mov	r5,r17
    61dc:	100d883a 	mov	r6,r2
    61e0:	00099180 	call	9918 <__muldf3>
    61e4:	0205b074 	movhi	r8,5825
    61e8:	42145dc4 	addi	r8,r8,20855
    61ec:	024fd5f4 	movhi	r9,16215
    61f0:	4a705b04 	addi	r9,r9,-16020
    61f4:	480f883a 	mov	r7,r9
    61f8:	400d883a 	mov	r6,r8
    61fc:	180b883a 	mov	r5,r3
    6200:	1009883a 	mov	r4,r2
    6204:	00098240 	call	9824 <__subdf3>
    6208:	180f883a 	mov	r7,r3
    620c:	8009883a 	mov	r4,r16
    6210:	880b883a 	mov	r5,r17
    6214:	100d883a 	mov	r6,r2
    6218:	00099180 	call	9918 <__muldf3>
    621c:	02155574 	movhi	r8,21845
    6220:	42155304 	addi	r8,r8,21836
    6224:	024fe974 	movhi	r9,16293
    6228:	4a555544 	addi	r9,r9,21845
    622c:	480f883a 	mov	r7,r9
    6230:	400d883a 	mov	r6,r8
    6234:	180b883a 	mov	r5,r3
    6238:	1009883a 	mov	r4,r2
    623c:	00098a40 	call	98a4 <__adddf3>
    6240:	180f883a 	mov	r7,r3
    6244:	880b883a 	mov	r5,r17
    6248:	8009883a 	mov	r4,r16
    624c:	100d883a 	mov	r6,r2
    6250:	00099180 	call	9918 <__muldf3>
    6254:	1021883a 	mov	r16,r2
    6258:	1823883a 	mov	r17,r3
    625c:	0005883a 	mov	r2,zero
    6260:	00cff834 	movhi	r3,16352
    6264:	9009883a 	mov	r4,r18
    6268:	980b883a 	mov	r5,r19
    626c:	180f883a 	mov	r7,r3
    6270:	100d883a 	mov	r6,r2
    6274:	00099180 	call	9918 <__muldf3>
    6278:	980b883a 	mov	r5,r19
    627c:	880f883a 	mov	r7,r17
    6280:	9009883a 	mov	r4,r18
    6284:	800d883a 	mov	r6,r16
    6288:	1025883a 	mov	r18,r2
    628c:	1827883a 	mov	r19,r3
    6290:	00099180 	call	9918 <__muldf3>
    6294:	d9c00517 	ldw	r7,20(sp)
    6298:	d9800417 	ldw	r6,16(sp)
    629c:	a80b883a 	mov	r5,r21
    62a0:	a009883a 	mov	r4,r20
    62a4:	1021883a 	mov	r16,r2
    62a8:	1823883a 	mov	r17,r3
    62ac:	00099180 	call	9918 <__muldf3>
    62b0:	180f883a 	mov	r7,r3
    62b4:	880b883a 	mov	r5,r17
    62b8:	8009883a 	mov	r4,r16
    62bc:	100d883a 	mov	r6,r2
    62c0:	00098240 	call	9824 <__subdf3>
    62c4:	180f883a 	mov	r7,r3
    62c8:	980b883a 	mov	r5,r19
    62cc:	9009883a 	mov	r4,r18
    62d0:	100d883a 	mov	r6,r2
    62d4:	00098240 	call	9824 <__subdf3>
    62d8:	0011883a 	mov	r8,zero
    62dc:	024ffc34 	movhi	r9,16368
    62e0:	480b883a 	mov	r5,r9
    62e4:	180f883a 	mov	r7,r3
    62e8:	4009883a 	mov	r4,r8
    62ec:	100d883a 	mov	r6,r2
    62f0:	00098240 	call	9824 <__subdf3>
    62f4:	100d883a 	mov	r6,r2
    62f8:	180f883a 	mov	r7,r3
    62fc:	3005883a 	mov	r2,r6
    6300:	3807883a 	mov	r3,r7
    6304:	dfc00e17 	ldw	ra,56(sp)
    6308:	ddc00d17 	ldw	r23,52(sp)
    630c:	dd800c17 	ldw	r22,48(sp)
    6310:	dd400b17 	ldw	r21,44(sp)
    6314:	dd000a17 	ldw	r20,40(sp)
    6318:	dcc00917 	ldw	r19,36(sp)
    631c:	dc800817 	ldw	r18,32(sp)
    6320:	dc400717 	ldw	r17,28(sp)
    6324:	dc000617 	ldw	r16,24(sp)
    6328:	dec00f04 	addi	sp,sp,60
    632c:	f800283a 	ret
    6330:	280f883a 	mov	r7,r5
    6334:	a009883a 	mov	r4,r20
    6338:	a00d883a 	mov	r6,r20
    633c:	00099180 	call	9918 <__muldf3>
    6340:	1021883a 	mov	r16,r2
    6344:	1823883a 	mov	r17,r3
    6348:	1025883a 	mov	r18,r2
    634c:	1827883a 	mov	r19,r3
    6350:	00afa234 	movhi	r2,48776
    6354:	108e3504 	addi	r2,r2,14548
    6358:	00ef6a74 	movhi	r3,48553
    635c:	18feba44 	addi	r3,r3,-1303
    6360:	8009883a 	mov	r4,r16
    6364:	880b883a 	mov	r5,r17
    6368:	180f883a 	mov	r7,r3
    636c:	100d883a 	mov	r6,r2
    6370:	00099180 	call	9918 <__muldf3>
    6374:	022f6d74 	movhi	r8,48565
    6378:	422c7104 	addi	r8,r8,-20028
    637c:	024f88b4 	movhi	r9,15906
    6380:	4a7ba784 	addi	r9,r9,-4450
    6384:	480f883a 	mov	r7,r9
    6388:	400d883a 	mov	r6,r8
    638c:	180b883a 	mov	r5,r3
    6390:	1009883a 	mov	r4,r2
    6394:	00098a40 	call	98a4 <__adddf3>
    6398:	180f883a 	mov	r7,r3
    639c:	8009883a 	mov	r4,r16
    63a0:	880b883a 	mov	r5,r17
    63a4:	100d883a 	mov	r6,r2
    63a8:	00099180 	call	9918 <__muldf3>
    63ac:	02202734 	movhi	r8,32924
    63b0:	4214ab44 	addi	r8,r8,21165
    63b4:	024fa4b4 	movhi	r9,16018
    63b8:	4a5f93c4 	addi	r9,r9,32335
    63bc:	480f883a 	mov	r7,r9
    63c0:	400d883a 	mov	r6,r8
    63c4:	180b883a 	mov	r5,r3
    63c8:	1009883a 	mov	r4,r2
    63cc:	00098240 	call	9824 <__subdf3>
    63d0:	180f883a 	mov	r7,r3
    63d4:	8009883a 	mov	r4,r16
    63d8:	880b883a 	mov	r5,r17
    63dc:	100d883a 	mov	r6,r2
    63e0:	00099180 	call	9918 <__muldf3>
    63e4:	020672f4 	movhi	r8,6603
    63e8:	42056404 	addi	r8,r8,5520
    63ec:	024fbeb4 	movhi	r9,16122
    63f0:	4a406804 	addi	r9,r9,416
    63f4:	480f883a 	mov	r7,r9
    63f8:	400d883a 	mov	r6,r8
    63fc:	180b883a 	mov	r5,r3
    6400:	1009883a 	mov	r4,r2
    6404:	00098a40 	call	98a4 <__adddf3>
    6408:	180f883a 	mov	r7,r3
    640c:	8009883a 	mov	r4,r16
    6410:	880b883a 	mov	r5,r17
    6414:	100d883a 	mov	r6,r2
    6418:	00099180 	call	9918 <__muldf3>
    641c:	0205b074 	movhi	r8,5825
    6420:	42145dc4 	addi	r8,r8,20855
    6424:	024fd5f4 	movhi	r9,16215
    6428:	4a705b04 	addi	r9,r9,-16020
    642c:	480f883a 	mov	r7,r9
    6430:	400d883a 	mov	r6,r8
    6434:	180b883a 	mov	r5,r3
    6438:	1009883a 	mov	r4,r2
    643c:	00098240 	call	9824 <__subdf3>
    6440:	180f883a 	mov	r7,r3
    6444:	8009883a 	mov	r4,r16
    6448:	880b883a 	mov	r5,r17
    644c:	100d883a 	mov	r6,r2
    6450:	00099180 	call	9918 <__muldf3>
    6454:	02155574 	movhi	r8,21845
    6458:	42155304 	addi	r8,r8,21836
    645c:	024fe974 	movhi	r9,16293
    6460:	4a555544 	addi	r9,r9,21845
    6464:	480f883a 	mov	r7,r9
    6468:	400d883a 	mov	r6,r8
    646c:	180b883a 	mov	r5,r3
    6470:	1009883a 	mov	r4,r2
    6474:	00098a40 	call	98a4 <__adddf3>
    6478:	180f883a 	mov	r7,r3
    647c:	880b883a 	mov	r5,r17
    6480:	8009883a 	mov	r4,r16
    6484:	100d883a 	mov	r6,r2
    6488:	00099180 	call	9918 <__muldf3>
    648c:	1021883a 	mov	r16,r2
    6490:	008ff4f4 	movhi	r2,16339
    6494:	108ccc84 	addi	r2,r2,13106
    6498:	1823883a 	mov	r17,r3
    649c:	15bf6f0e 	bge	r2,r22,625c <__kernel_cos+0x1d4>
    64a0:	008ffa74 	movhi	r2,16361
    64a4:	1580320e 	bge	r2,r22,6570 <__kernel_cos+0x4e8>
    64a8:	0005883a 	mov	r2,zero
    64ac:	010ff9f4 	movhi	r4,16359
    64b0:	002d883a 	mov	r22,zero
    64b4:	d8800015 	stw	r2,0(sp)
    64b8:	05cff4b4 	movhi	r23,16338
    64bc:	d9000115 	stw	r4,4(sp)
    64c0:	0005883a 	mov	r2,zero
    64c4:	00cff834 	movhi	r3,16352
    64c8:	9009883a 	mov	r4,r18
    64cc:	980b883a 	mov	r5,r19
    64d0:	180f883a 	mov	r7,r3
    64d4:	100d883a 	mov	r6,r2
    64d8:	00099180 	call	9918 <__muldf3>
    64dc:	180b883a 	mov	r5,r3
    64e0:	b80f883a 	mov	r7,r23
    64e4:	1009883a 	mov	r4,r2
    64e8:	b00d883a 	mov	r6,r22
    64ec:	00098240 	call	9824 <__subdf3>
    64f0:	980b883a 	mov	r5,r19
    64f4:	880f883a 	mov	r7,r17
    64f8:	9009883a 	mov	r4,r18
    64fc:	800d883a 	mov	r6,r16
    6500:	1025883a 	mov	r18,r2
    6504:	1827883a 	mov	r19,r3
    6508:	00099180 	call	9918 <__muldf3>
    650c:	d9c00517 	ldw	r7,20(sp)
    6510:	d9800417 	ldw	r6,16(sp)
    6514:	a80b883a 	mov	r5,r21
    6518:	a009883a 	mov	r4,r20
    651c:	1021883a 	mov	r16,r2
    6520:	1823883a 	mov	r17,r3
    6524:	00099180 	call	9918 <__muldf3>
    6528:	180f883a 	mov	r7,r3
    652c:	880b883a 	mov	r5,r17
    6530:	8009883a 	mov	r4,r16
    6534:	100d883a 	mov	r6,r2
    6538:	00098240 	call	9824 <__subdf3>
    653c:	180f883a 	mov	r7,r3
    6540:	980b883a 	mov	r5,r19
    6544:	9009883a 	mov	r4,r18
    6548:	100d883a 	mov	r6,r2
    654c:	00098240 	call	9824 <__subdf3>
    6550:	d9400117 	ldw	r5,4(sp)
    6554:	d9000017 	ldw	r4,0(sp)
    6558:	180f883a 	mov	r7,r3
    655c:	100d883a 	mov	r6,r2
    6560:	003f6306 	br	62f0 <__kernel_cos+0x268>
    6564:	000d883a 	mov	r6,zero
    6568:	01cffc34 	movhi	r7,16368
    656c:	003f6306 	br	62fc <__kernel_cos+0x274>
    6570:	00bff834 	movhi	r2,65504
    6574:	b0ad883a 	add	r22,r22,r2
    6578:	dd800315 	stw	r22,12(sp)
    657c:	d9000317 	ldw	r4,12(sp)
    6580:	0005883a 	mov	r2,zero
    6584:	00cffc34 	movhi	r3,16368
    6588:	002d883a 	mov	r22,zero
    658c:	200f883a 	mov	r7,r4
    6590:	202f883a 	mov	r23,r4
    6594:	180b883a 	mov	r5,r3
    6598:	1009883a 	mov	r4,r2
    659c:	b00d883a 	mov	r6,r22
    65a0:	d8800215 	stw	r2,8(sp)
    65a4:	00098240 	call	9824 <__subdf3>
    65a8:	d8800015 	stw	r2,0(sp)
    65ac:	d8c00115 	stw	r3,4(sp)
    65b0:	003fc306 	br	64c0 <__kernel_cos+0x438>

000065b4 <__kernel_rem_pio2>:
    65b4:	deff5304 	addi	sp,sp,-692
    65b8:	d880ad17 	ldw	r2,692(sp)
    65bc:	d9009615 	stw	r4,600(sp)
    65c0:	d9409715 	stw	r5,604(sp)
    65c4:	1087883a 	add	r3,r2,r2
    65c8:	18c7883a 	add	r3,r3,r3
    65cc:	00800074 	movhi	r2,1
    65d0:	10ba2804 	addi	r2,r2,-5984
    65d4:	1887883a 	add	r3,r3,r2
    65d8:	18c00017 	ldw	r3,0(r3)
    65dc:	313fff44 	addi	r4,r6,-3
    65e0:	01400604 	movi	r5,24
    65e4:	df00ab15 	stw	fp,684(sp)
    65e8:	dc00a315 	stw	r16,652(sp)
    65ec:	d8c09515 	stw	r3,596(sp)
    65f0:	dfc0ac15 	stw	ra,688(sp)
    65f4:	ddc0aa15 	stw	r23,680(sp)
    65f8:	dd80a915 	stw	r22,676(sp)
    65fc:	dd40a815 	stw	r21,672(sp)
    6600:	dd00a715 	stw	r20,668(sp)
    6604:	dcc0a615 	stw	r19,664(sp)
    6608:	dc80a515 	stw	r18,660(sp)
    660c:	dc40a415 	stw	r17,656(sp)
    6610:	3021883a 	mov	r16,r6
    6614:	d9c09815 	stw	r7,608(sp)
    6618:	000a5e00 	call	a5e0 <__divsi3>
    661c:	d8c09817 	ldw	r3,608(sp)
    6620:	d8808c15 	stw	r2,560(sp)
    6624:	1f3fffc4 	addi	fp,r3,-1
    6628:	10031a16 	blt	r2,zero,7294 <__kernel_rem_pio2+0xce0>
    662c:	d9008c17 	ldw	r4,560(sp)
    6630:	017ffa04 	movi	r5,-24
    6634:	000a6b00 	call	a6b0 <__mulsi3>
    6638:	d9009517 	ldw	r4,596(sp)
    663c:	8085883a 	add	r2,r16,r2
    6640:	10bffa04 	addi	r2,r2,-24
    6644:	2707883a 	add	r3,r4,fp
    6648:	d8809315 	stw	r2,588(sp)
    664c:	18001616 	blt	r3,zero,66a8 <__kernel_rem_pio2+0xf4>
    6650:	d9408c17 	ldw	r5,560(sp)
    6654:	d980ae17 	ldw	r6,696(sp)
    6658:	dc801404 	addi	r18,sp,80
    665c:	2f21c83a 	sub	r16,r5,fp
    6660:	8405883a 	add	r2,r16,r16
    6664:	1085883a 	add	r2,r2,r2
    6668:	30a3883a 	add	r17,r6,r2
    666c:	80e7883a 	add	r19,r16,r3
    6670:	00000106 	br	6678 <__kernel_rem_pio2+0xc4>
    6674:	84000044 	addi	r16,r16,1
    6678:	0009883a 	mov	r4,zero
    667c:	000b883a 	mov	r5,zero
    6680:	80000416 	blt	r16,zero,6694 <__kernel_rem_pio2+0xe0>
    6684:	89000017 	ldw	r4,0(r17)
    6688:	000a1540 	call	a154 <__floatsidf>
    668c:	1009883a 	mov	r4,r2
    6690:	180b883a 	mov	r5,r3
    6694:	91400115 	stw	r5,4(r18)
    6698:	91000015 	stw	r4,0(r18)
    669c:	8c400104 	addi	r17,r17,4
    66a0:	94800204 	addi	r18,r18,8
    66a4:	84fff31e 	bne	r16,r19,6674 <__kernel_rem_pio2+0xc0>
    66a8:	d9c09517 	ldw	r7,596(sp)
    66ac:	38002416 	blt	r7,zero,6740 <__kernel_rem_pio2+0x18c>
    66b0:	da809817 	ldw	r10,608(sp)
    66b4:	e029883a 	mov	r20,fp
    66b8:	dd406404 	addi	r21,sp,400
    66bc:	3aaf883a 	add	r23,r7,r10
    66c0:	e02c403a 	cmpge	r22,fp,zero
    66c4:	b0023e26 	beq	r22,zero,6fc0 <__kernel_rem_pio2+0xa0c>
    66c8:	dcc09617 	ldw	r19,600(sp)
    66cc:	0021883a 	mov	r16,zero
    66d0:	0025883a 	mov	r18,zero
    66d4:	0023883a 	mov	r17,zero
    66d8:	a489c83a 	sub	r4,r20,r18
    66dc:	200890fa 	slli	r4,r4,3
    66e0:	99800017 	ldw	r6,0(r19)
    66e4:	99c00117 	ldw	r7,4(r19)
    66e8:	26c9883a 	add	r4,r4,sp
    66ec:	20c01517 	ldw	r3,84(r4)
    66f0:	20801417 	ldw	r2,80(r4)
    66f4:	94800044 	addi	r18,r18,1
    66f8:	180b883a 	mov	r5,r3
    66fc:	1009883a 	mov	r4,r2
    6700:	00099180 	call	9918 <__muldf3>
    6704:	180f883a 	mov	r7,r3
    6708:	880b883a 	mov	r5,r17
    670c:	8009883a 	mov	r4,r16
    6710:	100d883a 	mov	r6,r2
    6714:	00098a40 	call	98a4 <__adddf3>
    6718:	1021883a 	mov	r16,r2
    671c:	d8809817 	ldw	r2,608(sp)
    6720:	9cc00204 	addi	r19,r19,8
    6724:	1823883a 	mov	r17,r3
    6728:	14bfeb1e 	bne	r2,r18,66d8 <__kernel_rem_pio2+0x124>
    672c:	a5000044 	addi	r20,r20,1
    6730:	ac400115 	stw	r17,4(r21)
    6734:	ac000015 	stw	r16,0(r21)
    6738:	ad400204 	addi	r21,r21,8
    673c:	a5ffe11e 	bne	r20,r23,66c4 <__kernel_rem_pio2+0x110>
    6740:	d8c09517 	ldw	r3,596(sp)
    6744:	d9409317 	ldw	r5,588(sp)
    6748:	e038403a 	cmpge	fp,fp,zero
    674c:	d8c08d15 	stw	r3,564(sp)
    6750:	d9008d17 	ldw	r4,564(sp)
    6754:	18c5883a 	add	r2,r3,r3
    6758:	10c7883a 	add	r3,r2,r3
    675c:	1907883a 	add	r3,r3,r4
    6760:	1085883a 	add	r2,r2,r2
    6764:	16c5883a 	add	r2,r2,sp
    6768:	1ec7883a 	add	r3,r3,sp
    676c:	29400050 	cmplti	r5,r5,1
    6770:	df00a215 	stw	fp,648(sp)
    6774:	d8809915 	stw	r2,612(sp)
    6778:	d8c0a115 	stw	r3,644(sp)
    677c:	d940a015 	stw	r5,640(sp)
    6780:	d9808d17 	ldw	r6,564(sp)
    6784:	300490fa 	slli	r2,r6,3
    6788:	16c5883a 	add	r2,r2,sp
    678c:	15006417 	ldw	r20,400(r2)
    6790:	15406517 	ldw	r21,404(r2)
    6794:	01802e0e 	bge	zero,r6,6850 <__kernel_rem_pio2+0x29c>
    6798:	102d883a 	mov	r22,r2
    679c:	302f883a 	mov	r23,r6
    67a0:	d839883a 	mov	fp,sp
    67a4:	0005883a 	mov	r2,zero
    67a8:	00cf9c34 	movhi	r3,15984
    67ac:	180f883a 	mov	r7,r3
    67b0:	100d883a 	mov	r6,r2
    67b4:	a009883a 	mov	r4,r20
    67b8:	a80b883a 	mov	r5,r21
    67bc:	00099180 	call	9918 <__muldf3>
    67c0:	180b883a 	mov	r5,r3
    67c4:	1009883a 	mov	r4,r2
    67c8:	000a24c0 	call	a24c <__fixdfsi>
    67cc:	1009883a 	mov	r4,r2
    67d0:	000a1540 	call	a154 <__floatsidf>
    67d4:	1021883a 	mov	r16,r2
    67d8:	1823883a 	mov	r17,r3
    67dc:	0005883a 	mov	r2,zero
    67e0:	00f05c34 	movhi	r3,49520
    67e4:	180f883a 	mov	r7,r3
    67e8:	8009883a 	mov	r4,r16
    67ec:	880b883a 	mov	r5,r17
    67f0:	100d883a 	mov	r6,r2
    67f4:	00099180 	call	9918 <__muldf3>
    67f8:	180b883a 	mov	r5,r3
    67fc:	a80f883a 	mov	r7,r21
    6800:	a00d883a 	mov	r6,r20
    6804:	1009883a 	mov	r4,r2
    6808:	00098a40 	call	98a4 <__adddf3>
    680c:	180b883a 	mov	r5,r3
    6810:	1009883a 	mov	r4,r2
    6814:	000a24c0 	call	a24c <__fixdfsi>
    6818:	e0800015 	stw	r2,0(fp)
    681c:	b5bffe04 	addi	r22,r22,-8
    6820:	b0806417 	ldw	r2,400(r22)
    6824:	b0c06517 	ldw	r3,404(r22)
    6828:	8009883a 	mov	r4,r16
    682c:	880b883a 	mov	r5,r17
    6830:	180f883a 	mov	r7,r3
    6834:	100d883a 	mov	r6,r2
    6838:	00098a40 	call	98a4 <__adddf3>
    683c:	bdffffc4 	addi	r23,r23,-1
    6840:	e7000104 	addi	fp,fp,4
    6844:	1029883a 	mov	r20,r2
    6848:	182b883a 	mov	r21,r3
    684c:	b83fd51e 	bne	r23,zero,67a4 <__kernel_rem_pio2+0x1f0>
    6850:	d9809317 	ldw	r6,588(sp)
    6854:	a80b883a 	mov	r5,r21
    6858:	a009883a 	mov	r4,r20
    685c:	00077b00 	call	77b0 <scalbn>
    6860:	0009883a 	mov	r4,zero
    6864:	014ff034 	movhi	r5,16320
    6868:	280f883a 	mov	r7,r5
    686c:	200d883a 	mov	r6,r4
    6870:	180b883a 	mov	r5,r3
    6874:	1009883a 	mov	r4,r2
    6878:	1021883a 	mov	r16,r2
    687c:	1823883a 	mov	r17,r3
    6880:	00099180 	call	9918 <__muldf3>
    6884:	180b883a 	mov	r5,r3
    6888:	1009883a 	mov	r4,r2
    688c:	0003b640 	call	3b64 <floor>
    6890:	0011883a 	mov	r8,zero
    6894:	02700834 	movhi	r9,49184
    6898:	480f883a 	mov	r7,r9
    689c:	400d883a 	mov	r6,r8
    68a0:	180b883a 	mov	r5,r3
    68a4:	1009883a 	mov	r4,r2
    68a8:	00099180 	call	9918 <__muldf3>
    68ac:	180f883a 	mov	r7,r3
    68b0:	100d883a 	mov	r6,r2
    68b4:	880b883a 	mov	r5,r17
    68b8:	8009883a 	mov	r4,r16
    68bc:	00098a40 	call	98a4 <__adddf3>
    68c0:	180b883a 	mov	r5,r3
    68c4:	1009883a 	mov	r4,r2
    68c8:	1823883a 	mov	r17,r3
    68cc:	1021883a 	mov	r16,r2
    68d0:	000a24c0 	call	a24c <__fixdfsi>
    68d4:	1009883a 	mov	r4,r2
    68d8:	d8809415 	stw	r2,592(sp)
    68dc:	000a1540 	call	a154 <__floatsidf>
    68e0:	880b883a 	mov	r5,r17
    68e4:	8009883a 	mov	r4,r16
    68e8:	180f883a 	mov	r7,r3
    68ec:	100d883a 	mov	r6,r2
    68f0:	00098240 	call	9824 <__subdf3>
    68f4:	d9c0a017 	ldw	r7,640(sp)
    68f8:	180d883a 	mov	r6,r3
    68fc:	1021883a 	mov	r16,r2
    6900:	1823883a 	mov	r17,r3
    6904:	38017d1e 	bne	r7,zero,6efc <__kernel_rem_pio2+0x948>
    6908:	da808d17 	ldw	r10,564(sp)
    690c:	d9009317 	ldw	r4,588(sp)
    6910:	00c00604 	movi	r3,24
    6914:	50bfffc4 	addi	r2,r10,-1
    6918:	1085883a 	add	r2,r2,r2
    691c:	1085883a 	add	r2,r2,r2
    6920:	16c5883a 	add	r2,r2,sp
    6924:	11400017 	ldw	r5,0(r2)
    6928:	1907c83a 	sub	r3,r3,r4
    692c:	d9c09317 	ldw	r7,588(sp)
    6930:	28cdd83a 	sra	r6,r5,r3
    6934:	010005c4 	movi	r4,23
    6938:	da809417 	ldw	r10,592(sp)
    693c:	30c6983a 	sll	r3,r6,r3
    6940:	21c9c83a 	sub	r4,r4,r7
    6944:	5195883a 	add	r10,r10,r6
    6948:	28cbc83a 	sub	r5,r5,r3
    694c:	2909d83a 	sra	r4,r5,r4
    6950:	da809415 	stw	r10,592(sp)
    6954:	11400015 	stw	r5,0(r2)
    6958:	d9009215 	stw	r4,584(sp)
    695c:	d9409217 	ldw	r5,584(sp)
    6960:	0140270e 	bge	zero,r5,6a00 <__kernel_rem_pio2+0x44c>
    6964:	d9809417 	ldw	r6,592(sp)
    6968:	d9c08d17 	ldw	r7,564(sp)
    696c:	31800044 	addi	r6,r6,1
    6970:	d9809415 	stw	r6,592(sp)
    6974:	01c1a50e 	bge	zero,r7,700c <__kernel_rem_pio2+0xa58>
    6978:	002d883a 	mov	r22,zero
    697c:	000b883a 	mov	r5,zero
    6980:	d809883a 	mov	r4,sp
    6984:	01c04034 	movhi	r7,256
    6988:	01804034 	movhi	r6,256
    698c:	31bfffc4 	addi	r6,r6,-1
    6990:	00000806 	br	69b4 <__kernel_rem_pio2+0x400>
    6994:	38c5c83a 	sub	r2,r7,r3
    6998:	18000226 	beq	r3,zero,69a4 <__kernel_rem_pio2+0x3f0>
    699c:	05800044 	movi	r22,1
    69a0:	20800015 	stw	r2,0(r4)
    69a4:	da808d17 	ldw	r10,564(sp)
    69a8:	29400044 	addi	r5,r5,1
    69ac:	21000104 	addi	r4,r4,4
    69b0:	51400926 	beq	r10,r5,69d8 <__kernel_rem_pio2+0x424>
    69b4:	b004c03a 	cmpne	r2,r22,zero
    69b8:	20c00017 	ldw	r3,0(r4)
    69bc:	103ff526 	beq	r2,zero,6994 <__kernel_rem_pio2+0x3e0>
    69c0:	da808d17 	ldw	r10,564(sp)
    69c4:	30c5c83a 	sub	r2,r6,r3
    69c8:	29400044 	addi	r5,r5,1
    69cc:	20800015 	stw	r2,0(r4)
    69d0:	21000104 	addi	r4,r4,4
    69d4:	517ff71e 	bne	r10,r5,69b4 <__kernel_rem_pio2+0x400>
    69d8:	d880a017 	ldw	r2,640(sp)
    69dc:	1000051e 	bne	r2,zero,69f4 <__kernel_rem_pio2+0x440>
    69e0:	d8c09317 	ldw	r3,588(sp)
    69e4:	00800044 	movi	r2,1
    69e8:	18814e26 	beq	r3,r2,6f24 <__kernel_rem_pio2+0x970>
    69ec:	00800084 	movi	r2,2
    69f0:	18815826 	beq	r3,r2,6f54 <__kernel_rem_pio2+0x9a0>
    69f4:	d9c09217 	ldw	r7,584(sp)
    69f8:	00800084 	movi	r2,2
    69fc:	38806926 	beq	r7,r2,6ba4 <__kernel_rem_pio2+0x5f0>
    6a00:	000d883a 	mov	r6,zero
    6a04:	000f883a 	mov	r7,zero
    6a08:	8009883a 	mov	r4,r16
    6a0c:	880b883a 	mov	r5,r17
    6a10:	0009f340 	call	9f34 <__eqdf2>
    6a14:	1000811e 	bne	r2,zero,6c1c <__kernel_rem_pio2+0x668>
    6a18:	da808d17 	ldw	r10,564(sp)
    6a1c:	d8809517 	ldw	r2,596(sp)
    6a20:	51bfffc4 	addi	r6,r10,-1
    6a24:	30800c16 	blt	r6,r2,6a58 <__kernel_rem_pio2+0x4a4>
    6a28:	3185883a 	add	r2,r6,r6
    6a2c:	1085883a 	add	r2,r2,r2
    6a30:	16c9883a 	add	r4,r2,sp
    6a34:	3007883a 	mov	r3,r6
    6a38:	000b883a 	mov	r5,zero
    6a3c:	20800017 	ldw	r2,0(r4)
    6a40:	d9c09517 	ldw	r7,596(sp)
    6a44:	18ffffc4 	addi	r3,r3,-1
    6a48:	213fff04 	addi	r4,r4,-4
    6a4c:	288ab03a 	or	r5,r5,r2
    6a50:	19fffa0e 	bge	r3,r7,6a3c <__kernel_rem_pio2+0x488>
    6a54:	2800791e 	bne	r5,zero,6c3c <__kernel_rem_pio2+0x688>
    6a58:	da809917 	ldw	r10,612(sp)
    6a5c:	50bfff17 	ldw	r2,-4(r10)
    6a60:	1001511e 	bne	r2,zero,6fa8 <__kernel_rem_pio2+0x9f4>
    6a64:	d880a117 	ldw	r2,644(sp)
    6a68:	01000044 	movi	r4,1
    6a6c:	10ffff04 	addi	r3,r2,-4
    6a70:	18ffff04 	addi	r3,r3,-4
    6a74:	18800017 	ldw	r2,0(r3)
    6a78:	21000044 	addi	r4,r4,1
    6a7c:	103ffc26 	beq	r2,zero,6a70 <__kernel_rem_pio2+0x4bc>
    6a80:	d8c08d17 	ldw	r3,564(sp)
    6a84:	192f883a 	add	r23,r3,r4
    6a88:	1f000044 	addi	fp,r3,1
    6a8c:	bf00020e 	bge	r23,fp,6a98 <__kernel_rem_pio2+0x4e4>
    6a90:	ddc08d15 	stw	r23,564(sp)
    6a94:	003f3a06 	br	6780 <__kernel_rem_pio2+0x1cc>
    6a98:	d9408c17 	ldw	r5,560(sp)
    6a9c:	d9009817 	ldw	r4,608(sp)
    6aa0:	da80ae17 	ldw	r10,696(sp)
    6aa4:	1945883a 	add	r2,r3,r5
    6aa8:	190f883a 	add	r7,r3,r4
    6aac:	1085883a 	add	r2,r2,r2
    6ab0:	380a90fa 	slli	r5,r7,3
    6ab4:	e00c90fa 	slli	r6,fp,3
    6ab8:	1085883a 	add	r2,r2,r2
    6abc:	5085883a 	add	r2,r10,r2
    6ac0:	d8c01404 	addi	r3,sp,80
    6ac4:	d9006404 	addi	r4,sp,400
    6ac8:	10800104 	addi	r2,r2,4
    6acc:	196b883a 	add	r21,r3,r5
    6ad0:	21a1883a 	add	r16,r4,r6
    6ad4:	d8809115 	stw	r2,580(sp)
    6ad8:	d9c09015 	stw	r7,576(sp)
    6adc:	d8809117 	ldw	r2,580(sp)
    6ae0:	11000017 	ldw	r4,0(r2)
    6ae4:	000a1540 	call	a154 <__floatsidf>
    6ae8:	a8c00115 	stw	r3,4(r21)
    6aec:	d8c0a217 	ldw	r3,648(sp)
    6af0:	a8800015 	stw	r2,0(r21)
    6af4:	18002826 	beq	r3,zero,6b98 <__kernel_rem_pio2+0x5e4>
    6af8:	d9009017 	ldw	r4,576(sp)
    6afc:	dd009617 	ldw	r20,600(sp)
    6b00:	0023883a 	mov	r17,zero
    6b04:	200490fa 	slli	r2,r4,3
    6b08:	002d883a 	mov	r22,zero
    6b0c:	0025883a 	mov	r18,zero
    6b10:	16e7883a 	add	r19,r2,sp
    6b14:	98801417 	ldw	r2,80(r19)
    6b18:	98c01517 	ldw	r3,84(r19)
    6b1c:	a1800017 	ldw	r6,0(r20)
    6b20:	a1c00117 	ldw	r7,4(r20)
    6b24:	180b883a 	mov	r5,r3
    6b28:	1009883a 	mov	r4,r2
    6b2c:	00099180 	call	9918 <__muldf3>
    6b30:	180f883a 	mov	r7,r3
    6b34:	900b883a 	mov	r5,r18
    6b38:	8809883a 	mov	r4,r17
    6b3c:	100d883a 	mov	r6,r2
    6b40:	00098a40 	call	98a4 <__adddf3>
    6b44:	d9409817 	ldw	r5,608(sp)
    6b48:	b5800044 	addi	r22,r22,1
    6b4c:	9cfffe04 	addi	r19,r19,-8
    6b50:	1023883a 	mov	r17,r2
    6b54:	1825883a 	mov	r18,r3
    6b58:	a5000204 	addi	r20,r20,8
    6b5c:	2dbfed1e 	bne	r5,r22,6b14 <__kernel_rem_pio2+0x560>
    6b60:	d9809117 	ldw	r6,580(sp)
    6b64:	d9c09017 	ldw	r7,576(sp)
    6b68:	e7000044 	addi	fp,fp,1
    6b6c:	31800104 	addi	r6,r6,4
    6b70:	39c00044 	addi	r7,r7,1
    6b74:	84800115 	stw	r18,4(r16)
    6b78:	84400015 	stw	r17,0(r16)
    6b7c:	d9809115 	stw	r6,580(sp)
    6b80:	ad400204 	addi	r21,r21,8
    6b84:	84000204 	addi	r16,r16,8
    6b88:	d9c09015 	stw	r7,576(sp)
    6b8c:	bf3fd30e 	bge	r23,fp,6adc <__kernel_rem_pio2+0x528>
    6b90:	ddc08d15 	stw	r23,564(sp)
    6b94:	003efa06 	br	6780 <__kernel_rem_pio2+0x1cc>
    6b98:	0023883a 	mov	r17,zero
    6b9c:	0025883a 	mov	r18,zero
    6ba0:	003fef06 	br	6b60 <__kernel_rem_pio2+0x5ac>
    6ba4:	0029883a 	mov	r20,zero
    6ba8:	054ffc34 	movhi	r21,16368
    6bac:	880f883a 	mov	r7,r17
    6bb0:	800d883a 	mov	r6,r16
    6bb4:	a009883a 	mov	r4,r20
    6bb8:	a80b883a 	mov	r5,r21
    6bbc:	00098240 	call	9824 <__subdf3>
    6bc0:	1025883a 	mov	r18,r2
    6bc4:	b005003a 	cmpeq	r2,r22,zero
    6bc8:	1827883a 	mov	r19,r3
    6bcc:	9021883a 	mov	r16,r18
    6bd0:	1823883a 	mov	r17,r3
    6bd4:	103f8a1e 	bne	r2,zero,6a00 <__kernel_rem_pio2+0x44c>
    6bd8:	d9809317 	ldw	r6,588(sp)
    6bdc:	0009883a 	mov	r4,zero
    6be0:	a80b883a 	mov	r5,r21
    6be4:	00077b00 	call	77b0 <scalbn>
    6be8:	180f883a 	mov	r7,r3
    6bec:	9009883a 	mov	r4,r18
    6bf0:	980b883a 	mov	r5,r19
    6bf4:	100d883a 	mov	r6,r2
    6bf8:	00098240 	call	9824 <__subdf3>
    6bfc:	1021883a 	mov	r16,r2
    6c00:	1823883a 	mov	r17,r3
    6c04:	000d883a 	mov	r6,zero
    6c08:	000f883a 	mov	r7,zero
    6c0c:	8009883a 	mov	r4,r16
    6c10:	880b883a 	mov	r5,r17
    6c14:	0009f340 	call	9f34 <__eqdf2>
    6c18:	103f7f26 	beq	r2,zero,6a18 <__kernel_rem_pio2+0x464>
    6c1c:	000d883a 	mov	r6,zero
    6c20:	000f883a 	mov	r7,zero
    6c24:	8009883a 	mov	r4,r16
    6c28:	880b883a 	mov	r5,r17
    6c2c:	0009f340 	call	9f34 <__eqdf2>
    6c30:	10019a1e 	bne	r2,zero,729c <__kernel_rem_pio2+0xce8>
    6c34:	da808d17 	ldw	r10,564(sp)
    6c38:	51bfffc4 	addi	r6,r10,-1
    6c3c:	3185883a 	add	r2,r6,r6
    6c40:	1085883a 	add	r2,r2,r2
    6c44:	d9009317 	ldw	r4,588(sp)
    6c48:	16c5883a 	add	r2,r2,sp
    6c4c:	10c00017 	ldw	r3,0(r2)
    6c50:	213ffa04 	addi	r4,r4,-24
    6c54:	d9009315 	stw	r4,588(sp)
    6c58:	1801d41e 	bne	r3,zero,73ac <__kernel_rem_pio2+0xdf8>
    6c5c:	d9808d15 	stw	r6,564(sp)
    6c60:	1007883a 	mov	r3,r2
    6c64:	d9408d17 	ldw	r5,564(sp)
    6c68:	d9809317 	ldw	r6,588(sp)
    6c6c:	18ffff04 	addi	r3,r3,-4
    6c70:	18800017 	ldw	r2,0(r3)
    6c74:	297fffc4 	addi	r5,r5,-1
    6c78:	31bffa04 	addi	r6,r6,-24
    6c7c:	d9408d15 	stw	r5,564(sp)
    6c80:	d9809315 	stw	r6,588(sp)
    6c84:	103ff726 	beq	r2,zero,6c64 <__kernel_rem_pio2+0x6b0>
    6c88:	d9809317 	ldw	r6,588(sp)
    6c8c:	0005883a 	mov	r2,zero
    6c90:	00cffc34 	movhi	r3,16368
    6c94:	180b883a 	mov	r5,r3
    6c98:	1009883a 	mov	r4,r2
    6c9c:	00077b00 	call	77b0 <scalbn>
    6ca0:	d9808d17 	ldw	r6,564(sp)
    6ca4:	1021883a 	mov	r16,r2
    6ca8:	1823883a 	mov	r17,r3
    6cac:	30004616 	blt	r6,zero,6dc8 <__kernel_rem_pio2+0x814>
    6cb0:	300690fa 	slli	r3,r6,3
    6cb4:	3185883a 	add	r2,r6,r6
    6cb8:	1085883a 	add	r2,r2,r2
    6cbc:	16e9883a 	add	r20,r2,sp
    6cc0:	1ee5883a 	add	r18,r3,sp
    6cc4:	3027883a 	mov	r19,r6
    6cc8:	057fffc4 	movi	r21,-1
    6ccc:	a1000017 	ldw	r4,0(r20)
    6cd0:	9cffffc4 	addi	r19,r19,-1
    6cd4:	a53fff04 	addi	r20,r20,-4
    6cd8:	000a1540 	call	a154 <__floatsidf>
    6cdc:	800d883a 	mov	r6,r16
    6ce0:	880f883a 	mov	r7,r17
    6ce4:	180b883a 	mov	r5,r3
    6ce8:	1009883a 	mov	r4,r2
    6cec:	00099180 	call	9918 <__muldf3>
    6cf0:	0015883a 	mov	r10,zero
    6cf4:	02cf9c34 	movhi	r11,15984
    6cf8:	880b883a 	mov	r5,r17
    6cfc:	8009883a 	mov	r4,r16
    6d00:	90c06515 	stw	r3,404(r18)
    6d04:	90806415 	stw	r2,400(r18)
    6d08:	580f883a 	mov	r7,r11
    6d0c:	500d883a 	mov	r6,r10
    6d10:	00099180 	call	9918 <__muldf3>
    6d14:	1021883a 	mov	r16,r2
    6d18:	1823883a 	mov	r17,r3
    6d1c:	94bffe04 	addi	r18,r18,-8
    6d20:	9d7fea1e 	bne	r19,r21,6ccc <__kernel_rem_pio2+0x718>
    6d24:	d9c09517 	ldw	r7,596(sp)
    6d28:	dd808d17 	ldw	r22,564(sp)
    6d2c:	002b883a 	mov	r21,zero
    6d30:	382e403a 	cmpge	r23,r7,zero
    6d34:	b800aa26 	beq	r23,zero,6fe0 <__kernel_rem_pio2+0xa2c>
    6d38:	a800a916 	blt	r21,zero,6fe0 <__kernel_rem_pio2+0xa2c>
    6d3c:	b00690fa 	slli	r3,r22,3
    6d40:	d8806404 	addi	r2,sp,400
    6d44:	0021883a 	mov	r16,zero
    6d48:	10e9883a 	add	r20,r2,r3
    6d4c:	0027883a 	mov	r19,zero
    6d50:	0023883a 	mov	r17,zero
    6d54:	04800074 	movhi	r18,1
    6d58:	94ba2c04 	addi	r18,r18,-5968
    6d5c:	00000106 	br	6d64 <__kernel_rem_pio2+0x7b0>
    6d60:	acc01116 	blt	r21,r19,6da8 <__kernel_rem_pio2+0x7f4>
    6d64:	91000017 	ldw	r4,0(r18)
    6d68:	91400117 	ldw	r5,4(r18)
    6d6c:	a1800017 	ldw	r6,0(r20)
    6d70:	a1c00117 	ldw	r7,4(r20)
    6d74:	9cc00044 	addi	r19,r19,1
    6d78:	94800204 	addi	r18,r18,8
    6d7c:	00099180 	call	9918 <__muldf3>
    6d80:	180f883a 	mov	r7,r3
    6d84:	880b883a 	mov	r5,r17
    6d88:	8009883a 	mov	r4,r16
    6d8c:	100d883a 	mov	r6,r2
    6d90:	00098a40 	call	98a4 <__adddf3>
    6d94:	da809517 	ldw	r10,596(sp)
    6d98:	a5000204 	addi	r20,r20,8
    6d9c:	1021883a 	mov	r16,r2
    6da0:	1823883a 	mov	r17,r3
    6da4:	54ffee0e 	bge	r10,r19,6d60 <__kernel_rem_pio2+0x7ac>
    6da8:	a80490fa 	slli	r2,r21,3
    6dac:	b5bfffc4 	addi	r22,r22,-1
    6db0:	ad400044 	addi	r21,r21,1
    6db4:	16c5883a 	add	r2,r2,sp
    6db8:	14403d15 	stw	r17,244(r2)
    6dbc:	14003c15 	stw	r16,240(r2)
    6dc0:	00bfffc4 	movi	r2,-1
    6dc4:	b0bfdb1e 	bne	r22,r2,6d34 <__kernel_rem_pio2+0x780>
    6dc8:	d8c0ad17 	ldw	r3,692(sp)
    6dcc:	00800084 	movi	r2,2
    6dd0:	10c09316 	blt	r2,r3,7020 <__kernel_rem_pio2+0xa6c>
    6dd4:	00c1120e 	bge	zero,r3,7220 <__kernel_rem_pio2+0xc6c>
    6dd8:	d9808d17 	ldw	r6,564(sp)
    6ddc:	30018d16 	blt	r6,zero,7414 <__kernel_rem_pio2+0xe60>
    6de0:	d8c08d17 	ldw	r3,564(sp)
    6de4:	0011883a 	mov	r8,zero
    6de8:	0013883a 	mov	r9,zero
    6dec:	180490fa 	slli	r2,r3,3
    6df0:	1823883a 	mov	r17,r3
    6df4:	04bfffc4 	movi	r18,-1
    6df8:	16e1883a 	add	r16,r2,sp
    6dfc:	80803c17 	ldw	r2,240(r16)
    6e00:	80c03d17 	ldw	r3,244(r16)
    6e04:	480b883a 	mov	r5,r9
    6e08:	4009883a 	mov	r4,r8
    6e0c:	180f883a 	mov	r7,r3
    6e10:	100d883a 	mov	r6,r2
    6e14:	00098a40 	call	98a4 <__adddf3>
    6e18:	8c7fffc4 	addi	r17,r17,-1
    6e1c:	843ffe04 	addi	r16,r16,-8
    6e20:	1011883a 	mov	r8,r2
    6e24:	1813883a 	mov	r9,r3
    6e28:	8cbff41e 	bne	r17,r18,6dfc <__kernel_rem_pio2+0x848>
    6e2c:	d9009217 	ldw	r4,584(sp)
    6e30:	20015b1e 	bne	r4,zero,73a0 <__kernel_rem_pio2+0xdec>
    6e34:	4009883a 	mov	r4,r8
    6e38:	480b883a 	mov	r5,r9
    6e3c:	d9809717 	ldw	r6,604(sp)
    6e40:	d8803c17 	ldw	r2,240(sp)
    6e44:	480f883a 	mov	r7,r9
    6e48:	31400115 	stw	r5,4(r6)
    6e4c:	31000015 	stw	r4,0(r6)
    6e50:	d8c03d17 	ldw	r3,244(sp)
    6e54:	400d883a 	mov	r6,r8
    6e58:	1009883a 	mov	r4,r2
    6e5c:	180b883a 	mov	r5,r3
    6e60:	00098240 	call	9824 <__subdf3>
    6e64:	d9c08d17 	ldw	r7,564(sp)
    6e68:	1011883a 	mov	r8,r2
    6e6c:	1813883a 	mov	r9,r3
    6e70:	01c00d0e 	bge	zero,r7,6ea8 <__kernel_rem_pio2+0x8f4>
    6e74:	0023883a 	mov	r17,zero
    6e78:	dc003e04 	addi	r16,sp,248
    6e7c:	81800017 	ldw	r6,0(r16)
    6e80:	81c00117 	ldw	r7,4(r16)
    6e84:	480b883a 	mov	r5,r9
    6e88:	4009883a 	mov	r4,r8
    6e8c:	00098a40 	call	98a4 <__adddf3>
    6e90:	da808d17 	ldw	r10,564(sp)
    6e94:	8c400044 	addi	r17,r17,1
    6e98:	1011883a 	mov	r8,r2
    6e9c:	1813883a 	mov	r9,r3
    6ea0:	84000204 	addi	r16,r16,8
    6ea4:	8abff51e 	bne	r17,r10,6e7c <__kernel_rem_pio2+0x8c8>
    6ea8:	d8809217 	ldw	r2,584(sp)
    6eac:	10000226 	beq	r2,zero,6eb8 <__kernel_rem_pio2+0x904>
    6eb0:	48e0003c 	xorhi	r3,r9,32768
    6eb4:	1813883a 	mov	r9,r3
    6eb8:	d8c09717 	ldw	r3,604(sp)
    6ebc:	1a400315 	stw	r9,12(r3)
    6ec0:	1a000215 	stw	r8,8(r3)
    6ec4:	d8c09417 	ldw	r3,592(sp)
    6ec8:	188001cc 	andi	r2,r3,7
    6ecc:	dfc0ac17 	ldw	ra,688(sp)
    6ed0:	df00ab17 	ldw	fp,684(sp)
    6ed4:	ddc0aa17 	ldw	r23,680(sp)
    6ed8:	dd80a917 	ldw	r22,676(sp)
    6edc:	dd40a817 	ldw	r21,672(sp)
    6ee0:	dd00a717 	ldw	r20,668(sp)
    6ee4:	dcc0a617 	ldw	r19,664(sp)
    6ee8:	dc80a517 	ldw	r18,660(sp)
    6eec:	dc40a417 	ldw	r17,656(sp)
    6ef0:	dc00a317 	ldw	r16,652(sp)
    6ef4:	dec0ad04 	addi	sp,sp,692
    6ef8:	f800283a 	ret
    6efc:	d8809317 	ldw	r2,588(sp)
    6f00:	10001f1e 	bne	r2,zero,6f80 <__kernel_rem_pio2+0x9cc>
    6f04:	d8c08d17 	ldw	r3,564(sp)
    6f08:	18c5883a 	add	r2,r3,r3
    6f0c:	1085883a 	add	r2,r2,r2
    6f10:	16c5883a 	add	r2,r2,sp
    6f14:	10ffff17 	ldw	r3,-4(r2)
    6f18:	1807d5fa 	srai	r3,r3,23
    6f1c:	d8c09215 	stw	r3,584(sp)
    6f20:	003e8e06 	br	695c <__kernel_rem_pio2+0x3a8>
    6f24:	d9008d17 	ldw	r4,564(sp)
    6f28:	d9409317 	ldw	r5,588(sp)
    6f2c:	2145c83a 	sub	r2,r4,r5
    6f30:	1085883a 	add	r2,r2,r2
    6f34:	1085883a 	add	r2,r2,r2
    6f38:	16c5883a 	add	r2,r2,sp
    6f3c:	10c00017 	ldw	r3,0(r2)
    6f40:	01002034 	movhi	r4,128
    6f44:	213fffc4 	addi	r4,r4,-1
    6f48:	1906703a 	and	r3,r3,r4
    6f4c:	10c00015 	stw	r3,0(r2)
    6f50:	003ea806 	br	69f4 <__kernel_rem_pio2+0x440>
    6f54:	d9808d17 	ldw	r6,564(sp)
    6f58:	01001034 	movhi	r4,64
    6f5c:	213fffc4 	addi	r4,r4,-1
    6f60:	30bfffc4 	addi	r2,r6,-1
    6f64:	1085883a 	add	r2,r2,r2
    6f68:	1085883a 	add	r2,r2,r2
    6f6c:	16c5883a 	add	r2,r2,sp
    6f70:	10c00017 	ldw	r3,0(r2)
    6f74:	1906703a 	and	r3,r3,r4
    6f78:	10c00015 	stw	r3,0(r2)
    6f7c:	003e9d06 	br	69f4 <__kernel_rem_pio2+0x440>
    6f80:	0005883a 	mov	r2,zero
    6f84:	00cff834 	movhi	r3,16352
    6f88:	300b883a 	mov	r5,r6
    6f8c:	180f883a 	mov	r7,r3
    6f90:	8009883a 	mov	r4,r16
    6f94:	100d883a 	mov	r6,r2
    6f98:	000a0440 	call	a044 <__gedf2>
    6f9c:	10001d0e 	bge	r2,zero,7014 <__kernel_rem_pio2+0xa60>
    6fa0:	d8009215 	stw	zero,584(sp)
    6fa4:	003e9606 	br	6a00 <__kernel_rem_pio2+0x44c>
    6fa8:	d8c08d17 	ldw	r3,564(sp)
    6fac:	01000044 	movi	r4,1
    6fb0:	192f883a 	add	r23,r3,r4
    6fb4:	1f000044 	addi	fp,r3,1
    6fb8:	bf3eb516 	blt	r23,fp,6a90 <__kernel_rem_pio2+0x4dc>
    6fbc:	003eb606 	br	6a98 <__kernel_rem_pio2+0x4e4>
    6fc0:	0021883a 	mov	r16,zero
    6fc4:	0023883a 	mov	r17,zero
    6fc8:	a5000044 	addi	r20,r20,1
    6fcc:	ac400115 	stw	r17,4(r21)
    6fd0:	ac000015 	stw	r16,0(r21)
    6fd4:	ad400204 	addi	r21,r21,8
    6fd8:	a5fdba1e 	bne	r20,r23,66c4 <__kernel_rem_pio2+0x110>
    6fdc:	003dd806 	br	6740 <__kernel_rem_pio2+0x18c>
    6fe0:	a80490fa 	slli	r2,r21,3
    6fe4:	0021883a 	mov	r16,zero
    6fe8:	0023883a 	mov	r17,zero
    6fec:	16c5883a 	add	r2,r2,sp
    6ff0:	14403d15 	stw	r17,244(r2)
    6ff4:	14003c15 	stw	r16,240(r2)
    6ff8:	b5bfffc4 	addi	r22,r22,-1
    6ffc:	00bfffc4 	movi	r2,-1
    7000:	ad400044 	addi	r21,r21,1
    7004:	b0bf4b1e 	bne	r22,r2,6d34 <__kernel_rem_pio2+0x780>
    7008:	003f6f06 	br	6dc8 <__kernel_rem_pio2+0x814>
    700c:	002d883a 	mov	r22,zero
    7010:	003e7106 	br	69d8 <__kernel_rem_pio2+0x424>
    7014:	01000084 	movi	r4,2
    7018:	d9009215 	stw	r4,584(sp)
    701c:	003e5106 	br	6964 <__kernel_rem_pio2+0x3b0>
    7020:	d900ad17 	ldw	r4,692(sp)
    7024:	008000c4 	movi	r2,3
    7028:	20bfa61e 	bne	r4,r2,6ec4 <__kernel_rem_pio2+0x910>
    702c:	d9c08d17 	ldw	r7,564(sp)
    7030:	01c02c0e 	bge	zero,r7,70e4 <__kernel_rem_pio2+0xb30>
    7034:	3805883a 	mov	r2,r7
    7038:	00000106 	br	7040 <__kernel_rem_pio2+0xa8c>
    703c:	d8808e17 	ldw	r2,568(sp)
    7040:	113fffc4 	addi	r4,r2,-1
    7044:	100690fa 	slli	r3,r2,3
    7048:	200490fa 	slli	r2,r4,3
    704c:	d9008e15 	stw	r4,568(sp)
    7050:	1ef9883a 	add	fp,r3,sp
    7054:	16c5883a 	add	r2,r2,sp
    7058:	d8809a15 	stw	r2,616(sp)
    705c:	11403c04 	addi	r5,r2,240
    7060:	e1803c04 	addi	r6,fp,240
    7064:	14003c17 	ldw	r16,240(r2)
    7068:	e5003c17 	ldw	r20,240(fp)
    706c:	d9409b15 	stw	r5,620(sp)
    7070:	d9809c15 	stw	r6,624(sp)
    7074:	35400117 	ldw	r21,4(r6)
    7078:	2c400117 	ldw	r17,4(r5)
    707c:	8009883a 	mov	r4,r16
    7080:	a00d883a 	mov	r6,r20
    7084:	880b883a 	mov	r5,r17
    7088:	a80f883a 	mov	r7,r21
    708c:	00098a40 	call	98a4 <__adddf3>
    7090:	100d883a 	mov	r6,r2
    7094:	880b883a 	mov	r5,r17
    7098:	8009883a 	mov	r4,r16
    709c:	180f883a 	mov	r7,r3
    70a0:	1025883a 	mov	r18,r2
    70a4:	1827883a 	mov	r19,r3
    70a8:	00098240 	call	9824 <__subdf3>
    70ac:	180f883a 	mov	r7,r3
    70b0:	a80b883a 	mov	r5,r21
    70b4:	a009883a 	mov	r4,r20
    70b8:	100d883a 	mov	r6,r2
    70bc:	00098a40 	call	98a4 <__adddf3>
    70c0:	e0803c15 	stw	r2,240(fp)
    70c4:	d9c09c17 	ldw	r7,624(sp)
    70c8:	38c00115 	stw	r3,4(r7)
    70cc:	da809a17 	ldw	r10,616(sp)
    70d0:	54803c15 	stw	r18,240(r10)
    70d4:	d8809b17 	ldw	r2,620(sp)
    70d8:	14c00115 	stw	r19,4(r2)
    70dc:	d8c08e17 	ldw	r3,568(sp)
    70e0:	183fd61e 	bne	r3,zero,703c <__kernel_rem_pio2+0xa88>
    70e4:	d9008d17 	ldw	r4,564(sp)
    70e8:	00800044 	movi	r2,1
    70ec:	1100cc0e 	bge	r2,r4,7420 <__kernel_rem_pio2+0xe6c>
    70f0:	d8808d17 	ldw	r2,564(sp)
    70f4:	117fffc4 	addi	r5,r2,-1
    70f8:	100690fa 	slli	r3,r2,3
    70fc:	280490fa 	slli	r2,r5,3
    7100:	d9408f15 	stw	r5,572(sp)
    7104:	1ef9883a 	add	fp,r3,sp
    7108:	16c5883a 	add	r2,r2,sp
    710c:	d8809d15 	stw	r2,628(sp)
    7110:	11803c04 	addi	r6,r2,240
    7114:	e1c03c04 	addi	r7,fp,240
    7118:	14003c17 	ldw	r16,240(r2)
    711c:	e5003c17 	ldw	r20,240(fp)
    7120:	d9809e15 	stw	r6,632(sp)
    7124:	d9c09f15 	stw	r7,636(sp)
    7128:	34400117 	ldw	r17,4(r6)
    712c:	3d400117 	ldw	r21,4(r7)
    7130:	8009883a 	mov	r4,r16
    7134:	880b883a 	mov	r5,r17
    7138:	a00d883a 	mov	r6,r20
    713c:	a80f883a 	mov	r7,r21
    7140:	00098a40 	call	98a4 <__adddf3>
    7144:	100d883a 	mov	r6,r2
    7148:	880b883a 	mov	r5,r17
    714c:	8009883a 	mov	r4,r16
    7150:	180f883a 	mov	r7,r3
    7154:	1025883a 	mov	r18,r2
    7158:	1827883a 	mov	r19,r3
    715c:	00098240 	call	9824 <__subdf3>
    7160:	180f883a 	mov	r7,r3
    7164:	a80b883a 	mov	r5,r21
    7168:	a009883a 	mov	r4,r20
    716c:	100d883a 	mov	r6,r2
    7170:	00098a40 	call	98a4 <__adddf3>
    7174:	e0803c15 	stw	r2,240(fp)
    7178:	da809f17 	ldw	r10,636(sp)
    717c:	50c00115 	stw	r3,4(r10)
    7180:	d8c09d17 	ldw	r3,628(sp)
    7184:	d8808f17 	ldw	r2,572(sp)
    7188:	1c803c15 	stw	r18,240(r3)
    718c:	d9009e17 	ldw	r4,632(sp)
    7190:	00c00044 	movi	r3,1
    7194:	24c00115 	stw	r19,4(r4)
    7198:	d9408f17 	ldw	r5,572(sp)
    719c:	28ffd51e 	bne	r5,r3,70f4 <__kernel_rem_pio2+0xb40>
    71a0:	dc008d17 	ldw	r16,564(sp)
    71a4:	0011883a 	mov	r8,zero
    71a8:	1825883a 	mov	r18,r3
    71ac:	800490fa 	slli	r2,r16,3
    71b0:	0013883a 	mov	r9,zero
    71b4:	16e3883a 	add	r17,r2,sp
    71b8:	88803c17 	ldw	r2,240(r17)
    71bc:	88c03d17 	ldw	r3,244(r17)
    71c0:	480b883a 	mov	r5,r9
    71c4:	4009883a 	mov	r4,r8
    71c8:	180f883a 	mov	r7,r3
    71cc:	100d883a 	mov	r6,r2
    71d0:	00098a40 	call	98a4 <__adddf3>
    71d4:	843fffc4 	addi	r16,r16,-1
    71d8:	8c7ffe04 	addi	r17,r17,-8
    71dc:	1011883a 	mov	r8,r2
    71e0:	1813883a 	mov	r9,r3
    71e4:	84bff41e 	bne	r16,r18,71b8 <__kernel_rem_pio2+0xc04>
    71e8:	d9809217 	ldw	r6,584(sp)
    71ec:	30007a1e 	bne	r6,zero,73d8 <__kernel_rem_pio2+0xe24>
    71f0:	d9c09717 	ldw	r7,604(sp)
    71f4:	d8803c17 	ldw	r2,240(sp)
    71f8:	d9003e17 	ldw	r4,248(sp)
    71fc:	3a400515 	stw	r9,20(r7)
    7200:	d8c03d17 	ldw	r3,244(sp)
    7204:	d9403f17 	ldw	r5,252(sp)
    7208:	3a000415 	stw	r8,16(r7)
    720c:	38c00115 	stw	r3,4(r7)
    7210:	39400315 	stw	r5,12(r7)
    7214:	38800015 	stw	r2,0(r7)
    7218:	39000215 	stw	r4,8(r7)
    721c:	003f2906 	br	6ec4 <__kernel_rem_pio2+0x910>
    7220:	183f281e 	bne	r3,zero,6ec4 <__kernel_rem_pio2+0x910>
    7224:	d9408d17 	ldw	r5,564(sp)
    7228:	28008016 	blt	r5,zero,742c <__kernel_rem_pio2+0xe78>
    722c:	dc008d17 	ldw	r16,564(sp)
    7230:	000d883a 	mov	r6,zero
    7234:	000f883a 	mov	r7,zero
    7238:	800490fa 	slli	r2,r16,3
    723c:	04bfffc4 	movi	r18,-1
    7240:	16e3883a 	add	r17,r2,sp
    7244:	88803c17 	ldw	r2,240(r17)
    7248:	88c03d17 	ldw	r3,244(r17)
    724c:	380b883a 	mov	r5,r7
    7250:	3009883a 	mov	r4,r6
    7254:	180f883a 	mov	r7,r3
    7258:	100d883a 	mov	r6,r2
    725c:	00098a40 	call	98a4 <__adddf3>
    7260:	843fffc4 	addi	r16,r16,-1
    7264:	8c7ffe04 	addi	r17,r17,-8
    7268:	100d883a 	mov	r6,r2
    726c:	180f883a 	mov	r7,r3
    7270:	84bff41e 	bne	r16,r18,7244 <__kernel_rem_pio2+0xc90>
    7274:	da809217 	ldw	r10,584(sp)
    7278:	50000226 	beq	r10,zero,7284 <__kernel_rem_pio2+0xcd0>
    727c:	38e0003c 	xorhi	r3,r7,32768
    7280:	180f883a 	mov	r7,r3
    7284:	d8809717 	ldw	r2,604(sp)
    7288:	11c00115 	stw	r7,4(r2)
    728c:	11800015 	stw	r6,0(r2)
    7290:	003f0c06 	br	6ec4 <__kernel_rem_pio2+0x910>
    7294:	d8008c15 	stw	zero,560(sp)
    7298:	003ce406 	br	662c <__kernel_rem_pio2+0x78>
    729c:	d9c09317 	ldw	r7,588(sp)
    72a0:	880b883a 	mov	r5,r17
    72a4:	8009883a 	mov	r4,r16
    72a8:	01cdc83a 	sub	r6,zero,r7
    72ac:	00077b00 	call	77b0 <scalbn>
    72b0:	0011883a 	mov	r8,zero
    72b4:	02505c34 	movhi	r9,16752
    72b8:	480f883a 	mov	r7,r9
    72bc:	1009883a 	mov	r4,r2
    72c0:	180b883a 	mov	r5,r3
    72c4:	400d883a 	mov	r6,r8
    72c8:	102d883a 	mov	r22,r2
    72cc:	182f883a 	mov	r23,r3
    72d0:	000a0440 	call	a044 <__gedf2>
    72d4:	10003716 	blt	r2,zero,73b4 <__kernel_rem_pio2+0xe00>
    72d8:	0005883a 	mov	r2,zero
    72dc:	00cf9c34 	movhi	r3,15984
    72e0:	180f883a 	mov	r7,r3
    72e4:	100d883a 	mov	r6,r2
    72e8:	b009883a 	mov	r4,r22
    72ec:	b80b883a 	mov	r5,r23
    72f0:	00099180 	call	9918 <__muldf3>
    72f4:	180b883a 	mov	r5,r3
    72f8:	1009883a 	mov	r4,r2
    72fc:	000a24c0 	call	a24c <__fixdfsi>
    7300:	1009883a 	mov	r4,r2
    7304:	000a1540 	call	a154 <__floatsidf>
    7308:	da808d17 	ldw	r10,564(sp)
    730c:	1023883a 	mov	r17,r2
    7310:	1825883a 	mov	r18,r3
    7314:	0005883a 	mov	r2,zero
    7318:	00f05c34 	movhi	r3,49520
    731c:	180f883a 	mov	r7,r3
    7320:	8809883a 	mov	r4,r17
    7324:	900b883a 	mov	r5,r18
    7328:	100d883a 	mov	r6,r2
    732c:	52ab883a 	add	r21,r10,r10
    7330:	00099180 	call	9918 <__muldf3>
    7334:	180f883a 	mov	r7,r3
    7338:	b80b883a 	mov	r5,r23
    733c:	100d883a 	mov	r6,r2
    7340:	b009883a 	mov	r4,r22
    7344:	00098a40 	call	98a4 <__adddf3>
    7348:	100d883a 	mov	r6,r2
    734c:	d8808d17 	ldw	r2,564(sp)
    7350:	180b883a 	mov	r5,r3
    7354:	3009883a 	mov	r4,r6
    7358:	10800044 	addi	r2,r2,1
    735c:	ad6b883a 	add	r21,r21,r21
    7360:	d8808d15 	stw	r2,564(sp)
    7364:	000a24c0 	call	a24c <__fixdfsi>
    7368:	d8c08d17 	ldw	r3,564(sp)
    736c:	aeeb883a 	add	r21,r21,sp
    7370:	8809883a 	mov	r4,r17
    7374:	900b883a 	mov	r5,r18
    7378:	a8800015 	stw	r2,0(r21)
    737c:	18e1883a 	add	r16,r3,r3
    7380:	000a24c0 	call	a24c <__fixdfsi>
    7384:	d9009317 	ldw	r4,588(sp)
    7388:	8421883a 	add	r16,r16,r16
    738c:	86e1883a 	add	r16,r16,sp
    7390:	21000604 	addi	r4,r4,24
    7394:	d9009315 	stw	r4,588(sp)
    7398:	80800015 	stw	r2,0(r16)
    739c:	003e3a06 	br	6c88 <__kernel_rem_pio2+0x6d4>
    73a0:	4009883a 	mov	r4,r8
    73a4:	4960003c 	xorhi	r5,r9,32768
    73a8:	003ea406 	br	6e3c <__kernel_rem_pio2+0x888>
    73ac:	d9808d15 	stw	r6,564(sp)
    73b0:	003e3506 	br	6c88 <__kernel_rem_pio2+0x6d4>
    73b4:	d9408d17 	ldw	r5,564(sp)
    73b8:	b009883a 	mov	r4,r22
    73bc:	2961883a 	add	r16,r5,r5
    73c0:	8421883a 	add	r16,r16,r16
    73c4:	b80b883a 	mov	r5,r23
    73c8:	86e1883a 	add	r16,r16,sp
    73cc:	000a24c0 	call	a24c <__fixdfsi>
    73d0:	80800015 	stw	r2,0(r16)
    73d4:	003e2c06 	br	6c88 <__kernel_rem_pio2+0x6d4>
    73d8:	d8c03d17 	ldw	r3,244(sp)
    73dc:	d9403f17 	ldw	r5,252(sp)
    73e0:	da809717 	ldw	r10,604(sp)
    73e4:	d8803c17 	ldw	r2,240(sp)
    73e8:	d9003e17 	ldw	r4,248(sp)
    73ec:	49e0003c 	xorhi	r7,r9,32768
    73f0:	51c00515 	stw	r7,20(r10)
    73f4:	19a0003c 	xorhi	r6,r3,32768
    73f8:	29e0003c 	xorhi	r7,r5,32768
    73fc:	51800115 	stw	r6,4(r10)
    7400:	51c00315 	stw	r7,12(r10)
    7404:	50800015 	stw	r2,0(r10)
    7408:	51000215 	stw	r4,8(r10)
    740c:	52000415 	stw	r8,16(r10)
    7410:	003eac06 	br	6ec4 <__kernel_rem_pio2+0x910>
    7414:	0011883a 	mov	r8,zero
    7418:	0013883a 	mov	r9,zero
    741c:	003e8306 	br	6e2c <__kernel_rem_pio2+0x878>
    7420:	0011883a 	mov	r8,zero
    7424:	0013883a 	mov	r9,zero
    7428:	003f6f06 	br	71e8 <__kernel_rem_pio2+0xc34>
    742c:	000d883a 	mov	r6,zero
    7430:	000f883a 	mov	r7,zero
    7434:	003f8f06 	br	7274 <__kernel_rem_pio2+0xcc0>

00007438 <__kernel_sin>:
    7438:	00a00034 	movhi	r2,32768
    743c:	10bfffc4 	addi	r2,r2,-1
    7440:	deffef04 	addi	sp,sp,-68
    7444:	1144703a 	and	r2,r2,r5
    7448:	00cf9034 	movhi	r3,15936
    744c:	18ffffc4 	addi	r3,r3,-1
    7450:	dd400d15 	stw	r21,52(sp)
    7454:	dd000c15 	stw	r20,48(sp)
    7458:	dfc01015 	stw	ra,64(sp)
    745c:	ddc00f15 	stw	r23,60(sp)
    7460:	dd800e15 	stw	r22,56(sp)
    7464:	dcc00b15 	stw	r19,44(sp)
    7468:	dc800a15 	stw	r18,40(sp)
    746c:	dc400915 	stw	r17,36(sp)
    7470:	dc000815 	stw	r16,32(sp)
    7474:	2029883a 	mov	r20,r4
    7478:	282b883a 	mov	r21,r5
    747c:	d9800415 	stw	r6,16(sp)
    7480:	d9c00515 	stw	r7,20(sp)
    7484:	18800216 	blt	r3,r2,7490 <__kernel_sin+0x58>
    7488:	000a24c0 	call	a24c <__fixdfsi>
    748c:	10008826 	beq	r2,zero,76b0 <__kernel_sin+0x278>
    7490:	a009883a 	mov	r4,r20
    7494:	a80b883a 	mov	r5,r21
    7498:	a00d883a 	mov	r6,r20
    749c:	a80f883a 	mov	r7,r21
    74a0:	00099180 	call	9918 <__muldf3>
    74a4:	102d883a 	mov	r22,r2
    74a8:	a009883a 	mov	r4,r20
    74ac:	a80b883a 	mov	r5,r21
    74b0:	b00d883a 	mov	r6,r22
    74b4:	180f883a 	mov	r7,r3
    74b8:	182f883a 	mov	r23,r3
    74bc:	d8800215 	stw	r2,8(sp)
    74c0:	d8c00315 	stw	r3,12(sp)
    74c4:	00099180 	call	9918 <__muldf3>
    74c8:	d9000217 	ldw	r4,8(sp)
    74cc:	0216b434 	movhi	r8,23248
    74d0:	42355f04 	addi	r8,r8,-10884
    74d4:	024f79b4 	movhi	r9,15846
    74d8:	4a764e84 	addi	r9,r9,-9926
    74dc:	480f883a 	mov	r7,r9
    74e0:	400d883a 	mov	r6,r8
    74e4:	b80b883a 	mov	r5,r23
    74e8:	d8800615 	stw	r2,24(sp)
    74ec:	d8c00715 	stw	r3,28(sp)
    74f0:	00099180 	call	9918 <__muldf3>
    74f4:	02228b34 	movhi	r8,35372
    74f8:	42273ac4 	addi	r8,r8,-25365
    74fc:	024f96f4 	movhi	r9,15963
    7500:	4a797984 	addi	r9,r9,-6682
    7504:	480f883a 	mov	r7,r9
    7508:	400d883a 	mov	r6,r8
    750c:	180b883a 	mov	r5,r3
    7510:	1009883a 	mov	r4,r2
    7514:	00098240 	call	9824 <__subdf3>
    7518:	d9000217 	ldw	r4,8(sp)
    751c:	180f883a 	mov	r7,r3
    7520:	b80b883a 	mov	r5,r23
    7524:	100d883a 	mov	r6,r2
    7528:	00099180 	call	9918 <__muldf3>
    752c:	0215ecb4 	movhi	r8,22450
    7530:	423f9f44 	addi	r8,r8,-387
    7534:	024fb1f4 	movhi	r9,16071
    7538:	4a4778c4 	addi	r9,r9,7651
    753c:	480f883a 	mov	r7,r9
    7540:	400d883a 	mov	r6,r8
    7544:	180b883a 	mov	r5,r3
    7548:	1009883a 	mov	r4,r2
    754c:	00098a40 	call	98a4 <__adddf3>
    7550:	d9000217 	ldw	r4,8(sp)
    7554:	180f883a 	mov	r7,r3
    7558:	b80b883a 	mov	r5,r23
    755c:	100d883a 	mov	r6,r2
    7560:	00099180 	call	9918 <__muldf3>
    7564:	02067074 	movhi	r8,6593
    7568:	42187544 	addi	r8,r8,25045
    756c:	024fcab4 	movhi	r9,16170
    7570:	4a406804 	addi	r9,r9,416
    7574:	480f883a 	mov	r7,r9
    7578:	400d883a 	mov	r6,r8
    757c:	180b883a 	mov	r5,r3
    7580:	1009883a 	mov	r4,r2
    7584:	00098240 	call	9824 <__subdf3>
    7588:	d9000217 	ldw	r4,8(sp)
    758c:	180f883a 	mov	r7,r3
    7590:	b80b883a 	mov	r5,r23
    7594:	100d883a 	mov	r6,r2
    7598:	00099180 	call	9918 <__muldf3>
    759c:	02044474 	movhi	r8,4369
    75a0:	423e2984 	addi	r8,r8,-1882
    75a4:	024fe074 	movhi	r9,16257
    75a8:	4a444444 	addi	r9,r9,4369
    75ac:	180b883a 	mov	r5,r3
    75b0:	480f883a 	mov	r7,r9
    75b4:	1009883a 	mov	r4,r2
    75b8:	400d883a 	mov	r6,r8
    75bc:	00098a40 	call	98a4 <__adddf3>
    75c0:	1021883a 	mov	r16,r2
    75c4:	d8800617 	ldw	r2,24(sp)
    75c8:	1823883a 	mov	r17,r3
    75cc:	d8800015 	stw	r2,0(sp)
    75d0:	d8800717 	ldw	r2,28(sp)
    75d4:	d8800115 	stw	r2,4(sp)
    75d8:	d8801117 	ldw	r2,68(sp)
    75dc:	10004126 	beq	r2,zero,76e4 <__kernel_sin+0x2ac>
    75e0:	d9000417 	ldw	r4,16(sp)
    75e4:	d9400517 	ldw	r5,20(sp)
    75e8:	0005883a 	mov	r2,zero
    75ec:	00cff834 	movhi	r3,16352
    75f0:	180f883a 	mov	r7,r3
    75f4:	100d883a 	mov	r6,r2
    75f8:	00099180 	call	9918 <__muldf3>
    75fc:	d9000017 	ldw	r4,0(sp)
    7600:	d9400717 	ldw	r5,28(sp)
    7604:	800d883a 	mov	r6,r16
    7608:	880f883a 	mov	r7,r17
    760c:	1021883a 	mov	r16,r2
    7610:	1823883a 	mov	r17,r3
    7614:	00099180 	call	9918 <__muldf3>
    7618:	180f883a 	mov	r7,r3
    761c:	880b883a 	mov	r5,r17
    7620:	8009883a 	mov	r4,r16
    7624:	100d883a 	mov	r6,r2
    7628:	00098240 	call	9824 <__subdf3>
    762c:	d9000217 	ldw	r4,8(sp)
    7630:	b80b883a 	mov	r5,r23
    7634:	180f883a 	mov	r7,r3
    7638:	100d883a 	mov	r6,r2
    763c:	00099180 	call	9918 <__muldf3>
    7640:	d9c00517 	ldw	r7,20(sp)
    7644:	d9800417 	ldw	r6,16(sp)
    7648:	180b883a 	mov	r5,r3
    764c:	1009883a 	mov	r4,r2
    7650:	00098240 	call	9824 <__subdf3>
    7654:	d9000017 	ldw	r4,0(sp)
    7658:	d9400717 	ldw	r5,28(sp)
    765c:	02155574 	movhi	r8,21845
    7660:	42155244 	addi	r8,r8,21833
    7664:	024ff174 	movhi	r9,16325
    7668:	4a555544 	addi	r9,r9,21845
    766c:	480f883a 	mov	r7,r9
    7670:	400d883a 	mov	r6,r8
    7674:	1021883a 	mov	r16,r2
    7678:	1823883a 	mov	r17,r3
    767c:	00099180 	call	9918 <__muldf3>
    7680:	180f883a 	mov	r7,r3
    7684:	880b883a 	mov	r5,r17
    7688:	8009883a 	mov	r4,r16
    768c:	100d883a 	mov	r6,r2
    7690:	00098a40 	call	98a4 <__adddf3>
    7694:	180f883a 	mov	r7,r3
    7698:	a80b883a 	mov	r5,r21
    769c:	a009883a 	mov	r4,r20
    76a0:	100d883a 	mov	r6,r2
    76a4:	00098240 	call	9824 <__subdf3>
    76a8:	1029883a 	mov	r20,r2
    76ac:	182b883a 	mov	r21,r3
    76b0:	a005883a 	mov	r2,r20
    76b4:	a807883a 	mov	r3,r21
    76b8:	dfc01017 	ldw	ra,64(sp)
    76bc:	ddc00f17 	ldw	r23,60(sp)
    76c0:	dd800e17 	ldw	r22,56(sp)
    76c4:	dd400d17 	ldw	r21,52(sp)
    76c8:	dd000c17 	ldw	r20,48(sp)
    76cc:	dcc00b17 	ldw	r19,44(sp)
    76d0:	dc800a17 	ldw	r18,40(sp)
    76d4:	dc400917 	ldw	r17,36(sp)
    76d8:	dc000817 	ldw	r16,32(sp)
    76dc:	dec01104 	addi	sp,sp,68
    76e0:	f800283a 	ret
    76e4:	d9000217 	ldw	r4,8(sp)
    76e8:	b80b883a 	mov	r5,r23
    76ec:	800d883a 	mov	r6,r16
    76f0:	180f883a 	mov	r7,r3
    76f4:	00099180 	call	9918 <__muldf3>
    76f8:	02155574 	movhi	r8,21845
    76fc:	42155244 	addi	r8,r8,21833
    7700:	024ff174 	movhi	r9,16325
    7704:	4a555544 	addi	r9,r9,21845
    7708:	480f883a 	mov	r7,r9
    770c:	400d883a 	mov	r6,r8
    7710:	180b883a 	mov	r5,r3
    7714:	1009883a 	mov	r4,r2
    7718:	00098240 	call	9824 <__subdf3>
    771c:	d9000017 	ldw	r4,0(sp)
    7720:	d9400717 	ldw	r5,28(sp)
    7724:	180f883a 	mov	r7,r3
    7728:	100d883a 	mov	r6,r2
    772c:	00099180 	call	9918 <__muldf3>
    7730:	180f883a 	mov	r7,r3
    7734:	a80b883a 	mov	r5,r21
    7738:	a009883a 	mov	r4,r20
    773c:	100d883a 	mov	r6,r2
    7740:	00098a40 	call	98a4 <__adddf3>
    7744:	1029883a 	mov	r20,r2
    7748:	182b883a 	mov	r21,r3
    774c:	003fd806 	br	76b0 <__kernel_sin+0x278>

00007750 <fabs>:
    7750:	01e00034 	movhi	r7,32768
    7754:	39ffffc4 	addi	r7,r7,-1
    7758:	394e703a 	and	r7,r7,r5
    775c:	2005883a 	mov	r2,r4
    7760:	3807883a 	mov	r3,r7
    7764:	f800283a 	ret

00007768 <__isnand>:
    7768:	200d883a 	mov	r6,r4
    776c:	0109c83a 	sub	r4,zero,r4
    7770:	2188b03a 	or	r4,r4,r6
    7774:	2008d7fa 	srli	r4,r4,31
    7778:	00a00034 	movhi	r2,32768
    777c:	10bfffc4 	addi	r2,r2,-1
    7780:	1144703a 	and	r2,r2,r5
    7784:	2088b03a 	or	r4,r4,r2
    7788:	009ffc34 	movhi	r2,32752
    778c:	1105c83a 	sub	r2,r2,r4
    7790:	1004d7fa 	srli	r2,r2,31
    7794:	f800283a 	ret

00007798 <matherr>:
    7798:	0005883a 	mov	r2,zero
    779c:	f800283a 	ret

000077a0 <nan>:
    77a0:	015ffe34 	movhi	r5,32760
    77a4:	0005883a 	mov	r2,zero
    77a8:	2807883a 	mov	r3,r5
    77ac:	f800283a 	ret

000077b0 <scalbn>:
    77b0:	2011883a 	mov	r8,r4
    77b4:	291ffc2c 	andhi	r4,r5,32752
    77b8:	2009d53a 	srai	r4,r4,20
    77bc:	defffd04 	addi	sp,sp,-12
    77c0:	dc000015 	stw	r16,0(sp)
    77c4:	dfc00215 	stw	ra,8(sp)
    77c8:	dc400115 	stw	r17,4(sp)
    77cc:	2813883a 	mov	r9,r5
    77d0:	2815883a 	mov	r10,r5
    77d4:	3021883a 	mov	r16,r6
    77d8:	2000281e 	bne	r4,zero,787c <scalbn+0xcc>
    77dc:	00a00034 	movhi	r2,32768
    77e0:	10bfffc4 	addi	r2,r2,-1
    77e4:	2884703a 	and	r2,r5,r2
    77e8:	4084b03a 	or	r2,r8,r2
    77ec:	10001826 	beq	r2,zero,7850 <scalbn+0xa0>
    77f0:	0005883a 	mov	r2,zero
    77f4:	00d0d434 	movhi	r3,17232
    77f8:	4009883a 	mov	r4,r8
    77fc:	100d883a 	mov	r6,r2
    7800:	180f883a 	mov	r7,r3
    7804:	00099180 	call	9918 <__muldf3>
    7808:	100b883a 	mov	r5,r2
    780c:	1011883a 	mov	r8,r2
    7810:	00bffff4 	movhi	r2,65535
    7814:	108f2c04 	addi	r2,r2,15536
    7818:	180d883a 	mov	r6,r3
    781c:	1813883a 	mov	r9,r3
    7820:	8080120e 	bge	r16,r2,786c <scalbn+0xbc>
    7824:	00b0be74 	movhi	r2,49913
    7828:	10bcd644 	addi	r2,r2,-3239
    782c:	00c06974 	movhi	r3,421
    7830:	18db87c4 	addi	r3,r3,28191
    7834:	2809883a 	mov	r4,r5
    7838:	180f883a 	mov	r7,r3
    783c:	300b883a 	mov	r5,r6
    7840:	100d883a 	mov	r6,r2
    7844:	00099180 	call	9918 <__muldf3>
    7848:	1011883a 	mov	r8,r2
    784c:	1813883a 	mov	r9,r3
    7850:	4005883a 	mov	r2,r8
    7854:	4807883a 	mov	r3,r9
    7858:	dfc00217 	ldw	ra,8(sp)
    785c:	dc400117 	ldw	r17,4(sp)
    7860:	dc000017 	ldw	r16,0(sp)
    7864:	dec00304 	addi	sp,sp,12
    7868:	f800283a 	ret
    786c:	189ffc2c 	andhi	r2,r3,32752
    7870:	1005d53a 	srai	r2,r2,20
    7874:	1815883a 	mov	r10,r3
    7878:	113ff284 	addi	r4,r2,-54
    787c:	0081ffc4 	movi	r2,2047
    7880:	20801126 	beq	r4,r2,78c8 <scalbn+0x118>
    7884:	2409883a 	add	r4,r4,r16
    7888:	0081ff84 	movi	r2,2046
    788c:	11001c16 	blt	r2,r4,7900 <scalbn+0x150>
    7890:	0100290e 	bge	zero,r4,7938 <scalbn+0x188>
    7894:	200a953a 	slli	r5,r4,20
    7898:	01200434 	movhi	r4,32784
    789c:	213fffc4 	addi	r4,r4,-1
    78a0:	5108703a 	and	r4,r10,r4
    78a4:	2148b03a 	or	r4,r4,r5
    78a8:	2013883a 	mov	r9,r4
    78ac:	4005883a 	mov	r2,r8
    78b0:	4807883a 	mov	r3,r9
    78b4:	dfc00217 	ldw	ra,8(sp)
    78b8:	dc400117 	ldw	r17,4(sp)
    78bc:	dc000017 	ldw	r16,0(sp)
    78c0:	dec00304 	addi	sp,sp,12
    78c4:	f800283a 	ret
    78c8:	480f883a 	mov	r7,r9
    78cc:	4009883a 	mov	r4,r8
    78d0:	480b883a 	mov	r5,r9
    78d4:	400d883a 	mov	r6,r8
    78d8:	00098a40 	call	98a4 <__adddf3>
    78dc:	1011883a 	mov	r8,r2
    78e0:	1813883a 	mov	r9,r3
    78e4:	4005883a 	mov	r2,r8
    78e8:	4807883a 	mov	r3,r9
    78ec:	dfc00217 	ldw	ra,8(sp)
    78f0:	dc400117 	ldw	r17,4(sp)
    78f4:	dc000017 	ldw	r16,0(sp)
    78f8:	dec00304 	addi	sp,sp,12
    78fc:	f800283a 	ret
    7900:	04220034 	movhi	r16,34816
    7904:	841d6704 	addi	r16,r16,30108
    7908:	045f8e34 	movhi	r17,32312
    790c:	8c790f04 	addi	r17,r17,-7108
    7910:	480f883a 	mov	r7,r9
    7914:	400d883a 	mov	r6,r8
    7918:	8009883a 	mov	r4,r16
    791c:	880b883a 	mov	r5,r17
    7920:	00079900 	call	7990 <copysign>
    7924:	180b883a 	mov	r5,r3
    7928:	800d883a 	mov	r6,r16
    792c:	880f883a 	mov	r7,r17
    7930:	1009883a 	mov	r4,r2
    7934:	003fc306 	br	7844 <scalbn+0x94>
    7938:	00bff284 	movi	r2,-54
    793c:	11000716 	blt	r2,r4,795c <scalbn+0x1ac>
    7940:	00b0d414 	movui	r2,50000
    7944:	143fee16 	blt	r2,r16,7900 <scalbn+0x150>
    7948:	0430be74 	movhi	r16,49913
    794c:	843cd644 	addi	r16,r16,-3239
    7950:	04406974 	movhi	r17,421
    7954:	8c5b87c4 	addi	r17,r17,28191
    7958:	003fed06 	br	7910 <scalbn+0x160>
    795c:	21000d84 	addi	r4,r4,54
    7960:	2008953a 	slli	r4,r4,20
    7964:	01e00434 	movhi	r7,32784
    7968:	39ffffc4 	addi	r7,r7,-1
    796c:	51ce703a 	and	r7,r10,r7
    7970:	390eb03a 	or	r7,r7,r4
    7974:	024f2434 	movhi	r9,15504
    7978:	4009883a 	mov	r4,r8
    797c:	0011883a 	mov	r8,zero
    7980:	380b883a 	mov	r5,r7
    7984:	400d883a 	mov	r6,r8
    7988:	480f883a 	mov	r7,r9
    798c:	003fad06 	br	7844 <scalbn+0x94>

00007990 <copysign>:
    7990:	3813883a 	mov	r9,r7
    7994:	01e00034 	movhi	r7,32768
    7998:	39ffffc4 	addi	r7,r7,-1
    799c:	394e703a 	and	r7,r7,r5
    79a0:	4aa0002c 	andhi	r10,r9,32768
    79a4:	3a8eb03a 	or	r7,r7,r10
    79a8:	2005883a 	mov	r2,r4
    79ac:	3807883a 	mov	r3,r7
    79b0:	f800283a 	ret

000079b4 <__muldi3>:
    79b4:	defff204 	addi	sp,sp,-56
    79b8:	df000c15 	stw	fp,48(sp)
    79bc:	3038d43a 	srli	fp,r6,16
    79c0:	dd000815 	stw	r20,32(sp)
    79c4:	dc400515 	stw	r17,20(sp)
    79c8:	2028d43a 	srli	r20,r4,16
    79cc:	247fffcc 	andi	r17,r4,65535
    79d0:	dc000415 	stw	r16,16(sp)
    79d4:	343fffcc 	andi	r16,r6,65535
    79d8:	dcc00715 	stw	r19,28(sp)
    79dc:	d9000015 	stw	r4,0(sp)
    79e0:	2827883a 	mov	r19,r5
    79e4:	8809883a 	mov	r4,r17
    79e8:	d9400115 	stw	r5,4(sp)
    79ec:	800b883a 	mov	r5,r16
    79f0:	d9800215 	stw	r6,8(sp)
    79f4:	dfc00d15 	stw	ra,52(sp)
    79f8:	d9c00315 	stw	r7,12(sp)
    79fc:	dd800a15 	stw	r22,40(sp)
    7a00:	dd400915 	stw	r21,36(sp)
    7a04:	302d883a 	mov	r22,r6
    7a08:	ddc00b15 	stw	r23,44(sp)
    7a0c:	dc800615 	stw	r18,24(sp)
    7a10:	000a6b00 	call	a6b0 <__mulsi3>
    7a14:	8809883a 	mov	r4,r17
    7a18:	e00b883a 	mov	r5,fp
    7a1c:	102b883a 	mov	r21,r2
    7a20:	000a6b00 	call	a6b0 <__mulsi3>
    7a24:	800b883a 	mov	r5,r16
    7a28:	a009883a 	mov	r4,r20
    7a2c:	1023883a 	mov	r17,r2
    7a30:	000a6b00 	call	a6b0 <__mulsi3>
    7a34:	a009883a 	mov	r4,r20
    7a38:	e00b883a 	mov	r5,fp
    7a3c:	1021883a 	mov	r16,r2
    7a40:	000a6b00 	call	a6b0 <__mulsi3>
    7a44:	a8ffffcc 	andi	r3,r21,65535
    7a48:	a82ad43a 	srli	r21,r21,16
    7a4c:	8c23883a 	add	r17,r17,r16
    7a50:	1011883a 	mov	r8,r2
    7a54:	ac6b883a 	add	r21,r21,r17
    7a58:	a804943a 	slli	r2,r21,16
    7a5c:	b009883a 	mov	r4,r22
    7a60:	980b883a 	mov	r5,r19
    7a64:	10c7883a 	add	r3,r2,r3
    7a68:	a812d43a 	srli	r9,r21,16
    7a6c:	180d883a 	mov	r6,r3
    7a70:	ac00022e 	bgeu	r21,r16,7a7c <__muldi3+0xc8>
    7a74:	00800074 	movhi	r2,1
    7a78:	4091883a 	add	r8,r8,r2
    7a7c:	4267883a 	add	r19,r8,r9
    7a80:	302d883a 	mov	r22,r6
    7a84:	000a6b00 	call	a6b0 <__mulsi3>
    7a88:	d9400317 	ldw	r5,12(sp)
    7a8c:	d9000017 	ldw	r4,0(sp)
    7a90:	1023883a 	mov	r17,r2
    7a94:	000a6b00 	call	a6b0 <__mulsi3>
    7a98:	14cb883a 	add	r5,r2,r19
    7a9c:	894b883a 	add	r5,r17,r5
    7aa0:	b005883a 	mov	r2,r22
    7aa4:	2807883a 	mov	r3,r5
    7aa8:	dfc00d17 	ldw	ra,52(sp)
    7aac:	df000c17 	ldw	fp,48(sp)
    7ab0:	ddc00b17 	ldw	r23,44(sp)
    7ab4:	dd800a17 	ldw	r22,40(sp)
    7ab8:	dd400917 	ldw	r21,36(sp)
    7abc:	dd000817 	ldw	r20,32(sp)
    7ac0:	dcc00717 	ldw	r19,28(sp)
    7ac4:	dc800617 	ldw	r18,24(sp)
    7ac8:	dc400517 	ldw	r17,20(sp)
    7acc:	dc000417 	ldw	r16,16(sp)
    7ad0:	dec00e04 	addi	sp,sp,56
    7ad4:	f800283a 	ret

00007ad8 <__fixsfdi>:
    7ad8:	defffe04 	addi	sp,sp,-8
    7adc:	000b883a 	mov	r5,zero
    7ae0:	dc000015 	stw	r16,0(sp)
    7ae4:	dfc00115 	stw	ra,4(sp)
    7ae8:	2021883a 	mov	r16,r4
    7aec:	00092b00 	call	92b0 <__ltsf2>
    7af0:	8120003c 	xorhi	r4,r16,32768
    7af4:	10000516 	blt	r2,zero,7b0c <__fixsfdi+0x34>
    7af8:	8009883a 	mov	r4,r16
    7afc:	dfc00117 	ldw	ra,4(sp)
    7b00:	dc000017 	ldw	r16,0(sp)
    7b04:	dec00204 	addi	sp,sp,8
    7b08:	0007b381 	jmpi	7b38 <__fixunssfdi>
    7b0c:	0007b380 	call	7b38 <__fixunssfdi>
    7b10:	0011883a 	mov	r8,zero
    7b14:	4085c83a 	sub	r2,r8,r2
    7b18:	4091803a 	cmpltu	r8,r8,r2
    7b1c:	00c7c83a 	sub	r3,zero,r3
    7b20:	1a11c83a 	sub	r8,r3,r8
    7b24:	4007883a 	mov	r3,r8
    7b28:	dfc00117 	ldw	ra,4(sp)
    7b2c:	dc000017 	ldw	r16,0(sp)
    7b30:	dec00204 	addi	sp,sp,8
    7b34:	f800283a 	ret

00007b38 <__fixunssfdi>:
    7b38:	defff904 	addi	sp,sp,-28
    7b3c:	dfc00615 	stw	ra,24(sp)
    7b40:	dcc00315 	stw	r19,12(sp)
    7b44:	dc800215 	stw	r18,8(sp)
    7b48:	dc400115 	stw	r17,4(sp)
    7b4c:	dc000015 	stw	r16,0(sp)
    7b50:	dd400515 	stw	r21,20(sp)
    7b54:	dd000415 	stw	r20,16(sp)
    7b58:	00093c00 	call	93c0 <__extendsfdf2>
    7b5c:	1021883a 	mov	r16,r2
    7b60:	1823883a 	mov	r17,r3
    7b64:	0005883a 	mov	r2,zero
    7b68:	00cf7c34 	movhi	r3,15856
    7b6c:	180f883a 	mov	r7,r3
    7b70:	100d883a 	mov	r6,r2
    7b74:	8009883a 	mov	r4,r16
    7b78:	880b883a 	mov	r5,r17
    7b7c:	00099180 	call	9918 <__muldf3>
    7b80:	180b883a 	mov	r5,r3
    7b84:	1009883a 	mov	r4,r2
    7b88:	000a7680 	call	a768 <__fixunsdfsi>
    7b8c:	1009883a 	mov	r4,r2
    7b90:	1027883a 	mov	r19,r2
    7b94:	000a3d00 	call	a3d0 <__floatunsidf>
    7b98:	0011883a 	mov	r8,zero
    7b9c:	02707c34 	movhi	r9,49648
    7ba0:	480f883a 	mov	r7,r9
    7ba4:	400d883a 	mov	r6,r8
    7ba8:	180b883a 	mov	r5,r3
    7bac:	1009883a 	mov	r4,r2
    7bb0:	00099180 	call	9918 <__muldf3>
    7bb4:	180f883a 	mov	r7,r3
    7bb8:	8009883a 	mov	r4,r16
    7bbc:	880b883a 	mov	r5,r17
    7bc0:	100d883a 	mov	r6,r2
    7bc4:	00098a40 	call	98a4 <__adddf3>
    7bc8:	180b883a 	mov	r5,r3
    7bcc:	1009883a 	mov	r4,r2
    7bd0:	000a7680 	call	a768 <__fixunsdfsi>
    7bd4:	0025883a 	mov	r18,zero
    7bd8:	000f883a 	mov	r7,zero
    7bdc:	9088b03a 	or	r4,r18,r2
    7be0:	99cab03a 	or	r5,r19,r7
    7be4:	2005883a 	mov	r2,r4
    7be8:	2807883a 	mov	r3,r5
    7bec:	dfc00617 	ldw	ra,24(sp)
    7bf0:	dd400517 	ldw	r21,20(sp)
    7bf4:	dd000417 	ldw	r20,16(sp)
    7bf8:	dcc00317 	ldw	r19,12(sp)
    7bfc:	dc800217 	ldw	r18,8(sp)
    7c00:	dc400117 	ldw	r17,4(sp)
    7c04:	dc000017 	ldw	r16,0(sp)
    7c08:	dec00704 	addi	sp,sp,28
    7c0c:	f800283a 	ret

00007c10 <__floatdisf>:
    7c10:	02000044 	movi	r8,1
    7c14:	0181ffc4 	movi	r6,2047
    7c18:	027ff834 	movhi	r9,65504
    7c1c:	2217c83a 	sub	r11,r4,r8
    7c20:	2184703a 	and	r2,r4,r6
    7c24:	22d5803a 	cmpltu	r10,r4,r11
    7c28:	2a59c83a 	sub	r12,r5,r9
    7c2c:	0007883a 	mov	r3,zero
    7c30:	defffd04 	addi	sp,sp,-12
    7c34:	10ccb03a 	or	r6,r2,r3
    7c38:	6299c83a 	sub	r12,r12,r10
    7c3c:	00801034 	movhi	r2,64
    7c40:	10bfffc4 	addi	r2,r2,-1
    7c44:	dc400115 	stw	r17,4(sp)
    7c48:	dc000015 	stw	r16,0(sp)
    7c4c:	dfc00215 	stw	ra,8(sp)
    7c50:	2021883a 	mov	r16,r4
    7c54:	2823883a 	mov	r17,r5
    7c58:	13001f36 	bltu	r2,r12,7cd8 <__floatdisf+0xc8>
    7c5c:	60801c26 	beq	r12,r2,7cd0 <__floatdisf+0xc0>
    7c60:	8809883a 	mov	r4,r17
    7c64:	000a1540 	call	a154 <__floatsidf>
    7c68:	100d883a 	mov	r6,r2
    7c6c:	180f883a 	mov	r7,r3
    7c70:	0005883a 	mov	r2,zero
    7c74:	00d07c34 	movhi	r3,16880
    7c78:	380b883a 	mov	r5,r7
    7c7c:	3009883a 	mov	r4,r6
    7c80:	180f883a 	mov	r7,r3
    7c84:	100d883a 	mov	r6,r2
    7c88:	00099180 	call	9918 <__muldf3>
    7c8c:	8009883a 	mov	r4,r16
    7c90:	1823883a 	mov	r17,r3
    7c94:	1021883a 	mov	r16,r2
    7c98:	000a3d00 	call	a3d0 <__floatunsidf>
    7c9c:	880b883a 	mov	r5,r17
    7ca0:	8009883a 	mov	r4,r16
    7ca4:	180f883a 	mov	r7,r3
    7ca8:	100d883a 	mov	r6,r2
    7cac:	00098a40 	call	98a4 <__adddf3>
    7cb0:	180b883a 	mov	r5,r3
    7cb4:	1009883a 	mov	r4,r2
    7cb8:	000a35c0 	call	a35c <__truncdfsf2>
    7cbc:	dfc00217 	ldw	ra,8(sp)
    7cc0:	dc400117 	ldw	r17,4(sp)
    7cc4:	dc000017 	ldw	r16,0(sp)
    7cc8:	dec00304 	addi	sp,sp,12
    7ccc:	f800283a 	ret
    7cd0:	00bfff84 	movi	r2,-2
    7cd4:	12ffe22e 	bgeu	r2,r11,7c60 <__floatdisf+0x50>
    7cd8:	00be0004 	movi	r2,-2048
    7cdc:	8088703a 	and	r4,r16,r2
    7ce0:	00820004 	movi	r2,2048
    7ce4:	303fde26 	beq	r6,zero,7c60 <__floatdisf+0x50>
    7ce8:	20a0b03a 	or	r16,r4,r2
    7cec:	003fdc06 	br	7c60 <__floatdisf+0x50>

00007cf0 <__floatundisf>:
    7cf0:	0081ffc4 	movi	r2,2047
    7cf4:	defffd04 	addi	sp,sp,-12
    7cf8:	208c703a 	and	r6,r4,r2
    7cfc:	000f883a 	mov	r7,zero
    7d00:	00800834 	movhi	r2,32
    7d04:	10bfffc4 	addi	r2,r2,-1
    7d08:	dc400115 	stw	r17,4(sp)
    7d0c:	dc000015 	stw	r16,0(sp)
    7d10:	dfc00215 	stw	ra,8(sp)
    7d14:	2021883a 	mov	r16,r4
    7d18:	2823883a 	mov	r17,r5
    7d1c:	31ccb03a 	or	r6,r6,r7
    7d20:	1140052e 	bgeu	r2,r5,7d38 <__floatundisf+0x48>
    7d24:	00be0004 	movi	r2,-2048
    7d28:	2088703a 	and	r4,r4,r2
    7d2c:	00820004 	movi	r2,2048
    7d30:	30000126 	beq	r6,zero,7d38 <__floatundisf+0x48>
    7d34:	20a0b03a 	or	r16,r4,r2
    7d38:	8809883a 	mov	r4,r17
    7d3c:	000a3d00 	call	a3d0 <__floatunsidf>
    7d40:	100d883a 	mov	r6,r2
    7d44:	180f883a 	mov	r7,r3
    7d48:	0005883a 	mov	r2,zero
    7d4c:	00d07c34 	movhi	r3,16880
    7d50:	380b883a 	mov	r5,r7
    7d54:	3009883a 	mov	r4,r6
    7d58:	180f883a 	mov	r7,r3
    7d5c:	100d883a 	mov	r6,r2
    7d60:	00099180 	call	9918 <__muldf3>
    7d64:	8009883a 	mov	r4,r16
    7d68:	1823883a 	mov	r17,r3
    7d6c:	1021883a 	mov	r16,r2
    7d70:	000a3d00 	call	a3d0 <__floatunsidf>
    7d74:	880b883a 	mov	r5,r17
    7d78:	8009883a 	mov	r4,r16
    7d7c:	180f883a 	mov	r7,r3
    7d80:	100d883a 	mov	r6,r2
    7d84:	00098a40 	call	98a4 <__adddf3>
    7d88:	180b883a 	mov	r5,r3
    7d8c:	1009883a 	mov	r4,r2
    7d90:	000a35c0 	call	a35c <__truncdfsf2>
    7d94:	dfc00217 	ldw	ra,8(sp)
    7d98:	dc400117 	ldw	r17,4(sp)
    7d9c:	dc000017 	ldw	r16,0(sp)
    7da0:	dec00304 	addi	sp,sp,12
    7da4:	f800283a 	ret

00007da8 <__floatundidf>:
    7da8:	defffb04 	addi	sp,sp,-20
    7dac:	dc800215 	stw	r18,8(sp)
    7db0:	2025883a 	mov	r18,r4
    7db4:	2809883a 	mov	r4,r5
    7db8:	dfc00415 	stw	ra,16(sp)
    7dbc:	dc400115 	stw	r17,4(sp)
    7dc0:	dc000015 	stw	r16,0(sp)
    7dc4:	dcc00315 	stw	r19,12(sp)
    7dc8:	000a3d00 	call	a3d0 <__floatunsidf>
    7dcc:	100d883a 	mov	r6,r2
    7dd0:	180f883a 	mov	r7,r3
    7dd4:	0005883a 	mov	r2,zero
    7dd8:	00d07c34 	movhi	r3,16880
    7ddc:	380b883a 	mov	r5,r7
    7de0:	3009883a 	mov	r4,r6
    7de4:	180f883a 	mov	r7,r3
    7de8:	100d883a 	mov	r6,r2
    7dec:	00099180 	call	9918 <__muldf3>
    7df0:	9009883a 	mov	r4,r18
    7df4:	1021883a 	mov	r16,r2
    7df8:	1823883a 	mov	r17,r3
    7dfc:	000a3d00 	call	a3d0 <__floatunsidf>
    7e00:	880b883a 	mov	r5,r17
    7e04:	8009883a 	mov	r4,r16
    7e08:	180f883a 	mov	r7,r3
    7e0c:	100d883a 	mov	r6,r2
    7e10:	00098a40 	call	98a4 <__adddf3>
    7e14:	dfc00417 	ldw	ra,16(sp)
    7e18:	dcc00317 	ldw	r19,12(sp)
    7e1c:	dc800217 	ldw	r18,8(sp)
    7e20:	dc400117 	ldw	r17,4(sp)
    7e24:	dc000017 	ldw	r16,0(sp)
    7e28:	dec00504 	addi	sp,sp,20
    7e2c:	f800283a 	ret

00007e30 <__divdi3>:
    7e30:	2005883a 	mov	r2,r4
    7e34:	deffef04 	addi	sp,sp,-68
    7e38:	2807883a 	mov	r3,r5
    7e3c:	1019883a 	mov	r12,r2
    7e40:	0005883a 	mov	r2,zero
    7e44:	dfc01015 	stw	ra,64(sp)
    7e48:	df000f15 	stw	fp,60(sp)
    7e4c:	ddc00e15 	stw	r23,56(sp)
    7e50:	dd800d15 	stw	r22,52(sp)
    7e54:	dd400c15 	stw	r21,48(sp)
    7e58:	dd000b15 	stw	r20,44(sp)
    7e5c:	dcc00a15 	stw	r19,40(sp)
    7e60:	dc800915 	stw	r18,36(sp)
    7e64:	dc400815 	stw	r17,32(sp)
    7e68:	dc000715 	stw	r16,28(sp)
    7e6c:	181b883a 	mov	r13,r3
    7e70:	d8800515 	stw	r2,20(sp)
    7e74:	3015883a 	mov	r10,r6
    7e78:	3817883a 	mov	r11,r7
    7e7c:	d8800615 	stw	r2,24(sp)
    7e80:	1800c716 	blt	r3,zero,81a0 <__divdi3+0x370>
    7e84:	d8000415 	stw	zero,16(sp)
    7e88:	5800ba16 	blt	r11,zero,8174 <__divdi3+0x344>
    7e8c:	5027883a 	mov	r19,r10
    7e90:	602d883a 	mov	r22,r12
    7e94:	682b883a 	mov	r21,r13
    7e98:	5800401e 	bne	r11,zero,7f9c <__divdi3+0x16c>
    7e9c:	6a805e36 	bltu	r13,r10,8018 <__divdi3+0x1e8>
    7ea0:	5000db26 	beq	r10,zero,8210 <__divdi3+0x3e0>
    7ea4:	00bfffd4 	movui	r2,65535
    7ea8:	14c0c736 	bltu	r2,r19,81c8 <__divdi3+0x398>
    7eac:	00803fc4 	movi	r2,255
    7eb0:	14c18236 	bltu	r2,r19,84bc <__divdi3+0x68c>
    7eb4:	000b883a 	mov	r5,zero
    7eb8:	0005883a 	mov	r2,zero
    7ebc:	9884d83a 	srl	r2,r19,r2
    7ec0:	01000074 	movhi	r4,1
    7ec4:	213a4504 	addi	r4,r4,-5868
    7ec8:	01800804 	movi	r6,32
    7ecc:	1105883a 	add	r2,r2,r4
    7ed0:	10c00003 	ldbu	r3,0(r2)
    7ed4:	28c7883a 	add	r3,r5,r3
    7ed8:	30e9c83a 	sub	r20,r6,r3
    7edc:	a0012d1e 	bne	r20,zero,8394 <__divdi3+0x564>
    7ee0:	982ed43a 	srli	r23,r19,16
    7ee4:	acebc83a 	sub	r21,r21,r19
    7ee8:	9f3fffcc 	andi	fp,r19,65535
    7eec:	05000044 	movi	r20,1
    7ef0:	a809883a 	mov	r4,r21
    7ef4:	b80b883a 	mov	r5,r23
    7ef8:	000a6a00 	call	a6a0 <__udivsi3>
    7efc:	100b883a 	mov	r5,r2
    7f00:	e009883a 	mov	r4,fp
    7f04:	1021883a 	mov	r16,r2
    7f08:	000a6b00 	call	a6b0 <__mulsi3>
    7f0c:	a809883a 	mov	r4,r21
    7f10:	b80b883a 	mov	r5,r23
    7f14:	1023883a 	mov	r17,r2
    7f18:	000a6a80 	call	a6a8 <__umodsi3>
    7f1c:	1004943a 	slli	r2,r2,16
    7f20:	b006d43a 	srli	r3,r22,16
    7f24:	10c4b03a 	or	r2,r2,r3
    7f28:	1440042e 	bgeu	r2,r17,7f3c <__divdi3+0x10c>
    7f2c:	14c5883a 	add	r2,r2,r19
    7f30:	843fffc4 	addi	r16,r16,-1
    7f34:	14c00136 	bltu	r2,r19,7f3c <__divdi3+0x10c>
    7f38:	14418036 	bltu	r2,r17,853c <__divdi3+0x70c>
    7f3c:	1463c83a 	sub	r17,r2,r17
    7f40:	8809883a 	mov	r4,r17
    7f44:	b80b883a 	mov	r5,r23
    7f48:	000a6a00 	call	a6a0 <__udivsi3>
    7f4c:	100b883a 	mov	r5,r2
    7f50:	e009883a 	mov	r4,fp
    7f54:	102b883a 	mov	r21,r2
    7f58:	000a6b00 	call	a6b0 <__mulsi3>
    7f5c:	8809883a 	mov	r4,r17
    7f60:	b80b883a 	mov	r5,r23
    7f64:	1025883a 	mov	r18,r2
    7f68:	000a6a80 	call	a6a8 <__umodsi3>
    7f6c:	1004943a 	slli	r2,r2,16
    7f70:	b0ffffcc 	andi	r3,r22,65535
    7f74:	10c4b03a 	or	r2,r2,r3
    7f78:	1480042e 	bgeu	r2,r18,7f8c <__divdi3+0x15c>
    7f7c:	9885883a 	add	r2,r19,r2
    7f80:	ad7fffc4 	addi	r21,r21,-1
    7f84:	14c00136 	bltu	r2,r19,7f8c <__divdi3+0x15c>
    7f88:	14816536 	bltu	r2,r18,8520 <__divdi3+0x6f0>
    7f8c:	8004943a 	slli	r2,r16,16
    7f90:	a00b883a 	mov	r5,r20
    7f94:	a884b03a 	or	r2,r21,r2
    7f98:	00000406 	br	7fac <__divdi3+0x17c>
    7f9c:	5811883a 	mov	r8,r11
    7fa0:	6ac05f2e 	bgeu	r13,r11,8120 <__divdi3+0x2f0>
    7fa4:	0005883a 	mov	r2,zero
    7fa8:	000b883a 	mov	r5,zero
    7fac:	d8c00417 	ldw	r3,16(sp)
    7fb0:	d8800515 	stw	r2,20(sp)
    7fb4:	d9400615 	stw	r5,24(sp)
    7fb8:	100d883a 	mov	r6,r2
    7fbc:	280f883a 	mov	r7,r5
    7fc0:	18000726 	beq	r3,zero,7fe0 <__divdi3+0x1b0>
    7fc4:	0009883a 	mov	r4,zero
    7fc8:	2085c83a 	sub	r2,r4,r2
    7fcc:	2089803a 	cmpltu	r4,r4,r2
    7fd0:	0147c83a 	sub	r3,zero,r5
    7fd4:	1909c83a 	sub	r4,r3,r4
    7fd8:	100d883a 	mov	r6,r2
    7fdc:	200f883a 	mov	r7,r4
    7fe0:	3005883a 	mov	r2,r6
    7fe4:	3807883a 	mov	r3,r7
    7fe8:	dfc01017 	ldw	ra,64(sp)
    7fec:	df000f17 	ldw	fp,60(sp)
    7ff0:	ddc00e17 	ldw	r23,56(sp)
    7ff4:	dd800d17 	ldw	r22,52(sp)
    7ff8:	dd400c17 	ldw	r21,48(sp)
    7ffc:	dd000b17 	ldw	r20,44(sp)
    8000:	dcc00a17 	ldw	r19,40(sp)
    8004:	dc800917 	ldw	r18,36(sp)
    8008:	dc400817 	ldw	r17,32(sp)
    800c:	dc000717 	ldw	r16,28(sp)
    8010:	dec01104 	addi	sp,sp,68
    8014:	f800283a 	ret
    8018:	00bfffd4 	movui	r2,65535
    801c:	12807636 	bltu	r2,r10,81f8 <__divdi3+0x3c8>
    8020:	00803fc4 	movi	r2,255
    8024:	12811f36 	bltu	r2,r10,84a4 <__divdi3+0x674>
    8028:	000b883a 	mov	r5,zero
    802c:	0005883a 	mov	r2,zero
    8030:	9884d83a 	srl	r2,r19,r2
    8034:	01000074 	movhi	r4,1
    8038:	213a4504 	addi	r4,r4,-5868
    803c:	01800804 	movi	r6,32
    8040:	1105883a 	add	r2,r2,r4
    8044:	10c00003 	ldbu	r3,0(r2)
    8048:	28c7883a 	add	r3,r5,r3
    804c:	30d1c83a 	sub	r8,r6,r3
    8050:	40000626 	beq	r8,zero,806c <__divdi3+0x23c>
    8054:	3205c83a 	sub	r2,r6,r8
    8058:	b084d83a 	srl	r2,r22,r2
    805c:	aa06983a 	sll	r3,r21,r8
    8060:	b22c983a 	sll	r22,r22,r8
    8064:	9a26983a 	sll	r19,r19,r8
    8068:	18aab03a 	or	r21,r3,r2
    806c:	982ed43a 	srli	r23,r19,16
    8070:	a809883a 	mov	r4,r21
    8074:	9cbfffcc 	andi	r18,r19,65535
    8078:	b80b883a 	mov	r5,r23
    807c:	000a6a00 	call	a6a0 <__udivsi3>
    8080:	100b883a 	mov	r5,r2
    8084:	9009883a 	mov	r4,r18
    8088:	1021883a 	mov	r16,r2
    808c:	000a6b00 	call	a6b0 <__mulsi3>
    8090:	a809883a 	mov	r4,r21
    8094:	b80b883a 	mov	r5,r23
    8098:	1023883a 	mov	r17,r2
    809c:	000a6a80 	call	a6a8 <__umodsi3>
    80a0:	1004943a 	slli	r2,r2,16
    80a4:	b006d43a 	srli	r3,r22,16
    80a8:	10c4b03a 	or	r2,r2,r3
    80ac:	1440042e 	bgeu	r2,r17,80c0 <__divdi3+0x290>
    80b0:	14c5883a 	add	r2,r2,r19
    80b4:	843fffc4 	addi	r16,r16,-1
    80b8:	14c00136 	bltu	r2,r19,80c0 <__divdi3+0x290>
    80bc:	14411c36 	bltu	r2,r17,8530 <__divdi3+0x700>
    80c0:	1463c83a 	sub	r17,r2,r17
    80c4:	8809883a 	mov	r4,r17
    80c8:	b80b883a 	mov	r5,r23
    80cc:	000a6a00 	call	a6a0 <__udivsi3>
    80d0:	100b883a 	mov	r5,r2
    80d4:	9009883a 	mov	r4,r18
    80d8:	102b883a 	mov	r21,r2
    80dc:	000a6b00 	call	a6b0 <__mulsi3>
    80e0:	8809883a 	mov	r4,r17
    80e4:	b80b883a 	mov	r5,r23
    80e8:	1025883a 	mov	r18,r2
    80ec:	000a6a80 	call	a6a8 <__umodsi3>
    80f0:	1004943a 	slli	r2,r2,16
    80f4:	b0ffffcc 	andi	r3,r22,65535
    80f8:	10c4b03a 	or	r2,r2,r3
    80fc:	1480042e 	bgeu	r2,r18,8110 <__divdi3+0x2e0>
    8100:	9885883a 	add	r2,r19,r2
    8104:	ad7fffc4 	addi	r21,r21,-1
    8108:	14c00136 	bltu	r2,r19,8110 <__divdi3+0x2e0>
    810c:	14810636 	bltu	r2,r18,8528 <__divdi3+0x6f8>
    8110:	8004943a 	slli	r2,r16,16
    8114:	000b883a 	mov	r5,zero
    8118:	a884b03a 	or	r2,r21,r2
    811c:	003fa306 	br	7fac <__divdi3+0x17c>
    8120:	00bfffd4 	movui	r2,65535
    8124:	12c02e36 	bltu	r2,r11,81e0 <__divdi3+0x3b0>
    8128:	00803fc4 	movi	r2,255
    812c:	12c0e636 	bltu	r2,r11,84c8 <__divdi3+0x698>
    8130:	000b883a 	mov	r5,zero
    8134:	0005883a 	mov	r2,zero
    8138:	4084d83a 	srl	r2,r8,r2
    813c:	01000074 	movhi	r4,1
    8140:	213a4504 	addi	r4,r4,-5868
    8144:	01800804 	movi	r6,32
    8148:	1105883a 	add	r2,r2,r4
    814c:	10c00003 	ldbu	r3,0(r2)
    8150:	28c7883a 	add	r3,r5,r3
    8154:	30c7c83a 	sub	r3,r6,r3
    8158:	d8c00215 	stw	r3,8(sp)
    815c:	1800331e 	bne	r3,zero,822c <__divdi3+0x3fc>
    8160:	45400136 	bltu	r8,r21,8168 <__divdi3+0x338>
    8164:	b4ff8f36 	bltu	r22,r19,7fa4 <__divdi3+0x174>
    8168:	00800044 	movi	r2,1
    816c:	000b883a 	mov	r5,zero
    8170:	003f8e06 	br	7fac <__divdi3+0x17c>
    8174:	0009883a 	mov	r4,zero
    8178:	2285c83a 	sub	r2,r4,r10
    817c:	2089803a 	cmpltu	r4,r4,r2
    8180:	1015883a 	mov	r10,r2
    8184:	d8800417 	ldw	r2,16(sp)
    8188:	02c7c83a 	sub	r3,zero,r11
    818c:	1909c83a 	sub	r4,r3,r4
    8190:	0084303a 	nor	r2,zero,r2
    8194:	2017883a 	mov	r11,r4
    8198:	d8800415 	stw	r2,16(sp)
    819c:	003f3b06 	br	7e8c <__divdi3+0x5c>
    81a0:	0009883a 	mov	r4,zero
    81a4:	2305c83a 	sub	r2,r4,r12
    81a8:	00c7c83a 	sub	r3,zero,r3
    81ac:	2089803a 	cmpltu	r4,r4,r2
    81b0:	1909c83a 	sub	r4,r3,r4
    81b4:	1019883a 	mov	r12,r2
    81b8:	00ffffc4 	movi	r3,-1
    81bc:	201b883a 	mov	r13,r4
    81c0:	d8c00415 	stw	r3,16(sp)
    81c4:	003f3006 	br	7e88 <__divdi3+0x58>
    81c8:	00804034 	movhi	r2,256
    81cc:	10bfffc4 	addi	r2,r2,-1
    81d0:	14c0c036 	bltu	r2,r19,84d4 <__divdi3+0x6a4>
    81d4:	01400404 	movi	r5,16
    81d8:	2805883a 	mov	r2,r5
    81dc:	003f3706 	br	7ebc <__divdi3+0x8c>
    81e0:	00804034 	movhi	r2,256
    81e4:	10bfffc4 	addi	r2,r2,-1
    81e8:	12c0b136 	bltu	r2,r11,84b0 <__divdi3+0x680>
    81ec:	01400404 	movi	r5,16
    81f0:	2805883a 	mov	r2,r5
    81f4:	003fd006 	br	8138 <__divdi3+0x308>
    81f8:	00804034 	movhi	r2,256
    81fc:	10bfffc4 	addi	r2,r2,-1
    8200:	1280b736 	bltu	r2,r10,84e0 <__divdi3+0x6b0>
    8204:	01400404 	movi	r5,16
    8208:	2805883a 	mov	r2,r5
    820c:	003f8806 	br	8030 <__divdi3+0x200>
    8210:	01000044 	movi	r4,1
    8214:	000b883a 	mov	r5,zero
    8218:	000a6a00 	call	a6a0 <__udivsi3>
    821c:	1027883a 	mov	r19,r2
    8220:	00bfffd4 	movui	r2,65535
    8224:	14ffe836 	bltu	r2,r19,81c8 <__divdi3+0x398>
    8228:	003f2006 	br	7eac <__divdi3+0x7c>
    822c:	d8c00217 	ldw	r3,8(sp)
    8230:	30c5c83a 	sub	r2,r6,r3
    8234:	40c8983a 	sll	r4,r8,r3
    8238:	9886d83a 	srl	r3,r19,r2
    823c:	a8a2d83a 	srl	r17,r21,r2
    8240:	b084d83a 	srl	r2,r22,r2
    8244:	20e4b03a 	or	r18,r4,r3
    8248:	d9000217 	ldw	r4,8(sp)
    824c:	902ed43a 	srli	r23,r18,16
    8250:	953fffcc 	andi	r20,r18,65535
    8254:	a906983a 	sll	r3,r21,r4
    8258:	b80b883a 	mov	r5,r23
    825c:	8809883a 	mov	r4,r17
    8260:	1886b03a 	or	r3,r3,r2
    8264:	d8c00115 	stw	r3,4(sp)
    8268:	000a6a00 	call	a6a0 <__udivsi3>
    826c:	100b883a 	mov	r5,r2
    8270:	a009883a 	mov	r4,r20
    8274:	1039883a 	mov	fp,r2
    8278:	000a6b00 	call	a6b0 <__mulsi3>
    827c:	8809883a 	mov	r4,r17
    8280:	b80b883a 	mov	r5,r23
    8284:	102b883a 	mov	r21,r2
    8288:	000a6a80 	call	a6a8 <__umodsi3>
    828c:	d9000117 	ldw	r4,4(sp)
    8290:	1004943a 	slli	r2,r2,16
    8294:	2006d43a 	srli	r3,r4,16
    8298:	d9000217 	ldw	r4,8(sp)
    829c:	10c4b03a 	or	r2,r2,r3
    82a0:	9926983a 	sll	r19,r19,r4
    82a4:	1540032e 	bgeu	r2,r21,82b4 <__divdi3+0x484>
    82a8:	1485883a 	add	r2,r2,r18
    82ac:	e73fffc4 	addi	fp,fp,-1
    82b0:	1480972e 	bgeu	r2,r18,8510 <__divdi3+0x6e0>
    82b4:	1563c83a 	sub	r17,r2,r21
    82b8:	8809883a 	mov	r4,r17
    82bc:	b80b883a 	mov	r5,r23
    82c0:	000a6a00 	call	a6a0 <__udivsi3>
    82c4:	100b883a 	mov	r5,r2
    82c8:	a009883a 	mov	r4,r20
    82cc:	1021883a 	mov	r16,r2
    82d0:	000a6b00 	call	a6b0 <__mulsi3>
    82d4:	8809883a 	mov	r4,r17
    82d8:	b80b883a 	mov	r5,r23
    82dc:	1029883a 	mov	r20,r2
    82e0:	000a6a80 	call	a6a8 <__umodsi3>
    82e4:	d9000117 	ldw	r4,4(sp)
    82e8:	1004943a 	slli	r2,r2,16
    82ec:	20ffffcc 	andi	r3,r4,65535
    82f0:	10c6b03a 	or	r3,r2,r3
    82f4:	1d00032e 	bgeu	r3,r20,8304 <__divdi3+0x4d4>
    82f8:	1c87883a 	add	r3,r3,r18
    82fc:	843fffc4 	addi	r16,r16,-1
    8300:	1c807f2e 	bgeu	r3,r18,8500 <__divdi3+0x6d0>
    8304:	e004943a 	slli	r2,fp,16
    8308:	982ed43a 	srli	r23,r19,16
    830c:	9cffffcc 	andi	r19,r19,65535
    8310:	80a0b03a 	or	r16,r16,r2
    8314:	847fffcc 	andi	r17,r16,65535
    8318:	802ad43a 	srli	r21,r16,16
    831c:	8809883a 	mov	r4,r17
    8320:	980b883a 	mov	r5,r19
    8324:	1d25c83a 	sub	r18,r3,r20
    8328:	000a6b00 	call	a6b0 <__mulsi3>
    832c:	8809883a 	mov	r4,r17
    8330:	b80b883a 	mov	r5,r23
    8334:	1029883a 	mov	r20,r2
    8338:	000a6b00 	call	a6b0 <__mulsi3>
    833c:	980b883a 	mov	r5,r19
    8340:	a809883a 	mov	r4,r21
    8344:	1023883a 	mov	r17,r2
    8348:	000a6b00 	call	a6b0 <__mulsi3>
    834c:	a809883a 	mov	r4,r21
    8350:	b80b883a 	mov	r5,r23
    8354:	1027883a 	mov	r19,r2
    8358:	000a6b00 	call	a6b0 <__mulsi3>
    835c:	1009883a 	mov	r4,r2
    8360:	a004d43a 	srli	r2,r20,16
    8364:	8ce3883a 	add	r17,r17,r19
    8368:	1447883a 	add	r3,r2,r17
    836c:	1cc0022e 	bgeu	r3,r19,8378 <__divdi3+0x548>
    8370:	00800074 	movhi	r2,1
    8374:	2089883a 	add	r4,r4,r2
    8378:	1804d43a 	srli	r2,r3,16
    837c:	2085883a 	add	r2,r4,r2
    8380:	90804536 	bltu	r18,r2,8498 <__divdi3+0x668>
    8384:	90803e26 	beq	r18,r2,8480 <__divdi3+0x650>
    8388:	8005883a 	mov	r2,r16
    838c:	000b883a 	mov	r5,zero
    8390:	003f0606 	br	7fac <__divdi3+0x17c>
    8394:	9d26983a 	sll	r19,r19,r20
    8398:	3505c83a 	sub	r2,r6,r20
    839c:	a8a2d83a 	srl	r17,r21,r2
    83a0:	982ed43a 	srli	r23,r19,16
    83a4:	b084d83a 	srl	r2,r22,r2
    83a8:	ad06983a 	sll	r3,r21,r20
    83ac:	8809883a 	mov	r4,r17
    83b0:	b80b883a 	mov	r5,r23
    83b4:	1886b03a 	or	r3,r3,r2
    83b8:	d8c00015 	stw	r3,0(sp)
    83bc:	9f3fffcc 	andi	fp,r19,65535
    83c0:	000a6a00 	call	a6a0 <__udivsi3>
    83c4:	100b883a 	mov	r5,r2
    83c8:	e009883a 	mov	r4,fp
    83cc:	d8800315 	stw	r2,12(sp)
    83d0:	000a6b00 	call	a6b0 <__mulsi3>
    83d4:	8809883a 	mov	r4,r17
    83d8:	b80b883a 	mov	r5,r23
    83dc:	102b883a 	mov	r21,r2
    83e0:	000a6a80 	call	a6a8 <__umodsi3>
    83e4:	d9000017 	ldw	r4,0(sp)
    83e8:	1004943a 	slli	r2,r2,16
    83ec:	2006d43a 	srli	r3,r4,16
    83f0:	10c4b03a 	or	r2,r2,r3
    83f4:	1540052e 	bgeu	r2,r21,840c <__divdi3+0x5dc>
    83f8:	d8c00317 	ldw	r3,12(sp)
    83fc:	14c5883a 	add	r2,r2,r19
    8400:	18ffffc4 	addi	r3,r3,-1
    8404:	d8c00315 	stw	r3,12(sp)
    8408:	14c0382e 	bgeu	r2,r19,84ec <__divdi3+0x6bc>
    840c:	1563c83a 	sub	r17,r2,r21
    8410:	8809883a 	mov	r4,r17
    8414:	b80b883a 	mov	r5,r23
    8418:	000a6a00 	call	a6a0 <__udivsi3>
    841c:	100b883a 	mov	r5,r2
    8420:	e009883a 	mov	r4,fp
    8424:	1025883a 	mov	r18,r2
    8428:	000a6b00 	call	a6b0 <__mulsi3>
    842c:	8809883a 	mov	r4,r17
    8430:	b80b883a 	mov	r5,r23
    8434:	1021883a 	mov	r16,r2
    8438:	000a6a80 	call	a6a8 <__umodsi3>
    843c:	d9000017 	ldw	r4,0(sp)
    8440:	1004943a 	slli	r2,r2,16
    8444:	20ffffcc 	andi	r3,r4,65535
    8448:	10c6b03a 	or	r3,r2,r3
    844c:	1c00062e 	bgeu	r3,r16,8468 <__divdi3+0x638>
    8450:	1cc7883a 	add	r3,r3,r19
    8454:	94bfffc4 	addi	r18,r18,-1
    8458:	1cc00336 	bltu	r3,r19,8468 <__divdi3+0x638>
    845c:	1c00022e 	bgeu	r3,r16,8468 <__divdi3+0x638>
    8460:	94bfffc4 	addi	r18,r18,-1
    8464:	1cc7883a 	add	r3,r3,r19
    8468:	d9000317 	ldw	r4,12(sp)
    846c:	b52c983a 	sll	r22,r22,r20
    8470:	1c2bc83a 	sub	r21,r3,r16
    8474:	2004943a 	slli	r2,r4,16
    8478:	90a8b03a 	or	r20,r18,r2
    847c:	003e9c06 	br	7ef0 <__divdi3+0xc0>
    8480:	1804943a 	slli	r2,r3,16
    8484:	d8c00217 	ldw	r3,8(sp)
    8488:	b0c8983a 	sll	r4,r22,r3
    848c:	a0ffffcc 	andi	r3,r20,65535
    8490:	10c5883a 	add	r2,r2,r3
    8494:	20bfbc2e 	bgeu	r4,r2,8388 <__divdi3+0x558>
    8498:	80bfffc4 	addi	r2,r16,-1
    849c:	000b883a 	mov	r5,zero
    84a0:	003ec206 	br	7fac <__divdi3+0x17c>
    84a4:	01400204 	movi	r5,8
    84a8:	2805883a 	mov	r2,r5
    84ac:	003ee006 	br	8030 <__divdi3+0x200>
    84b0:	01400604 	movi	r5,24
    84b4:	2805883a 	mov	r2,r5
    84b8:	003f1f06 	br	8138 <__divdi3+0x308>
    84bc:	01400204 	movi	r5,8
    84c0:	2805883a 	mov	r2,r5
    84c4:	003e7d06 	br	7ebc <__divdi3+0x8c>
    84c8:	01400204 	movi	r5,8
    84cc:	2805883a 	mov	r2,r5
    84d0:	003f1906 	br	8138 <__divdi3+0x308>
    84d4:	01400604 	movi	r5,24
    84d8:	2805883a 	mov	r2,r5
    84dc:	003e7706 	br	7ebc <__divdi3+0x8c>
    84e0:	01400604 	movi	r5,24
    84e4:	2805883a 	mov	r2,r5
    84e8:	003ed106 	br	8030 <__divdi3+0x200>
    84ec:	157fc72e 	bgeu	r2,r21,840c <__divdi3+0x5dc>
    84f0:	18ffffc4 	addi	r3,r3,-1
    84f4:	14c5883a 	add	r2,r2,r19
    84f8:	d8c00315 	stw	r3,12(sp)
    84fc:	003fc306 	br	840c <__divdi3+0x5dc>
    8500:	1d3f802e 	bgeu	r3,r20,8304 <__divdi3+0x4d4>
    8504:	1c87883a 	add	r3,r3,r18
    8508:	843fffc4 	addi	r16,r16,-1
    850c:	003f7d06 	br	8304 <__divdi3+0x4d4>
    8510:	157f682e 	bgeu	r2,r21,82b4 <__divdi3+0x484>
    8514:	e73fffc4 	addi	fp,fp,-1
    8518:	1485883a 	add	r2,r2,r18
    851c:	003f6506 	br	82b4 <__divdi3+0x484>
    8520:	ad7fffc4 	addi	r21,r21,-1
    8524:	003e9906 	br	7f8c <__divdi3+0x15c>
    8528:	ad7fffc4 	addi	r21,r21,-1
    852c:	003ef806 	br	8110 <__divdi3+0x2e0>
    8530:	843fffc4 	addi	r16,r16,-1
    8534:	14c5883a 	add	r2,r2,r19
    8538:	003ee106 	br	80c0 <__divdi3+0x290>
    853c:	843fffc4 	addi	r16,r16,-1
    8540:	14c5883a 	add	r2,r2,r19
    8544:	003e7d06 	br	7f3c <__divdi3+0x10c>

00008548 <__udivdi3>:
    8548:	defff104 	addi	sp,sp,-60
    854c:	0015883a 	mov	r10,zero
    8550:	2005883a 	mov	r2,r4
    8554:	3011883a 	mov	r8,r6
    8558:	df000d15 	stw	fp,52(sp)
    855c:	dd400a15 	stw	r21,40(sp)
    8560:	dcc00815 	stw	r19,32(sp)
    8564:	dfc00e15 	stw	ra,56(sp)
    8568:	ddc00c15 	stw	r23,48(sp)
    856c:	dd800b15 	stw	r22,44(sp)
    8570:	dd000915 	stw	r20,36(sp)
    8574:	dc800715 	stw	r18,28(sp)
    8578:	dc400615 	stw	r17,24(sp)
    857c:	dc000515 	stw	r16,20(sp)
    8580:	da800315 	stw	r10,12(sp)
    8584:	4027883a 	mov	r19,r8
    8588:	1039883a 	mov	fp,r2
    858c:	282b883a 	mov	r21,r5
    8590:	da800415 	stw	r10,16(sp)
    8594:	3800401e 	bne	r7,zero,8698 <__udivdi3+0x150>
    8598:	2a006536 	bltu	r5,r8,8730 <__udivdi3+0x1e8>
    859c:	4000b526 	beq	r8,zero,8874 <__udivdi3+0x32c>
    85a0:	00bfffd4 	movui	r2,65535
    85a4:	14c0ad36 	bltu	r2,r19,885c <__udivdi3+0x314>
    85a8:	00803fc4 	movi	r2,255
    85ac:	14c15e36 	bltu	r2,r19,8b28 <__udivdi3+0x5e0>
    85b0:	000b883a 	mov	r5,zero
    85b4:	0005883a 	mov	r2,zero
    85b8:	9884d83a 	srl	r2,r19,r2
    85bc:	01000074 	movhi	r4,1
    85c0:	213a4504 	addi	r4,r4,-5868
    85c4:	01800804 	movi	r6,32
    85c8:	1105883a 	add	r2,r2,r4
    85cc:	10c00003 	ldbu	r3,0(r2)
    85d0:	28c7883a 	add	r3,r5,r3
    85d4:	30e9c83a 	sub	r20,r6,r3
    85d8:	a0010a1e 	bne	r20,zero,8a04 <__udivdi3+0x4bc>
    85dc:	982ed43a 	srli	r23,r19,16
    85e0:	acebc83a 	sub	r21,r21,r19
    85e4:	9dbfffcc 	andi	r22,r19,65535
    85e8:	05000044 	movi	r20,1
    85ec:	a809883a 	mov	r4,r21
    85f0:	b80b883a 	mov	r5,r23
    85f4:	000a6a00 	call	a6a0 <__udivsi3>
    85f8:	100b883a 	mov	r5,r2
    85fc:	b009883a 	mov	r4,r22
    8600:	1021883a 	mov	r16,r2
    8604:	000a6b00 	call	a6b0 <__mulsi3>
    8608:	a809883a 	mov	r4,r21
    860c:	b80b883a 	mov	r5,r23
    8610:	1023883a 	mov	r17,r2
    8614:	000a6a80 	call	a6a8 <__umodsi3>
    8618:	1004943a 	slli	r2,r2,16
    861c:	e006d43a 	srli	r3,fp,16
    8620:	10c4b03a 	or	r2,r2,r3
    8624:	1440042e 	bgeu	r2,r17,8638 <__udivdi3+0xf0>
    8628:	14c5883a 	add	r2,r2,r19
    862c:	843fffc4 	addi	r16,r16,-1
    8630:	14c00136 	bltu	r2,r19,8638 <__udivdi3+0xf0>
    8634:	14415c36 	bltu	r2,r17,8ba8 <__udivdi3+0x660>
    8638:	1463c83a 	sub	r17,r2,r17
    863c:	8809883a 	mov	r4,r17
    8640:	b80b883a 	mov	r5,r23
    8644:	000a6a00 	call	a6a0 <__udivsi3>
    8648:	100b883a 	mov	r5,r2
    864c:	b009883a 	mov	r4,r22
    8650:	102b883a 	mov	r21,r2
    8654:	000a6b00 	call	a6b0 <__mulsi3>
    8658:	8809883a 	mov	r4,r17
    865c:	b80b883a 	mov	r5,r23
    8660:	1025883a 	mov	r18,r2
    8664:	000a6a80 	call	a6a8 <__umodsi3>
    8668:	1004943a 	slli	r2,r2,16
    866c:	e0ffffcc 	andi	r3,fp,65535
    8670:	10c4b03a 	or	r2,r2,r3
    8674:	1480042e 	bgeu	r2,r18,8688 <__udivdi3+0x140>
    8678:	9885883a 	add	r2,r19,r2
    867c:	ad7fffc4 	addi	r21,r21,-1
    8680:	14c00136 	bltu	r2,r19,8688 <__udivdi3+0x140>
    8684:	14813c36 	bltu	r2,r18,8b78 <__udivdi3+0x630>
    8688:	8004943a 	slli	r2,r16,16
    868c:	a009883a 	mov	r4,r20
    8690:	a884b03a 	or	r2,r21,r2
    8694:	00001506 	br	86ec <__udivdi3+0x1a4>
    8698:	380d883a 	mov	r6,r7
    869c:	29c06c36 	bltu	r5,r7,8850 <__udivdi3+0x308>
    86a0:	00bfffd4 	movui	r2,65535
    86a4:	11c06436 	bltu	r2,r7,8838 <__udivdi3+0x2f0>
    86a8:	00803fc4 	movi	r2,255
    86ac:	11c11836 	bltu	r2,r7,8b10 <__udivdi3+0x5c8>
    86b0:	000b883a 	mov	r5,zero
    86b4:	0005883a 	mov	r2,zero
    86b8:	3084d83a 	srl	r2,r6,r2
    86bc:	01000074 	movhi	r4,1
    86c0:	213a4504 	addi	r4,r4,-5868
    86c4:	01c00804 	movi	r7,32
    86c8:	1105883a 	add	r2,r2,r4
    86cc:	10c00003 	ldbu	r3,0(r2)
    86d0:	28c7883a 	add	r3,r5,r3
    86d4:	38edc83a 	sub	r22,r7,r3
    86d8:	b000731e 	bne	r22,zero,88a8 <__udivdi3+0x360>
    86dc:	35400136 	bltu	r6,r21,86e4 <__udivdi3+0x19c>
    86e0:	e4c05b36 	bltu	fp,r19,8850 <__udivdi3+0x308>
    86e4:	00800044 	movi	r2,1
    86e8:	0009883a 	mov	r4,zero
    86ec:	d8800315 	stw	r2,12(sp)
    86f0:	d9400317 	ldw	r5,12(sp)
    86f4:	2007883a 	mov	r3,r4
    86f8:	d9000415 	stw	r4,16(sp)
    86fc:	2805883a 	mov	r2,r5
    8700:	dfc00e17 	ldw	ra,56(sp)
    8704:	df000d17 	ldw	fp,52(sp)
    8708:	ddc00c17 	ldw	r23,48(sp)
    870c:	dd800b17 	ldw	r22,44(sp)
    8710:	dd400a17 	ldw	r21,40(sp)
    8714:	dd000917 	ldw	r20,36(sp)
    8718:	dcc00817 	ldw	r19,32(sp)
    871c:	dc800717 	ldw	r18,28(sp)
    8720:	dc400617 	ldw	r17,24(sp)
    8724:	dc000517 	ldw	r16,20(sp)
    8728:	dec00f04 	addi	sp,sp,60
    872c:	f800283a 	ret
    8730:	00bfffd4 	movui	r2,65535
    8734:	12005636 	bltu	r2,r8,8890 <__udivdi3+0x348>
    8738:	00803fc4 	movi	r2,255
    873c:	12010036 	bltu	r2,r8,8b40 <__udivdi3+0x5f8>
    8740:	000b883a 	mov	r5,zero
    8744:	0005883a 	mov	r2,zero
    8748:	9884d83a 	srl	r2,r19,r2
    874c:	01000074 	movhi	r4,1
    8750:	213a4504 	addi	r4,r4,-5868
    8754:	01800804 	movi	r6,32
    8758:	1105883a 	add	r2,r2,r4
    875c:	10c00003 	ldbu	r3,0(r2)
    8760:	28c7883a 	add	r3,r5,r3
    8764:	30cbc83a 	sub	r5,r6,r3
    8768:	28000626 	beq	r5,zero,8784 <__udivdi3+0x23c>
    876c:	3145c83a 	sub	r2,r6,r5
    8770:	e084d83a 	srl	r2,fp,r2
    8774:	a946983a 	sll	r3,r21,r5
    8778:	e178983a 	sll	fp,fp,r5
    877c:	9966983a 	sll	r19,r19,r5
    8780:	18aab03a 	or	r21,r3,r2
    8784:	982ed43a 	srli	r23,r19,16
    8788:	a809883a 	mov	r4,r21
    878c:	9cbfffcc 	andi	r18,r19,65535
    8790:	b80b883a 	mov	r5,r23
    8794:	000a6a00 	call	a6a0 <__udivsi3>
    8798:	100b883a 	mov	r5,r2
    879c:	9009883a 	mov	r4,r18
    87a0:	1021883a 	mov	r16,r2
    87a4:	000a6b00 	call	a6b0 <__mulsi3>
    87a8:	a809883a 	mov	r4,r21
    87ac:	b80b883a 	mov	r5,r23
    87b0:	1023883a 	mov	r17,r2
    87b4:	000a6a80 	call	a6a8 <__umodsi3>
    87b8:	1004943a 	slli	r2,r2,16
    87bc:	e006d43a 	srli	r3,fp,16
    87c0:	10c4b03a 	or	r2,r2,r3
    87c4:	1440042e 	bgeu	r2,r17,87d8 <__udivdi3+0x290>
    87c8:	14c5883a 	add	r2,r2,r19
    87cc:	843fffc4 	addi	r16,r16,-1
    87d0:	14c00136 	bltu	r2,r19,87d8 <__udivdi3+0x290>
    87d4:	1440ea36 	bltu	r2,r17,8b80 <__udivdi3+0x638>
    87d8:	1463c83a 	sub	r17,r2,r17
    87dc:	8809883a 	mov	r4,r17
    87e0:	b80b883a 	mov	r5,r23
    87e4:	000a6a00 	call	a6a0 <__udivsi3>
    87e8:	100b883a 	mov	r5,r2
    87ec:	9009883a 	mov	r4,r18
    87f0:	102b883a 	mov	r21,r2
    87f4:	000a6b00 	call	a6b0 <__mulsi3>
    87f8:	8809883a 	mov	r4,r17
    87fc:	b80b883a 	mov	r5,r23
    8800:	1025883a 	mov	r18,r2
    8804:	000a6a80 	call	a6a8 <__umodsi3>
    8808:	1004943a 	slli	r2,r2,16
    880c:	e0ffffcc 	andi	r3,fp,65535
    8810:	10c4b03a 	or	r2,r2,r3
    8814:	1480042e 	bgeu	r2,r18,8828 <__udivdi3+0x2e0>
    8818:	9885883a 	add	r2,r19,r2
    881c:	ad7fffc4 	addi	r21,r21,-1
    8820:	14c00136 	bltu	r2,r19,8828 <__udivdi3+0x2e0>
    8824:	1480d936 	bltu	r2,r18,8b8c <__udivdi3+0x644>
    8828:	8004943a 	slli	r2,r16,16
    882c:	0009883a 	mov	r4,zero
    8830:	a884b03a 	or	r2,r21,r2
    8834:	003fad06 	br	86ec <__udivdi3+0x1a4>
    8838:	00804034 	movhi	r2,256
    883c:	10bfffc4 	addi	r2,r2,-1
    8840:	11c0b636 	bltu	r2,r7,8b1c <__udivdi3+0x5d4>
    8844:	01400404 	movi	r5,16
    8848:	2805883a 	mov	r2,r5
    884c:	003f9a06 	br	86b8 <__udivdi3+0x170>
    8850:	0005883a 	mov	r2,zero
    8854:	0009883a 	mov	r4,zero
    8858:	003fa406 	br	86ec <__udivdi3+0x1a4>
    885c:	00804034 	movhi	r2,256
    8860:	10bfffc4 	addi	r2,r2,-1
    8864:	14c0b336 	bltu	r2,r19,8b34 <__udivdi3+0x5ec>
    8868:	01400404 	movi	r5,16
    886c:	2805883a 	mov	r2,r5
    8870:	003f5106 	br	85b8 <__udivdi3+0x70>
    8874:	01000044 	movi	r4,1
    8878:	000b883a 	mov	r5,zero
    887c:	000a6a00 	call	a6a0 <__udivsi3>
    8880:	1027883a 	mov	r19,r2
    8884:	00bfffd4 	movui	r2,65535
    8888:	14fff436 	bltu	r2,r19,885c <__udivdi3+0x314>
    888c:	003f4606 	br	85a8 <__udivdi3+0x60>
    8890:	00804034 	movhi	r2,256
    8894:	10bfffc4 	addi	r2,r2,-1
    8898:	1200ac36 	bltu	r2,r8,8b4c <__udivdi3+0x604>
    889c:	01400404 	movi	r5,16
    88a0:	2805883a 	mov	r2,r5
    88a4:	003fa806 	br	8748 <__udivdi3+0x200>
    88a8:	3d85c83a 	sub	r2,r7,r22
    88ac:	3588983a 	sll	r4,r6,r22
    88b0:	9886d83a 	srl	r3,r19,r2
    88b4:	a8a2d83a 	srl	r17,r21,r2
    88b8:	e084d83a 	srl	r2,fp,r2
    88bc:	20eeb03a 	or	r23,r4,r3
    88c0:	b824d43a 	srli	r18,r23,16
    88c4:	ad86983a 	sll	r3,r21,r22
    88c8:	8809883a 	mov	r4,r17
    88cc:	900b883a 	mov	r5,r18
    88d0:	1886b03a 	or	r3,r3,r2
    88d4:	d8c00115 	stw	r3,4(sp)
    88d8:	bc3fffcc 	andi	r16,r23,65535
    88dc:	000a6a00 	call	a6a0 <__udivsi3>
    88e0:	100b883a 	mov	r5,r2
    88e4:	8009883a 	mov	r4,r16
    88e8:	1029883a 	mov	r20,r2
    88ec:	000a6b00 	call	a6b0 <__mulsi3>
    88f0:	900b883a 	mov	r5,r18
    88f4:	8809883a 	mov	r4,r17
    88f8:	102b883a 	mov	r21,r2
    88fc:	000a6a80 	call	a6a8 <__umodsi3>
    8900:	d9400117 	ldw	r5,4(sp)
    8904:	1004943a 	slli	r2,r2,16
    8908:	9da6983a 	sll	r19,r19,r22
    890c:	2806d43a 	srli	r3,r5,16
    8910:	10c4b03a 	or	r2,r2,r3
    8914:	1540032e 	bgeu	r2,r21,8924 <__udivdi3+0x3dc>
    8918:	15c5883a 	add	r2,r2,r23
    891c:	a53fffc4 	addi	r20,r20,-1
    8920:	15c0912e 	bgeu	r2,r23,8b68 <__udivdi3+0x620>
    8924:	1563c83a 	sub	r17,r2,r21
    8928:	8809883a 	mov	r4,r17
    892c:	900b883a 	mov	r5,r18
    8930:	000a6a00 	call	a6a0 <__udivsi3>
    8934:	100b883a 	mov	r5,r2
    8938:	8009883a 	mov	r4,r16
    893c:	102b883a 	mov	r21,r2
    8940:	000a6b00 	call	a6b0 <__mulsi3>
    8944:	8809883a 	mov	r4,r17
    8948:	900b883a 	mov	r5,r18
    894c:	1021883a 	mov	r16,r2
    8950:	000a6a80 	call	a6a8 <__umodsi3>
    8954:	da800117 	ldw	r10,4(sp)
    8958:	1004943a 	slli	r2,r2,16
    895c:	50ffffcc 	andi	r3,r10,65535
    8960:	10c6b03a 	or	r3,r2,r3
    8964:	1c00032e 	bgeu	r3,r16,8974 <__udivdi3+0x42c>
    8968:	1dc7883a 	add	r3,r3,r23
    896c:	ad7fffc4 	addi	r21,r21,-1
    8970:	1dc0792e 	bgeu	r3,r23,8b58 <__udivdi3+0x610>
    8974:	a004943a 	slli	r2,r20,16
    8978:	982ed43a 	srli	r23,r19,16
    897c:	9cffffcc 	andi	r19,r19,65535
    8980:	a8a4b03a 	or	r18,r21,r2
    8984:	947fffcc 	andi	r17,r18,65535
    8988:	902ad43a 	srli	r21,r18,16
    898c:	8809883a 	mov	r4,r17
    8990:	980b883a 	mov	r5,r19
    8994:	1c21c83a 	sub	r16,r3,r16
    8998:	000a6b00 	call	a6b0 <__mulsi3>
    899c:	8809883a 	mov	r4,r17
    89a0:	b80b883a 	mov	r5,r23
    89a4:	1029883a 	mov	r20,r2
    89a8:	000a6b00 	call	a6b0 <__mulsi3>
    89ac:	980b883a 	mov	r5,r19
    89b0:	a809883a 	mov	r4,r21
    89b4:	1023883a 	mov	r17,r2
    89b8:	000a6b00 	call	a6b0 <__mulsi3>
    89bc:	a809883a 	mov	r4,r21
    89c0:	b80b883a 	mov	r5,r23
    89c4:	1027883a 	mov	r19,r2
    89c8:	000a6b00 	call	a6b0 <__mulsi3>
    89cc:	1009883a 	mov	r4,r2
    89d0:	a004d43a 	srli	r2,r20,16
    89d4:	8ce3883a 	add	r17,r17,r19
    89d8:	1447883a 	add	r3,r2,r17
    89dc:	1cc0022e 	bgeu	r3,r19,89e8 <__udivdi3+0x4a0>
    89e0:	00800074 	movhi	r2,1
    89e4:	2089883a 	add	r4,r4,r2
    89e8:	1804d43a 	srli	r2,r3,16
    89ec:	2085883a 	add	r2,r4,r2
    89f0:	80804436 	bltu	r16,r2,8b04 <__udivdi3+0x5bc>
    89f4:	80803e26 	beq	r16,r2,8af0 <__udivdi3+0x5a8>
    89f8:	9005883a 	mov	r2,r18
    89fc:	0009883a 	mov	r4,zero
    8a00:	003f3a06 	br	86ec <__udivdi3+0x1a4>
    8a04:	9d26983a 	sll	r19,r19,r20
    8a08:	3505c83a 	sub	r2,r6,r20
    8a0c:	a8a2d83a 	srl	r17,r21,r2
    8a10:	982ed43a 	srli	r23,r19,16
    8a14:	e084d83a 	srl	r2,fp,r2
    8a18:	ad06983a 	sll	r3,r21,r20
    8a1c:	8809883a 	mov	r4,r17
    8a20:	b80b883a 	mov	r5,r23
    8a24:	1886b03a 	or	r3,r3,r2
    8a28:	d8c00015 	stw	r3,0(sp)
    8a2c:	9dbfffcc 	andi	r22,r19,65535
    8a30:	000a6a00 	call	a6a0 <__udivsi3>
    8a34:	100b883a 	mov	r5,r2
    8a38:	b009883a 	mov	r4,r22
    8a3c:	d8800215 	stw	r2,8(sp)
    8a40:	000a6b00 	call	a6b0 <__mulsi3>
    8a44:	8809883a 	mov	r4,r17
    8a48:	b80b883a 	mov	r5,r23
    8a4c:	102b883a 	mov	r21,r2
    8a50:	000a6a80 	call	a6a8 <__umodsi3>
    8a54:	d9000017 	ldw	r4,0(sp)
    8a58:	1004943a 	slli	r2,r2,16
    8a5c:	2006d43a 	srli	r3,r4,16
    8a60:	10c4b03a 	or	r2,r2,r3
    8a64:	1540052e 	bgeu	r2,r21,8a7c <__udivdi3+0x534>
    8a68:	d9400217 	ldw	r5,8(sp)
    8a6c:	14c5883a 	add	r2,r2,r19
    8a70:	297fffc4 	addi	r5,r5,-1
    8a74:	d9400215 	stw	r5,8(sp)
    8a78:	14c0462e 	bgeu	r2,r19,8b94 <__udivdi3+0x64c>
    8a7c:	1563c83a 	sub	r17,r2,r21
    8a80:	8809883a 	mov	r4,r17
    8a84:	b80b883a 	mov	r5,r23
    8a88:	000a6a00 	call	a6a0 <__udivsi3>
    8a8c:	100b883a 	mov	r5,r2
    8a90:	b009883a 	mov	r4,r22
    8a94:	1025883a 	mov	r18,r2
    8a98:	000a6b00 	call	a6b0 <__mulsi3>
    8a9c:	8809883a 	mov	r4,r17
    8aa0:	b80b883a 	mov	r5,r23
    8aa4:	1021883a 	mov	r16,r2
    8aa8:	000a6a80 	call	a6a8 <__umodsi3>
    8aac:	da800017 	ldw	r10,0(sp)
    8ab0:	1004943a 	slli	r2,r2,16
    8ab4:	50ffffcc 	andi	r3,r10,65535
    8ab8:	10c6b03a 	or	r3,r2,r3
    8abc:	1c00062e 	bgeu	r3,r16,8ad8 <__udivdi3+0x590>
    8ac0:	1cc7883a 	add	r3,r3,r19
    8ac4:	94bfffc4 	addi	r18,r18,-1
    8ac8:	1cc00336 	bltu	r3,r19,8ad8 <__udivdi3+0x590>
    8acc:	1c00022e 	bgeu	r3,r16,8ad8 <__udivdi3+0x590>
    8ad0:	94bfffc4 	addi	r18,r18,-1
    8ad4:	1cc7883a 	add	r3,r3,r19
    8ad8:	d9000217 	ldw	r4,8(sp)
    8adc:	e538983a 	sll	fp,fp,r20
    8ae0:	1c2bc83a 	sub	r21,r3,r16
    8ae4:	2004943a 	slli	r2,r4,16
    8ae8:	90a8b03a 	or	r20,r18,r2
    8aec:	003ebf06 	br	85ec <__udivdi3+0xa4>
    8af0:	1804943a 	slli	r2,r3,16
    8af4:	e588983a 	sll	r4,fp,r22
    8af8:	a0ffffcc 	andi	r3,r20,65535
    8afc:	10c5883a 	add	r2,r2,r3
    8b00:	20bfbd2e 	bgeu	r4,r2,89f8 <__udivdi3+0x4b0>
    8b04:	90bfffc4 	addi	r2,r18,-1
    8b08:	0009883a 	mov	r4,zero
    8b0c:	003ef706 	br	86ec <__udivdi3+0x1a4>
    8b10:	01400204 	movi	r5,8
    8b14:	2805883a 	mov	r2,r5
    8b18:	003ee706 	br	86b8 <__udivdi3+0x170>
    8b1c:	01400604 	movi	r5,24
    8b20:	2805883a 	mov	r2,r5
    8b24:	003ee406 	br	86b8 <__udivdi3+0x170>
    8b28:	01400204 	movi	r5,8
    8b2c:	2805883a 	mov	r2,r5
    8b30:	003ea106 	br	85b8 <__udivdi3+0x70>
    8b34:	01400604 	movi	r5,24
    8b38:	2805883a 	mov	r2,r5
    8b3c:	003e9e06 	br	85b8 <__udivdi3+0x70>
    8b40:	01400204 	movi	r5,8
    8b44:	2805883a 	mov	r2,r5
    8b48:	003eff06 	br	8748 <__udivdi3+0x200>
    8b4c:	01400604 	movi	r5,24
    8b50:	2805883a 	mov	r2,r5
    8b54:	003efc06 	br	8748 <__udivdi3+0x200>
    8b58:	1c3f862e 	bgeu	r3,r16,8974 <__udivdi3+0x42c>
    8b5c:	1dc7883a 	add	r3,r3,r23
    8b60:	ad7fffc4 	addi	r21,r21,-1
    8b64:	003f8306 	br	8974 <__udivdi3+0x42c>
    8b68:	157f6e2e 	bgeu	r2,r21,8924 <__udivdi3+0x3dc>
    8b6c:	a53fffc4 	addi	r20,r20,-1
    8b70:	15c5883a 	add	r2,r2,r23
    8b74:	003f6b06 	br	8924 <__udivdi3+0x3dc>
    8b78:	ad7fffc4 	addi	r21,r21,-1
    8b7c:	003ec206 	br	8688 <__udivdi3+0x140>
    8b80:	843fffc4 	addi	r16,r16,-1
    8b84:	14c5883a 	add	r2,r2,r19
    8b88:	003f1306 	br	87d8 <__udivdi3+0x290>
    8b8c:	ad7fffc4 	addi	r21,r21,-1
    8b90:	003f2506 	br	8828 <__udivdi3+0x2e0>
    8b94:	157fb92e 	bgeu	r2,r21,8a7c <__udivdi3+0x534>
    8b98:	297fffc4 	addi	r5,r5,-1
    8b9c:	14c5883a 	add	r2,r2,r19
    8ba0:	d9400215 	stw	r5,8(sp)
    8ba4:	003fb506 	br	8a7c <__udivdi3+0x534>
    8ba8:	843fffc4 	addi	r16,r16,-1
    8bac:	14c5883a 	add	r2,r2,r19
    8bb0:	003ea106 	br	8638 <__udivdi3+0xf0>

00008bb4 <_fpadd_parts>:
    8bb4:	21c00017 	ldw	r7,0(r4)
    8bb8:	02000044 	movi	r8,1
    8bbc:	41c0332e 	bgeu	r8,r7,8c8c <_fpadd_parts+0xd8>
    8bc0:	28800017 	ldw	r2,0(r5)
    8bc4:	4080462e 	bgeu	r8,r2,8ce0 <_fpadd_parts+0x12c>
    8bc8:	00c00104 	movi	r3,4
    8bcc:	38c06b26 	beq	r7,r3,8d7c <_fpadd_parts+0x1c8>
    8bd0:	10c04326 	beq	r2,r3,8ce0 <_fpadd_parts+0x12c>
    8bd4:	00c00084 	movi	r3,2
    8bd8:	10c02e26 	beq	r2,r3,8c94 <_fpadd_parts+0xe0>
    8bdc:	38c04026 	beq	r7,r3,8ce0 <_fpadd_parts+0x12c>
    8be0:	22800217 	ldw	r10,8(r4)
    8be4:	28c00217 	ldw	r3,8(r5)
    8be8:	23000317 	ldw	r12,12(r4)
    8bec:	2a400317 	ldw	r9,12(r5)
    8bf0:	50cfc83a 	sub	r7,r10,r3
    8bf4:	3817883a 	mov	r11,r7
    8bf8:	38004f16 	blt	r7,zero,8d38 <_fpadd_parts+0x184>
    8bfc:	008007c4 	movi	r2,31
    8c00:	11c03316 	blt	r2,r7,8cd0 <_fpadd_parts+0x11c>
    8c04:	02c0540e 	bge	zero,r11,8d58 <_fpadd_parts+0x1a4>
    8c08:	41c4983a 	sll	r2,r8,r7
    8c0c:	49c6d83a 	srl	r3,r9,r7
    8c10:	10bfffc4 	addi	r2,r2,-1
    8c14:	4884703a 	and	r2,r9,r2
    8c18:	1004c03a 	cmpne	r2,r2,zero
    8c1c:	1892b03a 	or	r9,r3,r2
    8c20:	20c00117 	ldw	r3,4(r4)
    8c24:	28800117 	ldw	r2,4(r5)
    8c28:	18803c26 	beq	r3,r2,8d1c <_fpadd_parts+0x168>
    8c2c:	18002f26 	beq	r3,zero,8cec <_fpadd_parts+0x138>
    8c30:	4b05c83a 	sub	r2,r9,r12
    8c34:	10004216 	blt	r2,zero,8d40 <_fpadd_parts+0x18c>
    8c38:	32800215 	stw	r10,8(r6)
    8c3c:	30800315 	stw	r2,12(r6)
    8c40:	30000115 	stw	zero,4(r6)
    8c44:	31000317 	ldw	r4,12(r6)
    8c48:	01d00034 	movhi	r7,16384
    8c4c:	39ffff84 	addi	r7,r7,-2
    8c50:	20bfffc4 	addi	r2,r4,-1
    8c54:	2007883a 	mov	r3,r4
    8c58:	38800836 	bltu	r7,r2,8c7c <_fpadd_parts+0xc8>
    8c5c:	31400217 	ldw	r5,8(r6)
    8c60:	18c9883a 	add	r4,r3,r3
    8c64:	20bfffc4 	addi	r2,r4,-1
    8c68:	297fffc4 	addi	r5,r5,-1
    8c6c:	2007883a 	mov	r3,r4
    8c70:	38bffb2e 	bgeu	r7,r2,8c60 <_fpadd_parts+0xac>
    8c74:	31400215 	stw	r5,8(r6)
    8c78:	31000315 	stw	r4,12(r6)
    8c7c:	008000c4 	movi	r2,3
    8c80:	30800015 	stw	r2,0(r6)
    8c84:	20001b16 	blt	r4,zero,8cf4 <_fpadd_parts+0x140>
    8c88:	3009883a 	mov	r4,r6
    8c8c:	2005883a 	mov	r2,r4
    8c90:	f800283a 	ret
    8c94:	38fffd1e 	bne	r7,r3,8c8c <_fpadd_parts+0xd8>
    8c98:	31c00015 	stw	r7,0(r6)
    8c9c:	20800117 	ldw	r2,4(r4)
    8ca0:	30800115 	stw	r2,4(r6)
    8ca4:	20c00217 	ldw	r3,8(r4)
    8ca8:	30c00215 	stw	r3,8(r6)
    8cac:	20800317 	ldw	r2,12(r4)
    8cb0:	30800315 	stw	r2,12(r6)
    8cb4:	20c00117 	ldw	r3,4(r4)
    8cb8:	28800117 	ldw	r2,4(r5)
    8cbc:	3009883a 	mov	r4,r6
    8cc0:	1886703a 	and	r3,r3,r2
    8cc4:	2005883a 	mov	r2,r4
    8cc8:	30c00115 	stw	r3,4(r6)
    8ccc:	f800283a 	ret
    8cd0:	1a801716 	blt	r3,r10,8d30 <_fpadd_parts+0x17c>
    8cd4:	1815883a 	mov	r10,r3
    8cd8:	0019883a 	mov	r12,zero
    8cdc:	003fd006 	br	8c20 <_fpadd_parts+0x6c>
    8ce0:	2809883a 	mov	r4,r5
    8ce4:	2005883a 	mov	r2,r4
    8ce8:	f800283a 	ret
    8cec:	6245c83a 	sub	r2,r12,r9
    8cf0:	003fd006 	br	8c34 <_fpadd_parts+0x80>
    8cf4:	30800217 	ldw	r2,8(r6)
    8cf8:	2006d07a 	srli	r3,r4,1
    8cfc:	2100004c 	andi	r4,r4,1
    8d00:	10800044 	addi	r2,r2,1
    8d04:	1906b03a 	or	r3,r3,r4
    8d08:	3009883a 	mov	r4,r6
    8d0c:	30800215 	stw	r2,8(r6)
    8d10:	2005883a 	mov	r2,r4
    8d14:	30c00315 	stw	r3,12(r6)
    8d18:	f800283a 	ret
    8d1c:	4b09883a 	add	r4,r9,r12
    8d20:	30c00115 	stw	r3,4(r6)
    8d24:	32800215 	stw	r10,8(r6)
    8d28:	31000315 	stw	r4,12(r6)
    8d2c:	003fd306 	br	8c7c <_fpadd_parts+0xc8>
    8d30:	0013883a 	mov	r9,zero
    8d34:	003fba06 	br	8c20 <_fpadd_parts+0x6c>
    8d38:	01cfc83a 	sub	r7,zero,r7
    8d3c:	003faf06 	br	8bfc <_fpadd_parts+0x48>
    8d40:	0089c83a 	sub	r4,zero,r2
    8d44:	00800044 	movi	r2,1
    8d48:	30800115 	stw	r2,4(r6)
    8d4c:	32800215 	stw	r10,8(r6)
    8d50:	31000315 	stw	r4,12(r6)
    8d54:	003fbb06 	br	8c44 <_fpadd_parts+0x90>
    8d58:	583fb126 	beq	r11,zero,8c20 <_fpadd_parts+0x6c>
    8d5c:	41c4983a 	sll	r2,r8,r7
    8d60:	61c6d83a 	srl	r3,r12,r7
    8d64:	51d5883a 	add	r10,r10,r7
    8d68:	10bfffc4 	addi	r2,r2,-1
    8d6c:	6084703a 	and	r2,r12,r2
    8d70:	1004c03a 	cmpne	r2,r2,zero
    8d74:	1898b03a 	or	r12,r3,r2
    8d78:	003fa906 	br	8c20 <_fpadd_parts+0x6c>
    8d7c:	11ffc31e 	bne	r2,r7,8c8c <_fpadd_parts+0xd8>
    8d80:	28c00117 	ldw	r3,4(r5)
    8d84:	20800117 	ldw	r2,4(r4)
    8d88:	10ffc026 	beq	r2,r3,8c8c <_fpadd_parts+0xd8>
    8d8c:	01000074 	movhi	r4,1
    8d90:	213a3c04 	addi	r4,r4,-5904
    8d94:	003fbd06 	br	8c8c <_fpadd_parts+0xd8>

00008d98 <__subsf3>:
    8d98:	deffef04 	addi	sp,sp,-68
    8d9c:	dcc00f15 	stw	r19,60(sp)
    8da0:	dcc00204 	addi	r19,sp,8
    8da4:	dc400e15 	stw	r17,56(sp)
    8da8:	d9000015 	stw	r4,0(sp)
    8dac:	d9400115 	stw	r5,4(sp)
    8db0:	d809883a 	mov	r4,sp
    8db4:	980b883a 	mov	r5,r19
    8db8:	dc400604 	addi	r17,sp,24
    8dbc:	dfc01015 	stw	ra,64(sp)
    8dc0:	000a96c0 	call	a96c <__unpack_f>
    8dc4:	d9000104 	addi	r4,sp,4
    8dc8:	880b883a 	mov	r5,r17
    8dcc:	000a96c0 	call	a96c <__unpack_f>
    8dd0:	d8800717 	ldw	r2,28(sp)
    8dd4:	9809883a 	mov	r4,r19
    8dd8:	880b883a 	mov	r5,r17
    8ddc:	d9800a04 	addi	r6,sp,40
    8de0:	1080005c 	xori	r2,r2,1
    8de4:	d8800715 	stw	r2,28(sp)
    8de8:	0008bb40 	call	8bb4 <_fpadd_parts>
    8dec:	1009883a 	mov	r4,r2
    8df0:	000a80c0 	call	a80c <__pack_f>
    8df4:	dfc01017 	ldw	ra,64(sp)
    8df8:	dcc00f17 	ldw	r19,60(sp)
    8dfc:	dc400e17 	ldw	r17,56(sp)
    8e00:	dec01104 	addi	sp,sp,68
    8e04:	f800283a 	ret

00008e08 <__addsf3>:
    8e08:	deffef04 	addi	sp,sp,-68
    8e0c:	dcc00f15 	stw	r19,60(sp)
    8e10:	dcc00204 	addi	r19,sp,8
    8e14:	dc400e15 	stw	r17,56(sp)
    8e18:	d9000015 	stw	r4,0(sp)
    8e1c:	d9400115 	stw	r5,4(sp)
    8e20:	d809883a 	mov	r4,sp
    8e24:	980b883a 	mov	r5,r19
    8e28:	dc400604 	addi	r17,sp,24
    8e2c:	dfc01015 	stw	ra,64(sp)
    8e30:	000a96c0 	call	a96c <__unpack_f>
    8e34:	d9000104 	addi	r4,sp,4
    8e38:	880b883a 	mov	r5,r17
    8e3c:	000a96c0 	call	a96c <__unpack_f>
    8e40:	d9800a04 	addi	r6,sp,40
    8e44:	9809883a 	mov	r4,r19
    8e48:	880b883a 	mov	r5,r17
    8e4c:	0008bb40 	call	8bb4 <_fpadd_parts>
    8e50:	1009883a 	mov	r4,r2
    8e54:	000a80c0 	call	a80c <__pack_f>
    8e58:	dfc01017 	ldw	ra,64(sp)
    8e5c:	dcc00f17 	ldw	r19,60(sp)
    8e60:	dc400e17 	ldw	r17,56(sp)
    8e64:	dec01104 	addi	sp,sp,68
    8e68:	f800283a 	ret

00008e6c <__mulsf3>:
    8e6c:	deffef04 	addi	sp,sp,-68
    8e70:	dc400f15 	stw	r17,60(sp)
    8e74:	dc400204 	addi	r17,sp,8
    8e78:	dc000e15 	stw	r16,56(sp)
    8e7c:	d9000015 	stw	r4,0(sp)
    8e80:	d9400115 	stw	r5,4(sp)
    8e84:	d809883a 	mov	r4,sp
    8e88:	880b883a 	mov	r5,r17
    8e8c:	dc000604 	addi	r16,sp,24
    8e90:	dfc01015 	stw	ra,64(sp)
    8e94:	000a96c0 	call	a96c <__unpack_f>
    8e98:	d9000104 	addi	r4,sp,4
    8e9c:	800b883a 	mov	r5,r16
    8ea0:	000a96c0 	call	a96c <__unpack_f>
    8ea4:	d9000217 	ldw	r4,8(sp)
    8ea8:	00800044 	movi	r2,1
    8eac:	01400104 	movi	r5,4
    8eb0:	1100142e 	bgeu	r2,r4,8f04 <__mulsf3+0x98>
    8eb4:	d8c00617 	ldw	r3,24(sp)
    8eb8:	10c0052e 	bgeu	r2,r3,8ed0 <__mulsf3+0x64>
    8ebc:	21400f26 	beq	r4,r5,8efc <__mulsf3+0x90>
    8ec0:	19405d26 	beq	r3,r5,9038 <__mulsf3+0x1cc>
    8ec4:	00800084 	movi	r2,2
    8ec8:	20800e26 	beq	r4,r2,8f04 <__mulsf3+0x98>
    8ecc:	1880181e 	bne	r3,r2,8f30 <__mulsf3+0xc4>
    8ed0:	d8c00717 	ldw	r3,28(sp)
    8ed4:	d8800317 	ldw	r2,12(sp)
    8ed8:	8009883a 	mov	r4,r16
    8edc:	10c4c03a 	cmpne	r2,r2,r3
    8ee0:	d8800715 	stw	r2,28(sp)
    8ee4:	000a80c0 	call	a80c <__pack_f>
    8ee8:	dfc01017 	ldw	ra,64(sp)
    8eec:	dc400f17 	ldw	r17,60(sp)
    8ef0:	dc000e17 	ldw	r16,56(sp)
    8ef4:	dec01104 	addi	sp,sp,68
    8ef8:	f800283a 	ret
    8efc:	00800084 	movi	r2,2
    8f00:	18804f26 	beq	r3,r2,9040 <__mulsf3+0x1d4>
    8f04:	d8800317 	ldw	r2,12(sp)
    8f08:	d8c00717 	ldw	r3,28(sp)
    8f0c:	8809883a 	mov	r4,r17
    8f10:	10c4c03a 	cmpne	r2,r2,r3
    8f14:	d8800315 	stw	r2,12(sp)
    8f18:	000a80c0 	call	a80c <__pack_f>
    8f1c:	dfc01017 	ldw	ra,64(sp)
    8f20:	dc400f17 	ldw	r17,60(sp)
    8f24:	dc000e17 	ldw	r16,56(sp)
    8f28:	dec01104 	addi	sp,sp,68
    8f2c:	f800283a 	ret
    8f30:	d8800517 	ldw	r2,20(sp)
    8f34:	da000917 	ldw	r8,36(sp)
    8f38:	0013883a 	mov	r9,zero
    8f3c:	0007883a 	mov	r3,zero
    8f40:	480f883a 	mov	r7,r9
    8f44:	180b883a 	mov	r5,r3
    8f48:	400d883a 	mov	r6,r8
    8f4c:	1009883a 	mov	r4,r2
    8f50:	00079b40 	call	79b4 <__muldi3>
    8f54:	da800417 	ldw	r10,16(sp)
    8f58:	d9800817 	ldw	r6,32(sp)
    8f5c:	da400317 	ldw	r9,12(sp)
    8f60:	52800084 	addi	r10,r10,2
    8f64:	3295883a 	add	r10,r6,r10
    8f68:	d9800717 	ldw	r6,28(sp)
    8f6c:	180b883a 	mov	r5,r3
    8f70:	180f883a 	mov	r7,r3
    8f74:	4992c03a 	cmpne	r9,r9,r6
    8f78:	da400b15 	stw	r9,44(sp)
    8f7c:	1007883a 	mov	r3,r2
    8f80:	da800c15 	stw	r10,48(sp)
    8f84:	2800070e 	bge	r5,zero,8fa4 <__mulsf3+0x138>
    8f88:	2880004c 	andi	r2,r5,1
    8f8c:	1005003a 	cmpeq	r2,r2,zero
    8f90:	500d883a 	mov	r6,r10
    8f94:	10001e26 	beq	r2,zero,9010 <__mulsf3+0x1a4>
    8f98:	380ed07a 	srli	r7,r7,1
    8f9c:	31800044 	addi	r6,r6,1
    8fa0:	d9800c15 	stw	r6,48(sp)
    8fa4:	01100034 	movhi	r4,16384
    8fa8:	213fffc4 	addi	r4,r4,-1
    8fac:	21c00b36 	bltu	r4,r7,8fdc <__mulsf3+0x170>
    8fb0:	d8800c17 	ldw	r2,48(sp)
    8fb4:	00000206 	br	8fc0 <__mulsf3+0x154>
    8fb8:	18c7883a 	add	r3,r3,r3
    8fbc:	21c00636 	bltu	r4,r7,8fd8 <__mulsf3+0x16c>
    8fc0:	10bfffc4 	addi	r2,r2,-1
    8fc4:	39cf883a 	add	r7,r7,r7
    8fc8:	183ffb0e 	bge	r3,zero,8fb8 <__mulsf3+0x14c>
    8fcc:	39c00054 	ori	r7,r7,1
    8fd0:	18c7883a 	add	r3,r3,r3
    8fd4:	21fffa2e 	bgeu	r4,r7,8fc0 <__mulsf3+0x154>
    8fd8:	d8800c15 	stw	r2,48(sp)
    8fdc:	39001fcc 	andi	r4,r7,127
    8fe0:	00801004 	movi	r2,64
    8fe4:	20800d26 	beq	r4,r2,901c <__mulsf3+0x1b0>
    8fe8:	008000c4 	movi	r2,3
    8fec:	d9000a04 	addi	r4,sp,40
    8ff0:	d9c00d15 	stw	r7,52(sp)
    8ff4:	d8800a15 	stw	r2,40(sp)
    8ff8:	000a80c0 	call	a80c <__pack_f>
    8ffc:	dfc01017 	ldw	ra,64(sp)
    9000:	dc400f17 	ldw	r17,60(sp)
    9004:	dc000e17 	ldw	r16,56(sp)
    9008:	dec01104 	addi	sp,sp,68
    900c:	f800283a 	ret
    9010:	1804d07a 	srli	r2,r3,1
    9014:	10e00034 	orhi	r3,r2,32768
    9018:	003fdf06 	br	8f98 <__mulsf3+0x12c>
    901c:	3880200c 	andi	r2,r7,128
    9020:	103ff11e 	bne	r2,zero,8fe8 <__mulsf3+0x17c>
    9024:	183ff026 	beq	r3,zero,8fe8 <__mulsf3+0x17c>
    9028:	3907883a 	add	r3,r7,r4
    902c:	00bfe004 	movi	r2,-128
    9030:	188e703a 	and	r7,r3,r2
    9034:	003fec06 	br	8fe8 <__mulsf3+0x17c>
    9038:	00800084 	movi	r2,2
    903c:	20bfa41e 	bne	r4,r2,8ed0 <__mulsf3+0x64>
    9040:	01000074 	movhi	r4,1
    9044:	213a3c04 	addi	r4,r4,-5904
    9048:	003fb306 	br	8f18 <__mulsf3+0xac>

0000904c <__divsf3>:
    904c:	defff304 	addi	sp,sp,-52
    9050:	dc400b15 	stw	r17,44(sp)
    9054:	dc400204 	addi	r17,sp,8
    9058:	dc000a15 	stw	r16,40(sp)
    905c:	d9000015 	stw	r4,0(sp)
    9060:	d9400115 	stw	r5,4(sp)
    9064:	d809883a 	mov	r4,sp
    9068:	880b883a 	mov	r5,r17
    906c:	dc000604 	addi	r16,sp,24
    9070:	dfc00c15 	stw	ra,48(sp)
    9074:	000a96c0 	call	a96c <__unpack_f>
    9078:	d9000104 	addi	r4,sp,4
    907c:	800b883a 	mov	r5,r16
    9080:	000a96c0 	call	a96c <__unpack_f>
    9084:	d9000217 	ldw	r4,8(sp)
    9088:	00800044 	movi	r2,1
    908c:	01800104 	movi	r6,4
    9090:	11000a2e 	bgeu	r2,r4,90bc <__divsf3+0x70>
    9094:	d9400617 	ldw	r5,24(sp)
    9098:	1140432e 	bgeu	r2,r5,91a8 <__divsf3+0x15c>
    909c:	d8800317 	ldw	r2,12(sp)
    90a0:	d8c00717 	ldw	r3,28(sp)
    90a4:	10c4f03a 	xor	r2,r2,r3
    90a8:	d8800315 	stw	r2,12(sp)
    90ac:	21800226 	beq	r4,r6,90b8 <__divsf3+0x6c>
    90b0:	00800084 	movi	r2,2
    90b4:	2080101e 	bne	r4,r2,90f8 <__divsf3+0xac>
    90b8:	29000726 	beq	r5,r4,90d8 <__divsf3+0x8c>
    90bc:	8809883a 	mov	r4,r17
    90c0:	000a80c0 	call	a80c <__pack_f>
    90c4:	dfc00c17 	ldw	ra,48(sp)
    90c8:	dc400b17 	ldw	r17,44(sp)
    90cc:	dc000a17 	ldw	r16,40(sp)
    90d0:	dec00d04 	addi	sp,sp,52
    90d4:	f800283a 	ret
    90d8:	01000074 	movhi	r4,1
    90dc:	213a3c04 	addi	r4,r4,-5904
    90e0:	000a80c0 	call	a80c <__pack_f>
    90e4:	dfc00c17 	ldw	ra,48(sp)
    90e8:	dc400b17 	ldw	r17,44(sp)
    90ec:	dc000a17 	ldw	r16,40(sp)
    90f0:	dec00d04 	addi	sp,sp,52
    90f4:	f800283a 	ret
    90f8:	29802d26 	beq	r5,r6,91b0 <__divsf3+0x164>
    90fc:	28801a26 	beq	r5,r2,9168 <__divsf3+0x11c>
    9100:	d8c00417 	ldw	r3,16(sp)
    9104:	d8800817 	ldw	r2,32(sp)
    9108:	d9000517 	ldw	r4,20(sp)
    910c:	d9800917 	ldw	r6,36(sp)
    9110:	1885c83a 	sub	r2,r3,r2
    9114:	d8800415 	stw	r2,16(sp)
    9118:	2180032e 	bgeu	r4,r6,9128 <__divsf3+0xdc>
    911c:	10bfffc4 	addi	r2,r2,-1
    9120:	d8800415 	stw	r2,16(sp)
    9124:	2109883a 	add	r4,r4,r4
    9128:	01500034 	movhi	r5,16384
    912c:	0007883a 	mov	r3,zero
    9130:	0005883a 	mov	r2,zero
    9134:	01c007c4 	movi	r7,31
    9138:	10800044 	addi	r2,r2,1
    913c:	21800236 	bltu	r4,r6,9148 <__divsf3+0xfc>
    9140:	1946b03a 	or	r3,r3,r5
    9144:	2189c83a 	sub	r4,r4,r6
    9148:	280ad07a 	srli	r5,r5,1
    914c:	2109883a 	add	r4,r4,r4
    9150:	11fff91e 	bne	r2,r7,9138 <__divsf3+0xec>
    9154:	19401fcc 	andi	r5,r3,127
    9158:	00801004 	movi	r2,64
    915c:	28800a26 	beq	r5,r2,9188 <__divsf3+0x13c>
    9160:	d8c00515 	stw	r3,20(sp)
    9164:	003fd506 	br	90bc <__divsf3+0x70>
    9168:	8809883a 	mov	r4,r17
    916c:	d9800215 	stw	r6,8(sp)
    9170:	000a80c0 	call	a80c <__pack_f>
    9174:	dfc00c17 	ldw	ra,48(sp)
    9178:	dc400b17 	ldw	r17,44(sp)
    917c:	dc000a17 	ldw	r16,40(sp)
    9180:	dec00d04 	addi	sp,sp,52
    9184:	f800283a 	ret
    9188:	1880200c 	andi	r2,r3,128
    918c:	103ff41e 	bne	r2,zero,9160 <__divsf3+0x114>
    9190:	203ff326 	beq	r4,zero,9160 <__divsf3+0x114>
    9194:	1947883a 	add	r3,r3,r5
    9198:	00bfe004 	movi	r2,-128
    919c:	1886703a 	and	r3,r3,r2
    91a0:	d8c00515 	stw	r3,20(sp)
    91a4:	003fc506 	br	90bc <__divsf3+0x70>
    91a8:	8009883a 	mov	r4,r16
    91ac:	003fc406 	br	90c0 <__divsf3+0x74>
    91b0:	8809883a 	mov	r4,r17
    91b4:	d8000515 	stw	zero,20(sp)
    91b8:	d8000415 	stw	zero,16(sp)
    91bc:	003fc006 	br	90c0 <__divsf3+0x74>

000091c0 <__eqsf2>:
    91c0:	defff304 	addi	sp,sp,-52
    91c4:	dc400b15 	stw	r17,44(sp)
    91c8:	dc400204 	addi	r17,sp,8
    91cc:	dc000a15 	stw	r16,40(sp)
    91d0:	d9000015 	stw	r4,0(sp)
    91d4:	d9400115 	stw	r5,4(sp)
    91d8:	d809883a 	mov	r4,sp
    91dc:	880b883a 	mov	r5,r17
    91e0:	dc000604 	addi	r16,sp,24
    91e4:	dfc00c15 	stw	ra,48(sp)
    91e8:	000a96c0 	call	a96c <__unpack_f>
    91ec:	d9000104 	addi	r4,sp,4
    91f0:	800b883a 	mov	r5,r16
    91f4:	000a96c0 	call	a96c <__unpack_f>
    91f8:	d8800217 	ldw	r2,8(sp)
    91fc:	00c00044 	movi	r3,1
    9200:	180d883a 	mov	r6,r3
    9204:	1880062e 	bgeu	r3,r2,9220 <__eqsf2+0x60>
    9208:	d8800617 	ldw	r2,24(sp)
    920c:	8809883a 	mov	r4,r17
    9210:	800b883a 	mov	r5,r16
    9214:	1880022e 	bgeu	r3,r2,9220 <__eqsf2+0x60>
    9218:	000aa340 	call	aa34 <__fpcmp_parts_f>
    921c:	100d883a 	mov	r6,r2
    9220:	3005883a 	mov	r2,r6
    9224:	dfc00c17 	ldw	ra,48(sp)
    9228:	dc400b17 	ldw	r17,44(sp)
    922c:	dc000a17 	ldw	r16,40(sp)
    9230:	dec00d04 	addi	sp,sp,52
    9234:	f800283a 	ret

00009238 <__gtsf2>:
    9238:	defff304 	addi	sp,sp,-52
    923c:	dc400b15 	stw	r17,44(sp)
    9240:	dc400204 	addi	r17,sp,8
    9244:	dc000a15 	stw	r16,40(sp)
    9248:	d9000015 	stw	r4,0(sp)
    924c:	d9400115 	stw	r5,4(sp)
    9250:	d809883a 	mov	r4,sp
    9254:	880b883a 	mov	r5,r17
    9258:	dc000604 	addi	r16,sp,24
    925c:	dfc00c15 	stw	ra,48(sp)
    9260:	000a96c0 	call	a96c <__unpack_f>
    9264:	d9000104 	addi	r4,sp,4
    9268:	800b883a 	mov	r5,r16
    926c:	000a96c0 	call	a96c <__unpack_f>
    9270:	d8800217 	ldw	r2,8(sp)
    9274:	00c00044 	movi	r3,1
    9278:	01bfffc4 	movi	r6,-1
    927c:	1880062e 	bgeu	r3,r2,9298 <__gtsf2+0x60>
    9280:	d8800617 	ldw	r2,24(sp)
    9284:	8809883a 	mov	r4,r17
    9288:	800b883a 	mov	r5,r16
    928c:	1880022e 	bgeu	r3,r2,9298 <__gtsf2+0x60>
    9290:	000aa340 	call	aa34 <__fpcmp_parts_f>
    9294:	100d883a 	mov	r6,r2
    9298:	3005883a 	mov	r2,r6
    929c:	dfc00c17 	ldw	ra,48(sp)
    92a0:	dc400b17 	ldw	r17,44(sp)
    92a4:	dc000a17 	ldw	r16,40(sp)
    92a8:	dec00d04 	addi	sp,sp,52
    92ac:	f800283a 	ret

000092b0 <__ltsf2>:
    92b0:	defff304 	addi	sp,sp,-52
    92b4:	dc400b15 	stw	r17,44(sp)
    92b8:	dc400204 	addi	r17,sp,8
    92bc:	dc000a15 	stw	r16,40(sp)
    92c0:	d9000015 	stw	r4,0(sp)
    92c4:	d9400115 	stw	r5,4(sp)
    92c8:	d809883a 	mov	r4,sp
    92cc:	880b883a 	mov	r5,r17
    92d0:	dc000604 	addi	r16,sp,24
    92d4:	dfc00c15 	stw	ra,48(sp)
    92d8:	000a96c0 	call	a96c <__unpack_f>
    92dc:	d9000104 	addi	r4,sp,4
    92e0:	800b883a 	mov	r5,r16
    92e4:	000a96c0 	call	a96c <__unpack_f>
    92e8:	d8800217 	ldw	r2,8(sp)
    92ec:	00c00044 	movi	r3,1
    92f0:	180d883a 	mov	r6,r3
    92f4:	1880062e 	bgeu	r3,r2,9310 <__ltsf2+0x60>
    92f8:	d8800617 	ldw	r2,24(sp)
    92fc:	8809883a 	mov	r4,r17
    9300:	800b883a 	mov	r5,r16
    9304:	1880022e 	bgeu	r3,r2,9310 <__ltsf2+0x60>
    9308:	000aa340 	call	aa34 <__fpcmp_parts_f>
    930c:	100d883a 	mov	r6,r2
    9310:	3005883a 	mov	r2,r6
    9314:	dfc00c17 	ldw	ra,48(sp)
    9318:	dc400b17 	ldw	r17,44(sp)
    931c:	dc000a17 	ldw	r16,40(sp)
    9320:	dec00d04 	addi	sp,sp,52
    9324:	f800283a 	ret

00009328 <__floatsisf>:
    9328:	2006d7fa 	srli	r3,r4,31
    932c:	defffa04 	addi	sp,sp,-24
    9330:	008000c4 	movi	r2,3
    9334:	dfc00515 	stw	ra,20(sp)
    9338:	dc000415 	stw	r16,16(sp)
    933c:	d8800015 	stw	r2,0(sp)
    9340:	d8c00115 	stw	r3,4(sp)
    9344:	2000081e 	bne	r4,zero,9368 <__floatsisf+0x40>
    9348:	00800084 	movi	r2,2
    934c:	d8800015 	stw	r2,0(sp)
    9350:	d809883a 	mov	r4,sp
    9354:	000a80c0 	call	a80c <__pack_f>
    9358:	dfc00517 	ldw	ra,20(sp)
    935c:	dc000417 	ldw	r16,16(sp)
    9360:	dec00604 	addi	sp,sp,24
    9364:	f800283a 	ret
    9368:	00800784 	movi	r2,30
    936c:	1807003a 	cmpeq	r3,r3,zero
    9370:	d8800215 	stw	r2,8(sp)
    9374:	18000e1e 	bne	r3,zero,93b0 <__floatsisf+0x88>
    9378:	00a00034 	movhi	r2,32768
    937c:	20800e26 	beq	r4,r2,93b8 <__floatsisf+0x90>
    9380:	0121c83a 	sub	r16,zero,r4
    9384:	8009883a 	mov	r4,r16
    9388:	dc000315 	stw	r16,12(sp)
    938c:	000a6e80 	call	a6e8 <__clzsi2>
    9390:	117fffc4 	addi	r5,r2,-1
    9394:	017fee0e 	bge	zero,r5,9350 <__floatsisf+0x28>
    9398:	d8800217 	ldw	r2,8(sp)
    939c:	8146983a 	sll	r3,r16,r5
    93a0:	1145c83a 	sub	r2,r2,r5
    93a4:	d8c00315 	stw	r3,12(sp)
    93a8:	d8800215 	stw	r2,8(sp)
    93ac:	003fe806 	br	9350 <__floatsisf+0x28>
    93b0:	2021883a 	mov	r16,r4
    93b4:	003ff306 	br	9384 <__floatsisf+0x5c>
    93b8:	00b3c034 	movhi	r2,52992
    93bc:	003fe606 	br	9358 <__floatsisf+0x30>

000093c0 <__extendsfdf2>:
    93c0:	defff904 	addi	sp,sp,-28
    93c4:	d9000115 	stw	r4,4(sp)
    93c8:	d9400204 	addi	r5,sp,8
    93cc:	d9000104 	addi	r4,sp,4
    93d0:	dfc00615 	stw	ra,24(sp)
    93d4:	000a96c0 	call	a96c <__unpack_f>
    93d8:	d9c00517 	ldw	r7,20(sp)
    93dc:	0011883a 	mov	r8,zero
    93e0:	400697ba 	slli	r3,r8,30
    93e4:	3812d0ba 	srli	r9,r7,2
    93e8:	380497ba 	slli	r2,r7,30
    93ec:	d9000217 	ldw	r4,8(sp)
    93f0:	d9400317 	ldw	r5,12(sp)
    93f4:	d9800417 	ldw	r6,16(sp)
    93f8:	48c6b03a 	or	r3,r9,r3
    93fc:	100f883a 	mov	r7,r2
    9400:	d8c00015 	stw	r3,0(sp)
    9404:	000a3240 	call	a324 <__make_dp>
    9408:	dfc00617 	ldw	ra,24(sp)
    940c:	dec00704 	addi	sp,sp,28
    9410:	f800283a 	ret

00009414 <_fpadd_parts>:
    9414:	defff804 	addi	sp,sp,-32
    9418:	dcc00315 	stw	r19,12(sp)
    941c:	2027883a 	mov	r19,r4
    9420:	21000017 	ldw	r4,0(r4)
    9424:	00c00044 	movi	r3,1
    9428:	dd400515 	stw	r21,20(sp)
    942c:	dd000415 	stw	r20,16(sp)
    9430:	ddc00715 	stw	r23,28(sp)
    9434:	dd800615 	stw	r22,24(sp)
    9438:	dc800215 	stw	r18,8(sp)
    943c:	dc400115 	stw	r17,4(sp)
    9440:	dc000015 	stw	r16,0(sp)
    9444:	282b883a 	mov	r21,r5
    9448:	3029883a 	mov	r20,r6
    944c:	1900632e 	bgeu	r3,r4,95dc <_fpadd_parts+0x1c8>
    9450:	28800017 	ldw	r2,0(r5)
    9454:	1880812e 	bgeu	r3,r2,965c <_fpadd_parts+0x248>
    9458:	00c00104 	movi	r3,4
    945c:	20c0dc26 	beq	r4,r3,97d0 <_fpadd_parts+0x3bc>
    9460:	10c07e26 	beq	r2,r3,965c <_fpadd_parts+0x248>
    9464:	00c00084 	movi	r3,2
    9468:	10c06726 	beq	r2,r3,9608 <_fpadd_parts+0x1f4>
    946c:	20c07b26 	beq	r4,r3,965c <_fpadd_parts+0x248>
    9470:	9dc00217 	ldw	r23,8(r19)
    9474:	28c00217 	ldw	r3,8(r5)
    9478:	9c400317 	ldw	r17,12(r19)
    947c:	2bc00317 	ldw	r15,12(r5)
    9480:	b8cdc83a 	sub	r6,r23,r3
    9484:	9c800417 	ldw	r18,16(r19)
    9488:	2c000417 	ldw	r16,16(r5)
    948c:	3009883a 	mov	r4,r6
    9490:	30009716 	blt	r6,zero,96f0 <_fpadd_parts+0x2dc>
    9494:	00800fc4 	movi	r2,63
    9498:	11806b16 	blt	r2,r6,9648 <_fpadd_parts+0x234>
    949c:	0100a40e 	bge	zero,r4,9730 <_fpadd_parts+0x31c>
    94a0:	35bff804 	addi	r22,r6,-32
    94a4:	b000bc16 	blt	r22,zero,9798 <_fpadd_parts+0x384>
    94a8:	8596d83a 	srl	r11,r16,r22
    94ac:	0019883a 	mov	r12,zero
    94b0:	0013883a 	mov	r9,zero
    94b4:	01000044 	movi	r4,1
    94b8:	0015883a 	mov	r10,zero
    94bc:	b000be16 	blt	r22,zero,97b8 <_fpadd_parts+0x3a4>
    94c0:	2590983a 	sll	r8,r4,r22
    94c4:	000f883a 	mov	r7,zero
    94c8:	00bfffc4 	movi	r2,-1
    94cc:	3889883a 	add	r4,r7,r2
    94d0:	408b883a 	add	r5,r8,r2
    94d4:	21cd803a 	cmpltu	r6,r4,r7
    94d8:	314b883a 	add	r5,r6,r5
    94dc:	7904703a 	and	r2,r15,r4
    94e0:	8146703a 	and	r3,r16,r5
    94e4:	10c4b03a 	or	r2,r2,r3
    94e8:	10000226 	beq	r2,zero,94f4 <_fpadd_parts+0xe0>
    94ec:	02400044 	movi	r9,1
    94f0:	0015883a 	mov	r10,zero
    94f4:	5a5eb03a 	or	r15,r11,r9
    94f8:	62a0b03a 	or	r16,r12,r10
    94fc:	99400117 	ldw	r5,4(r19)
    9500:	a8800117 	ldw	r2,4(r21)
    9504:	28806e26 	beq	r5,r2,96c0 <_fpadd_parts+0x2ac>
    9508:	28006626 	beq	r5,zero,96a4 <_fpadd_parts+0x290>
    950c:	7c45c83a 	sub	r2,r15,r17
    9510:	7889803a 	cmpltu	r4,r15,r2
    9514:	8487c83a 	sub	r3,r16,r18
    9518:	1909c83a 	sub	r4,r3,r4
    951c:	100d883a 	mov	r6,r2
    9520:	200f883a 	mov	r7,r4
    9524:	38007716 	blt	r7,zero,9704 <_fpadd_parts+0x2f0>
    9528:	a5c00215 	stw	r23,8(r20)
    952c:	a1c00415 	stw	r7,16(r20)
    9530:	a0000115 	stw	zero,4(r20)
    9534:	a1800315 	stw	r6,12(r20)
    9538:	a2000317 	ldw	r8,12(r20)
    953c:	a2400417 	ldw	r9,16(r20)
    9540:	00bfffc4 	movi	r2,-1
    9544:	408b883a 	add	r5,r8,r2
    9548:	2a09803a 	cmpltu	r4,r5,r8
    954c:	488d883a 	add	r6,r9,r2
    9550:	01c40034 	movhi	r7,4096
    9554:	39ffffc4 	addi	r7,r7,-1
    9558:	218d883a 	add	r6,r4,r6
    955c:	39801736 	bltu	r7,r6,95bc <_fpadd_parts+0x1a8>
    9560:	31c06526 	beq	r6,r7,96f8 <_fpadd_parts+0x2e4>
    9564:	a3000217 	ldw	r12,8(r20)
    9568:	4209883a 	add	r4,r8,r8
    956c:	00bfffc4 	movi	r2,-1
    9570:	220f803a 	cmpltu	r7,r4,r8
    9574:	4a4b883a 	add	r5,r9,r9
    9578:	394f883a 	add	r7,r7,r5
    957c:	2095883a 	add	r10,r4,r2
    9580:	3897883a 	add	r11,r7,r2
    9584:	510d803a 	cmpltu	r6,r10,r4
    9588:	6099883a 	add	r12,r12,r2
    958c:	32d7883a 	add	r11,r6,r11
    9590:	00840034 	movhi	r2,4096
    9594:	10bfffc4 	addi	r2,r2,-1
    9598:	2011883a 	mov	r8,r4
    959c:	3813883a 	mov	r9,r7
    95a0:	a1000315 	stw	r4,12(r20)
    95a4:	a1c00415 	stw	r7,16(r20)
    95a8:	a3000215 	stw	r12,8(r20)
    95ac:	12c00336 	bltu	r2,r11,95bc <_fpadd_parts+0x1a8>
    95b0:	58bfed1e 	bne	r11,r2,9568 <_fpadd_parts+0x154>
    95b4:	00bfff84 	movi	r2,-2
    95b8:	12bfeb2e 	bgeu	r2,r10,9568 <_fpadd_parts+0x154>
    95bc:	a2800417 	ldw	r10,16(r20)
    95c0:	008000c4 	movi	r2,3
    95c4:	00c80034 	movhi	r3,8192
    95c8:	18ffffc4 	addi	r3,r3,-1
    95cc:	a2400317 	ldw	r9,12(r20)
    95d0:	a0800015 	stw	r2,0(r20)
    95d4:	1a802336 	bltu	r3,r10,9664 <_fpadd_parts+0x250>
    95d8:	a027883a 	mov	r19,r20
    95dc:	9805883a 	mov	r2,r19
    95e0:	ddc00717 	ldw	r23,28(sp)
    95e4:	dd800617 	ldw	r22,24(sp)
    95e8:	dd400517 	ldw	r21,20(sp)
    95ec:	dd000417 	ldw	r20,16(sp)
    95f0:	dcc00317 	ldw	r19,12(sp)
    95f4:	dc800217 	ldw	r18,8(sp)
    95f8:	dc400117 	ldw	r17,4(sp)
    95fc:	dc000017 	ldw	r16,0(sp)
    9600:	dec00804 	addi	sp,sp,32
    9604:	f800283a 	ret
    9608:	20fff41e 	bne	r4,r3,95dc <_fpadd_parts+0x1c8>
    960c:	31000015 	stw	r4,0(r6)
    9610:	98800117 	ldw	r2,4(r19)
    9614:	30800115 	stw	r2,4(r6)
    9618:	98c00217 	ldw	r3,8(r19)
    961c:	30c00215 	stw	r3,8(r6)
    9620:	98800317 	ldw	r2,12(r19)
    9624:	30800315 	stw	r2,12(r6)
    9628:	98c00417 	ldw	r3,16(r19)
    962c:	30c00415 	stw	r3,16(r6)
    9630:	98800117 	ldw	r2,4(r19)
    9634:	28c00117 	ldw	r3,4(r5)
    9638:	3027883a 	mov	r19,r6
    963c:	10c4703a 	and	r2,r2,r3
    9640:	30800115 	stw	r2,4(r6)
    9644:	003fe506 	br	95dc <_fpadd_parts+0x1c8>
    9648:	1dc02616 	blt	r3,r23,96e4 <_fpadd_parts+0x2d0>
    964c:	0023883a 	mov	r17,zero
    9650:	182f883a 	mov	r23,r3
    9654:	0025883a 	mov	r18,zero
    9658:	003fa806 	br	94fc <_fpadd_parts+0xe8>
    965c:	a827883a 	mov	r19,r21
    9660:	003fde06 	br	95dc <_fpadd_parts+0x1c8>
    9664:	01800044 	movi	r6,1
    9668:	500497fa 	slli	r2,r10,31
    966c:	4808d07a 	srli	r4,r9,1
    9670:	518ad83a 	srl	r5,r10,r6
    9674:	a2000217 	ldw	r8,8(r20)
    9678:	1108b03a 	or	r4,r2,r4
    967c:	0007883a 	mov	r3,zero
    9680:	4984703a 	and	r2,r9,r6
    9684:	208cb03a 	or	r6,r4,r2
    9688:	28ceb03a 	or	r7,r5,r3
    968c:	42000044 	addi	r8,r8,1
    9690:	a027883a 	mov	r19,r20
    9694:	a1c00415 	stw	r7,16(r20)
    9698:	a2000215 	stw	r8,8(r20)
    969c:	a1800315 	stw	r6,12(r20)
    96a0:	003fce06 	br	95dc <_fpadd_parts+0x1c8>
    96a4:	8bc5c83a 	sub	r2,r17,r15
    96a8:	8889803a 	cmpltu	r4,r17,r2
    96ac:	9407c83a 	sub	r3,r18,r16
    96b0:	1909c83a 	sub	r4,r3,r4
    96b4:	100d883a 	mov	r6,r2
    96b8:	200f883a 	mov	r7,r4
    96bc:	003f9906 	br	9524 <_fpadd_parts+0x110>
    96c0:	7c45883a 	add	r2,r15,r17
    96c4:	13c9803a 	cmpltu	r4,r2,r15
    96c8:	8487883a 	add	r3,r16,r18
    96cc:	20c9883a 	add	r4,r4,r3
    96d0:	a1400115 	stw	r5,4(r20)
    96d4:	a5c00215 	stw	r23,8(r20)
    96d8:	a0800315 	stw	r2,12(r20)
    96dc:	a1000415 	stw	r4,16(r20)
    96e0:	003fb606 	br	95bc <_fpadd_parts+0x1a8>
    96e4:	001f883a 	mov	r15,zero
    96e8:	0021883a 	mov	r16,zero
    96ec:	003f8306 	br	94fc <_fpadd_parts+0xe8>
    96f0:	018dc83a 	sub	r6,zero,r6
    96f4:	003f6706 	br	9494 <_fpadd_parts+0x80>
    96f8:	00bfff84 	movi	r2,-2
    96fc:	117faf36 	bltu	r2,r5,95bc <_fpadd_parts+0x1a8>
    9700:	003f9806 	br	9564 <_fpadd_parts+0x150>
    9704:	0005883a 	mov	r2,zero
    9708:	1189c83a 	sub	r4,r2,r6
    970c:	1105803a 	cmpltu	r2,r2,r4
    9710:	01cbc83a 	sub	r5,zero,r7
    9714:	2885c83a 	sub	r2,r5,r2
    9718:	01800044 	movi	r6,1
    971c:	a1800115 	stw	r6,4(r20)
    9720:	a5c00215 	stw	r23,8(r20)
    9724:	a1000315 	stw	r4,12(r20)
    9728:	a0800415 	stw	r2,16(r20)
    972c:	003f8206 	br	9538 <_fpadd_parts+0x124>
    9730:	203f7226 	beq	r4,zero,94fc <_fpadd_parts+0xe8>
    9734:	35bff804 	addi	r22,r6,-32
    9738:	b9af883a 	add	r23,r23,r6
    973c:	b0003116 	blt	r22,zero,9804 <_fpadd_parts+0x3f0>
    9740:	959ad83a 	srl	r13,r18,r22
    9744:	001d883a 	mov	r14,zero
    9748:	000f883a 	mov	r7,zero
    974c:	01000044 	movi	r4,1
    9750:	0011883a 	mov	r8,zero
    9754:	b0002516 	blt	r22,zero,97ec <_fpadd_parts+0x3d8>
    9758:	2594983a 	sll	r10,r4,r22
    975c:	0013883a 	mov	r9,zero
    9760:	00bfffc4 	movi	r2,-1
    9764:	4889883a 	add	r4,r9,r2
    9768:	508b883a 	add	r5,r10,r2
    976c:	224d803a 	cmpltu	r6,r4,r9
    9770:	314b883a 	add	r5,r6,r5
    9774:	8904703a 	and	r2,r17,r4
    9778:	9146703a 	and	r3,r18,r5
    977c:	10c4b03a 	or	r2,r2,r3
    9780:	10000226 	beq	r2,zero,978c <_fpadd_parts+0x378>
    9784:	01c00044 	movi	r7,1
    9788:	0011883a 	mov	r8,zero
    978c:	69e2b03a 	or	r17,r13,r7
    9790:	7224b03a 	or	r18,r14,r8
    9794:	003f5906 	br	94fc <_fpadd_parts+0xe8>
    9798:	8407883a 	add	r3,r16,r16
    979c:	008007c4 	movi	r2,31
    97a0:	1185c83a 	sub	r2,r2,r6
    97a4:	1886983a 	sll	r3,r3,r2
    97a8:	7996d83a 	srl	r11,r15,r6
    97ac:	8198d83a 	srl	r12,r16,r6
    97b0:	1ad6b03a 	or	r11,r3,r11
    97b4:	003f3e06 	br	94b0 <_fpadd_parts+0x9c>
    97b8:	2006d07a 	srli	r3,r4,1
    97bc:	008007c4 	movi	r2,31
    97c0:	1185c83a 	sub	r2,r2,r6
    97c4:	1890d83a 	srl	r8,r3,r2
    97c8:	218e983a 	sll	r7,r4,r6
    97cc:	003f3e06 	br	94c8 <_fpadd_parts+0xb4>
    97d0:	113f821e 	bne	r2,r4,95dc <_fpadd_parts+0x1c8>
    97d4:	28c00117 	ldw	r3,4(r5)
    97d8:	98800117 	ldw	r2,4(r19)
    97dc:	10ff7f26 	beq	r2,r3,95dc <_fpadd_parts+0x1c8>
    97e0:	04c00074 	movhi	r19,1
    97e4:	9cfa4004 	addi	r19,r19,-5888
    97e8:	003f7c06 	br	95dc <_fpadd_parts+0x1c8>
    97ec:	2006d07a 	srli	r3,r4,1
    97f0:	008007c4 	movi	r2,31
    97f4:	1185c83a 	sub	r2,r2,r6
    97f8:	1894d83a 	srl	r10,r3,r2
    97fc:	2192983a 	sll	r9,r4,r6
    9800:	003fd706 	br	9760 <_fpadd_parts+0x34c>
    9804:	9487883a 	add	r3,r18,r18
    9808:	008007c4 	movi	r2,31
    980c:	1185c83a 	sub	r2,r2,r6
    9810:	1886983a 	sll	r3,r3,r2
    9814:	899ad83a 	srl	r13,r17,r6
    9818:	919cd83a 	srl	r14,r18,r6
    981c:	1b5ab03a 	or	r13,r3,r13
    9820:	003fc906 	br	9748 <_fpadd_parts+0x334>

00009824 <__subdf3>:
    9824:	deffea04 	addi	sp,sp,-88
    9828:	dcc01415 	stw	r19,80(sp)
    982c:	dcc00404 	addi	r19,sp,16
    9830:	2011883a 	mov	r8,r4
    9834:	2813883a 	mov	r9,r5
    9838:	dc401315 	stw	r17,76(sp)
    983c:	d809883a 	mov	r4,sp
    9840:	980b883a 	mov	r5,r19
    9844:	dc400904 	addi	r17,sp,36
    9848:	dfc01515 	stw	ra,84(sp)
    984c:	da400115 	stw	r9,4(sp)
    9850:	d9c00315 	stw	r7,12(sp)
    9854:	da000015 	stw	r8,0(sp)
    9858:	d9800215 	stw	r6,8(sp)
    985c:	000ae1c0 	call	ae1c <__unpack_d>
    9860:	d9000204 	addi	r4,sp,8
    9864:	880b883a 	mov	r5,r17
    9868:	000ae1c0 	call	ae1c <__unpack_d>
    986c:	d8800a17 	ldw	r2,40(sp)
    9870:	880b883a 	mov	r5,r17
    9874:	9809883a 	mov	r4,r19
    9878:	d9800e04 	addi	r6,sp,56
    987c:	1080005c 	xori	r2,r2,1
    9880:	d8800a15 	stw	r2,40(sp)
    9884:	00094140 	call	9414 <_fpadd_parts>
    9888:	1009883a 	mov	r4,r2
    988c:	000ab080 	call	ab08 <__pack_d>
    9890:	dfc01517 	ldw	ra,84(sp)
    9894:	dcc01417 	ldw	r19,80(sp)
    9898:	dc401317 	ldw	r17,76(sp)
    989c:	dec01604 	addi	sp,sp,88
    98a0:	f800283a 	ret

000098a4 <__adddf3>:
    98a4:	deffea04 	addi	sp,sp,-88
    98a8:	dcc01415 	stw	r19,80(sp)
    98ac:	dcc00404 	addi	r19,sp,16
    98b0:	2011883a 	mov	r8,r4
    98b4:	2813883a 	mov	r9,r5
    98b8:	dc401315 	stw	r17,76(sp)
    98bc:	d809883a 	mov	r4,sp
    98c0:	980b883a 	mov	r5,r19
    98c4:	dc400904 	addi	r17,sp,36
    98c8:	dfc01515 	stw	ra,84(sp)
    98cc:	da400115 	stw	r9,4(sp)
    98d0:	d9c00315 	stw	r7,12(sp)
    98d4:	da000015 	stw	r8,0(sp)
    98d8:	d9800215 	stw	r6,8(sp)
    98dc:	000ae1c0 	call	ae1c <__unpack_d>
    98e0:	d9000204 	addi	r4,sp,8
    98e4:	880b883a 	mov	r5,r17
    98e8:	000ae1c0 	call	ae1c <__unpack_d>
    98ec:	d9800e04 	addi	r6,sp,56
    98f0:	9809883a 	mov	r4,r19
    98f4:	880b883a 	mov	r5,r17
    98f8:	00094140 	call	9414 <_fpadd_parts>
    98fc:	1009883a 	mov	r4,r2
    9900:	000ab080 	call	ab08 <__pack_d>
    9904:	dfc01517 	ldw	ra,84(sp)
    9908:	dcc01417 	ldw	r19,80(sp)
    990c:	dc401317 	ldw	r17,76(sp)
    9910:	dec01604 	addi	sp,sp,88
    9914:	f800283a 	ret

00009918 <__muldf3>:
    9918:	deffe004 	addi	sp,sp,-128
    991c:	dc401815 	stw	r17,96(sp)
    9920:	dc400404 	addi	r17,sp,16
    9924:	2011883a 	mov	r8,r4
    9928:	2813883a 	mov	r9,r5
    992c:	dc001715 	stw	r16,92(sp)
    9930:	d809883a 	mov	r4,sp
    9934:	880b883a 	mov	r5,r17
    9938:	dc000904 	addi	r16,sp,36
    993c:	dfc01f15 	stw	ra,124(sp)
    9940:	da400115 	stw	r9,4(sp)
    9944:	d9c00315 	stw	r7,12(sp)
    9948:	da000015 	stw	r8,0(sp)
    994c:	d9800215 	stw	r6,8(sp)
    9950:	ddc01e15 	stw	r23,120(sp)
    9954:	dd801d15 	stw	r22,116(sp)
    9958:	dd401c15 	stw	r21,112(sp)
    995c:	dd001b15 	stw	r20,108(sp)
    9960:	dcc01a15 	stw	r19,104(sp)
    9964:	dc801915 	stw	r18,100(sp)
    9968:	000ae1c0 	call	ae1c <__unpack_d>
    996c:	d9000204 	addi	r4,sp,8
    9970:	800b883a 	mov	r5,r16
    9974:	000ae1c0 	call	ae1c <__unpack_d>
    9978:	d9000417 	ldw	r4,16(sp)
    997c:	00800044 	movi	r2,1
    9980:	1100102e 	bgeu	r2,r4,99c4 <__muldf3+0xac>
    9984:	d8c00917 	ldw	r3,36(sp)
    9988:	10c0062e 	bgeu	r2,r3,99a4 <__muldf3+0x8c>
    998c:	00800104 	movi	r2,4
    9990:	20800a26 	beq	r4,r2,99bc <__muldf3+0xa4>
    9994:	1880cc26 	beq	r3,r2,9cc8 <__muldf3+0x3b0>
    9998:	00800084 	movi	r2,2
    999c:	20800926 	beq	r4,r2,99c4 <__muldf3+0xac>
    99a0:	1880191e 	bne	r3,r2,9a08 <__muldf3+0xf0>
    99a4:	d8c00a17 	ldw	r3,40(sp)
    99a8:	d8800517 	ldw	r2,20(sp)
    99ac:	8009883a 	mov	r4,r16
    99b0:	10c4c03a 	cmpne	r2,r2,r3
    99b4:	d8800a15 	stw	r2,40(sp)
    99b8:	00000706 	br	99d8 <__muldf3+0xc0>
    99bc:	00800084 	movi	r2,2
    99c0:	1880c326 	beq	r3,r2,9cd0 <__muldf3+0x3b8>
    99c4:	d8800517 	ldw	r2,20(sp)
    99c8:	d8c00a17 	ldw	r3,40(sp)
    99cc:	8809883a 	mov	r4,r17
    99d0:	10c4c03a 	cmpne	r2,r2,r3
    99d4:	d8800515 	stw	r2,20(sp)
    99d8:	000ab080 	call	ab08 <__pack_d>
    99dc:	dfc01f17 	ldw	ra,124(sp)
    99e0:	ddc01e17 	ldw	r23,120(sp)
    99e4:	dd801d17 	ldw	r22,116(sp)
    99e8:	dd401c17 	ldw	r21,112(sp)
    99ec:	dd001b17 	ldw	r20,108(sp)
    99f0:	dcc01a17 	ldw	r19,104(sp)
    99f4:	dc801917 	ldw	r18,100(sp)
    99f8:	dc401817 	ldw	r17,96(sp)
    99fc:	dc001717 	ldw	r16,92(sp)
    9a00:	dec02004 	addi	sp,sp,128
    9a04:	f800283a 	ret
    9a08:	dd800717 	ldw	r22,28(sp)
    9a0c:	dc800c17 	ldw	r18,48(sp)
    9a10:	002b883a 	mov	r21,zero
    9a14:	0023883a 	mov	r17,zero
    9a18:	a80b883a 	mov	r5,r21
    9a1c:	b00d883a 	mov	r6,r22
    9a20:	880f883a 	mov	r7,r17
    9a24:	ddc00817 	ldw	r23,32(sp)
    9a28:	dcc00d17 	ldw	r19,52(sp)
    9a2c:	9009883a 	mov	r4,r18
    9a30:	00079b40 	call	79b4 <__muldi3>
    9a34:	001b883a 	mov	r13,zero
    9a38:	680f883a 	mov	r7,r13
    9a3c:	b009883a 	mov	r4,r22
    9a40:	000b883a 	mov	r5,zero
    9a44:	980d883a 	mov	r6,r19
    9a48:	b82d883a 	mov	r22,r23
    9a4c:	002f883a 	mov	r23,zero
    9a50:	db401615 	stw	r13,88(sp)
    9a54:	d8801315 	stw	r2,76(sp)
    9a58:	d8c01415 	stw	r3,80(sp)
    9a5c:	dcc01515 	stw	r19,84(sp)
    9a60:	00079b40 	call	79b4 <__muldi3>
    9a64:	b00d883a 	mov	r6,r22
    9a68:	000b883a 	mov	r5,zero
    9a6c:	9009883a 	mov	r4,r18
    9a70:	b80f883a 	mov	r7,r23
    9a74:	1021883a 	mov	r16,r2
    9a78:	1823883a 	mov	r17,r3
    9a7c:	00079b40 	call	79b4 <__muldi3>
    9a80:	8085883a 	add	r2,r16,r2
    9a84:	140d803a 	cmpltu	r6,r2,r16
    9a88:	88c7883a 	add	r3,r17,r3
    9a8c:	30cd883a 	add	r6,r6,r3
    9a90:	1029883a 	mov	r20,r2
    9a94:	302b883a 	mov	r21,r6
    9a98:	da801317 	ldw	r10,76(sp)
    9a9c:	dac01417 	ldw	r11,80(sp)
    9aa0:	db001517 	ldw	r12,84(sp)
    9aa4:	db401617 	ldw	r13,88(sp)
    9aa8:	3440612e 	bgeu	r6,r17,9c30 <__muldf3+0x318>
    9aac:	0009883a 	mov	r4,zero
    9ab0:	5105883a 	add	r2,r10,r4
    9ab4:	128d803a 	cmpltu	r6,r2,r10
    9ab8:	5d07883a 	add	r3,r11,r20
    9abc:	30cd883a 	add	r6,r6,r3
    9ac0:	0021883a 	mov	r16,zero
    9ac4:	04400044 	movi	r17,1
    9ac8:	1025883a 	mov	r18,r2
    9acc:	3027883a 	mov	r19,r6
    9ad0:	32c06236 	bltu	r6,r11,9c5c <__muldf3+0x344>
    9ad4:	59807a26 	beq	r11,r6,9cc0 <__muldf3+0x3a8>
    9ad8:	680b883a 	mov	r5,r13
    9adc:	b80f883a 	mov	r7,r23
    9ae0:	6009883a 	mov	r4,r12
    9ae4:	b00d883a 	mov	r6,r22
    9ae8:	00079b40 	call	79b4 <__muldi3>
    9aec:	1009883a 	mov	r4,r2
    9af0:	000f883a 	mov	r7,zero
    9af4:	1545883a 	add	r2,r2,r21
    9af8:	1111803a 	cmpltu	r8,r2,r4
    9afc:	19c7883a 	add	r3,r3,r7
    9b00:	40c7883a 	add	r3,r8,r3
    9b04:	88cb883a 	add	r5,r17,r3
    9b08:	d8c00617 	ldw	r3,24(sp)
    9b0c:	8089883a 	add	r4,r16,r2
    9b10:	d8800b17 	ldw	r2,44(sp)
    9b14:	18c00104 	addi	r3,r3,4
    9b18:	240d803a 	cmpltu	r6,r4,r16
    9b1c:	10c7883a 	add	r3,r2,r3
    9b20:	2013883a 	mov	r9,r4
    9b24:	d8800a17 	ldw	r2,40(sp)
    9b28:	d9000517 	ldw	r4,20(sp)
    9b2c:	314d883a 	add	r6,r6,r5
    9b30:	3015883a 	mov	r10,r6
    9b34:	2088c03a 	cmpne	r4,r4,r2
    9b38:	00880034 	movhi	r2,8192
    9b3c:	10bfffc4 	addi	r2,r2,-1
    9b40:	d9000f15 	stw	r4,60(sp)
    9b44:	d8c01015 	stw	r3,64(sp)
    9b48:	1180162e 	bgeu	r2,r6,9ba4 <__muldf3+0x28c>
    9b4c:	1811883a 	mov	r8,r3
    9b50:	101f883a 	mov	r15,r2
    9b54:	980497fa 	slli	r2,r19,31
    9b58:	9016d07a 	srli	r11,r18,1
    9b5c:	500697fa 	slli	r3,r10,31
    9b60:	480cd07a 	srli	r6,r9,1
    9b64:	500ed07a 	srli	r7,r10,1
    9b68:	12d6b03a 	or	r11,r2,r11
    9b6c:	00800044 	movi	r2,1
    9b70:	198cb03a 	or	r6,r3,r6
    9b74:	4888703a 	and	r4,r9,r2
    9b78:	9818d07a 	srli	r12,r19,1
    9b7c:	001b883a 	mov	r13,zero
    9b80:	03a00034 	movhi	r14,32768
    9b84:	3013883a 	mov	r9,r6
    9b88:	3815883a 	mov	r10,r7
    9b8c:	4091883a 	add	r8,r8,r2
    9b90:	20000226 	beq	r4,zero,9b9c <__muldf3+0x284>
    9b94:	5b64b03a 	or	r18,r11,r13
    9b98:	63a6b03a 	or	r19,r12,r14
    9b9c:	7abfed36 	bltu	r15,r10,9b54 <__muldf3+0x23c>
    9ba0:	da001015 	stw	r8,64(sp)
    9ba4:	00840034 	movhi	r2,4096
    9ba8:	10bfffc4 	addi	r2,r2,-1
    9bac:	12801436 	bltu	r2,r10,9c00 <__muldf3+0x2e8>
    9bb0:	da001017 	ldw	r8,64(sp)
    9bb4:	101f883a 	mov	r15,r2
    9bb8:	4a45883a 	add	r2,r9,r9
    9bbc:	124d803a 	cmpltu	r6,r2,r9
    9bc0:	5287883a 	add	r3,r10,r10
    9bc4:	9497883a 	add	r11,r18,r18
    9bc8:	5c8f803a 	cmpltu	r7,r11,r18
    9bcc:	9cd9883a 	add	r12,r19,r19
    9bd0:	01000044 	movi	r4,1
    9bd4:	30cd883a 	add	r6,r6,r3
    9bd8:	3b0f883a 	add	r7,r7,r12
    9bdc:	423fffc4 	addi	r8,r8,-1
    9be0:	1013883a 	mov	r9,r2
    9be4:	3015883a 	mov	r10,r6
    9be8:	111ab03a 	or	r13,r2,r4
    9bec:	98003016 	blt	r19,zero,9cb0 <__muldf3+0x398>
    9bf0:	5825883a 	mov	r18,r11
    9bf4:	3827883a 	mov	r19,r7
    9bf8:	7abfef2e 	bgeu	r15,r10,9bb8 <__muldf3+0x2a0>
    9bfc:	da001015 	stw	r8,64(sp)
    9c00:	00803fc4 	movi	r2,255
    9c04:	488e703a 	and	r7,r9,r2
    9c08:	00802004 	movi	r2,128
    9c0c:	0007883a 	mov	r3,zero
    9c10:	0011883a 	mov	r8,zero
    9c14:	38801826 	beq	r7,r2,9c78 <__muldf3+0x360>
    9c18:	008000c4 	movi	r2,3
    9c1c:	d9000e04 	addi	r4,sp,56
    9c20:	da801215 	stw	r10,72(sp)
    9c24:	d8800e15 	stw	r2,56(sp)
    9c28:	da401115 	stw	r9,68(sp)
    9c2c:	003f6a06 	br	99d8 <__muldf3+0xc0>
    9c30:	89802126 	beq	r17,r6,9cb8 <__muldf3+0x3a0>
    9c34:	0009883a 	mov	r4,zero
    9c38:	5105883a 	add	r2,r10,r4
    9c3c:	128d803a 	cmpltu	r6,r2,r10
    9c40:	5d07883a 	add	r3,r11,r20
    9c44:	30cd883a 	add	r6,r6,r3
    9c48:	0021883a 	mov	r16,zero
    9c4c:	0023883a 	mov	r17,zero
    9c50:	1025883a 	mov	r18,r2
    9c54:	3027883a 	mov	r19,r6
    9c58:	32ff9e2e 	bgeu	r6,r11,9ad4 <__muldf3+0x1bc>
    9c5c:	00800044 	movi	r2,1
    9c60:	8089883a 	add	r4,r16,r2
    9c64:	240d803a 	cmpltu	r6,r4,r16
    9c68:	344d883a 	add	r6,r6,r17
    9c6c:	2021883a 	mov	r16,r4
    9c70:	3023883a 	mov	r17,r6
    9c74:	003f9806 	br	9ad8 <__muldf3+0x1c0>
    9c78:	403fe71e 	bne	r8,zero,9c18 <__muldf3+0x300>
    9c7c:	01004004 	movi	r4,256
    9c80:	4904703a 	and	r2,r9,r4
    9c84:	10c4b03a 	or	r2,r2,r3
    9c88:	103fe31e 	bne	r2,zero,9c18 <__muldf3+0x300>
    9c8c:	94c4b03a 	or	r2,r18,r19
    9c90:	103fe126 	beq	r2,zero,9c18 <__muldf3+0x300>
    9c94:	49c5883a 	add	r2,r9,r7
    9c98:	1251803a 	cmpltu	r8,r2,r9
    9c9c:	4291883a 	add	r8,r8,r10
    9ca0:	013fc004 	movi	r4,-256
    9ca4:	1112703a 	and	r9,r2,r4
    9ca8:	4015883a 	mov	r10,r8
    9cac:	003fda06 	br	9c18 <__muldf3+0x300>
    9cb0:	6813883a 	mov	r9,r13
    9cb4:	003fce06 	br	9bf0 <__muldf3+0x2d8>
    9cb8:	143f7c36 	bltu	r2,r16,9aac <__muldf3+0x194>
    9cbc:	003fdd06 	br	9c34 <__muldf3+0x31c>
    9cc0:	12bf852e 	bgeu	r2,r10,9ad8 <__muldf3+0x1c0>
    9cc4:	003fe506 	br	9c5c <__muldf3+0x344>
    9cc8:	00800084 	movi	r2,2
    9ccc:	20bf351e 	bne	r4,r2,99a4 <__muldf3+0x8c>
    9cd0:	01000074 	movhi	r4,1
    9cd4:	213a4004 	addi	r4,r4,-5888
    9cd8:	003f3f06 	br	99d8 <__muldf3+0xc0>

00009cdc <__divdf3>:
    9cdc:	deffed04 	addi	sp,sp,-76
    9ce0:	dcc01115 	stw	r19,68(sp)
    9ce4:	dcc00404 	addi	r19,sp,16
    9ce8:	2011883a 	mov	r8,r4
    9cec:	2813883a 	mov	r9,r5
    9cf0:	dc000e15 	stw	r16,56(sp)
    9cf4:	d809883a 	mov	r4,sp
    9cf8:	980b883a 	mov	r5,r19
    9cfc:	dc000904 	addi	r16,sp,36
    9d00:	dfc01215 	stw	ra,72(sp)
    9d04:	da400115 	stw	r9,4(sp)
    9d08:	d9c00315 	stw	r7,12(sp)
    9d0c:	da000015 	stw	r8,0(sp)
    9d10:	d9800215 	stw	r6,8(sp)
    9d14:	dc801015 	stw	r18,64(sp)
    9d18:	dc400f15 	stw	r17,60(sp)
    9d1c:	000ae1c0 	call	ae1c <__unpack_d>
    9d20:	d9000204 	addi	r4,sp,8
    9d24:	800b883a 	mov	r5,r16
    9d28:	000ae1c0 	call	ae1c <__unpack_d>
    9d2c:	d9000417 	ldw	r4,16(sp)
    9d30:	00800044 	movi	r2,1
    9d34:	11000b2e 	bgeu	r2,r4,9d64 <__divdf3+0x88>
    9d38:	d9400917 	ldw	r5,36(sp)
    9d3c:	1140762e 	bgeu	r2,r5,9f18 <__divdf3+0x23c>
    9d40:	d8800517 	ldw	r2,20(sp)
    9d44:	d8c00a17 	ldw	r3,40(sp)
    9d48:	01800104 	movi	r6,4
    9d4c:	10c4f03a 	xor	r2,r2,r3
    9d50:	d8800515 	stw	r2,20(sp)
    9d54:	21800226 	beq	r4,r6,9d60 <__divdf3+0x84>
    9d58:	00800084 	movi	r2,2
    9d5c:	2080141e 	bne	r4,r2,9db0 <__divdf3+0xd4>
    9d60:	29000926 	beq	r5,r4,9d88 <__divdf3+0xac>
    9d64:	9809883a 	mov	r4,r19
    9d68:	000ab080 	call	ab08 <__pack_d>
    9d6c:	dfc01217 	ldw	ra,72(sp)
    9d70:	dcc01117 	ldw	r19,68(sp)
    9d74:	dc801017 	ldw	r18,64(sp)
    9d78:	dc400f17 	ldw	r17,60(sp)
    9d7c:	dc000e17 	ldw	r16,56(sp)
    9d80:	dec01304 	addi	sp,sp,76
    9d84:	f800283a 	ret
    9d88:	01000074 	movhi	r4,1
    9d8c:	213a4004 	addi	r4,r4,-5888
    9d90:	000ab080 	call	ab08 <__pack_d>
    9d94:	dfc01217 	ldw	ra,72(sp)
    9d98:	dcc01117 	ldw	r19,68(sp)
    9d9c:	dc801017 	ldw	r18,64(sp)
    9da0:	dc400f17 	ldw	r17,60(sp)
    9da4:	dc000e17 	ldw	r16,56(sp)
    9da8:	dec01304 	addi	sp,sp,76
    9dac:	f800283a 	ret
    9db0:	29805b26 	beq	r5,r6,9f20 <__divdf3+0x244>
    9db4:	28802d26 	beq	r5,r2,9e6c <__divdf3+0x190>
    9db8:	d8c00617 	ldw	r3,24(sp)
    9dbc:	d8800b17 	ldw	r2,44(sp)
    9dc0:	d9c00817 	ldw	r7,32(sp)
    9dc4:	dc400d17 	ldw	r17,52(sp)
    9dc8:	188bc83a 	sub	r5,r3,r2
    9dcc:	d9800717 	ldw	r6,28(sp)
    9dd0:	dc000c17 	ldw	r16,48(sp)
    9dd4:	d9400615 	stw	r5,24(sp)
    9dd8:	3c403836 	bltu	r7,r17,9ebc <__divdf3+0x1e0>
    9ddc:	89c03626 	beq	r17,r7,9eb8 <__divdf3+0x1dc>
    9de0:	0015883a 	mov	r10,zero
    9de4:	001d883a 	mov	r14,zero
    9de8:	02c40034 	movhi	r11,4096
    9dec:	001f883a 	mov	r15,zero
    9df0:	003f883a 	mov	ra,zero
    9df4:	04800f44 	movi	r18,61
    9df8:	00000f06 	br	9e38 <__divdf3+0x15c>
    9dfc:	601d883a 	mov	r14,r12
    9e00:	681f883a 	mov	r15,r13
    9e04:	400d883a 	mov	r6,r8
    9e08:	100f883a 	mov	r7,r2
    9e0c:	3191883a 	add	r8,r6,r6
    9e10:	5808d07a 	srli	r4,r11,1
    9e14:	4185803a 	cmpltu	r2,r8,r6
    9e18:	39d3883a 	add	r9,r7,r7
    9e1c:	28c6b03a 	or	r3,r5,r3
    9e20:	1245883a 	add	r2,r2,r9
    9e24:	1815883a 	mov	r10,r3
    9e28:	2017883a 	mov	r11,r4
    9e2c:	400d883a 	mov	r6,r8
    9e30:	100f883a 	mov	r7,r2
    9e34:	fc801726 	beq	ra,r18,9e94 <__divdf3+0x1b8>
    9e38:	580a97fa 	slli	r5,r11,31
    9e3c:	5006d07a 	srli	r3,r10,1
    9e40:	ffc00044 	addi	ra,ra,1
    9e44:	3c7ff136 	bltu	r7,r17,9e0c <__divdf3+0x130>
    9e48:	3411c83a 	sub	r8,r6,r16
    9e4c:	3205803a 	cmpltu	r2,r6,r8
    9e50:	3c53c83a 	sub	r9,r7,r17
    9e54:	7298b03a 	or	r12,r14,r10
    9e58:	7adab03a 	or	r13,r15,r11
    9e5c:	4885c83a 	sub	r2,r9,r2
    9e60:	89ffe61e 	bne	r17,r7,9dfc <__divdf3+0x120>
    9e64:	343fe936 	bltu	r6,r16,9e0c <__divdf3+0x130>
    9e68:	003fe406 	br	9dfc <__divdf3+0x120>
    9e6c:	9809883a 	mov	r4,r19
    9e70:	d9800415 	stw	r6,16(sp)
    9e74:	000ab080 	call	ab08 <__pack_d>
    9e78:	dfc01217 	ldw	ra,72(sp)
    9e7c:	dcc01117 	ldw	r19,68(sp)
    9e80:	dc801017 	ldw	r18,64(sp)
    9e84:	dc400f17 	ldw	r17,60(sp)
    9e88:	dc000e17 	ldw	r16,56(sp)
    9e8c:	dec01304 	addi	sp,sp,76
    9e90:	f800283a 	ret
    9e94:	00803fc4 	movi	r2,255
    9e98:	7090703a 	and	r8,r14,r2
    9e9c:	00802004 	movi	r2,128
    9ea0:	0007883a 	mov	r3,zero
    9ea4:	0013883a 	mov	r9,zero
    9ea8:	40800d26 	beq	r8,r2,9ee0 <__divdf3+0x204>
    9eac:	dbc00815 	stw	r15,32(sp)
    9eb0:	db800715 	stw	r14,28(sp)
    9eb4:	003fab06 	br	9d64 <__divdf3+0x88>
    9eb8:	343fc92e 	bgeu	r6,r16,9de0 <__divdf3+0x104>
    9ebc:	3185883a 	add	r2,r6,r6
    9ec0:	1189803a 	cmpltu	r4,r2,r6
    9ec4:	39c7883a 	add	r3,r7,r7
    9ec8:	20c9883a 	add	r4,r4,r3
    9ecc:	297fffc4 	addi	r5,r5,-1
    9ed0:	100d883a 	mov	r6,r2
    9ed4:	200f883a 	mov	r7,r4
    9ed8:	d9400615 	stw	r5,24(sp)
    9edc:	003fc006 	br	9de0 <__divdf3+0x104>
    9ee0:	483ff21e 	bne	r9,zero,9eac <__divdf3+0x1d0>
    9ee4:	01004004 	movi	r4,256
    9ee8:	7104703a 	and	r2,r14,r4
    9eec:	10c4b03a 	or	r2,r2,r3
    9ef0:	103fee1e 	bne	r2,zero,9eac <__divdf3+0x1d0>
    9ef4:	31c4b03a 	or	r2,r6,r7
    9ef8:	103fec26 	beq	r2,zero,9eac <__divdf3+0x1d0>
    9efc:	7205883a 	add	r2,r14,r8
    9f00:	1391803a 	cmpltu	r8,r2,r14
    9f04:	43d1883a 	add	r8,r8,r15
    9f08:	013fc004 	movi	r4,-256
    9f0c:	111c703a 	and	r14,r2,r4
    9f10:	401f883a 	mov	r15,r8
    9f14:	003fe506 	br	9eac <__divdf3+0x1d0>
    9f18:	8009883a 	mov	r4,r16
    9f1c:	003f9206 	br	9d68 <__divdf3+0x8c>
    9f20:	9809883a 	mov	r4,r19
    9f24:	d8000715 	stw	zero,28(sp)
    9f28:	d8000815 	stw	zero,32(sp)
    9f2c:	d8000615 	stw	zero,24(sp)
    9f30:	003f8d06 	br	9d68 <__divdf3+0x8c>

00009f34 <__eqdf2>:
    9f34:	deffef04 	addi	sp,sp,-68
    9f38:	dc400f15 	stw	r17,60(sp)
    9f3c:	dc400404 	addi	r17,sp,16
    9f40:	2005883a 	mov	r2,r4
    9f44:	2807883a 	mov	r3,r5
    9f48:	dc000e15 	stw	r16,56(sp)
    9f4c:	d809883a 	mov	r4,sp
    9f50:	880b883a 	mov	r5,r17
    9f54:	dc000904 	addi	r16,sp,36
    9f58:	d8c00115 	stw	r3,4(sp)
    9f5c:	d8800015 	stw	r2,0(sp)
    9f60:	d9800215 	stw	r6,8(sp)
    9f64:	dfc01015 	stw	ra,64(sp)
    9f68:	d9c00315 	stw	r7,12(sp)
    9f6c:	000ae1c0 	call	ae1c <__unpack_d>
    9f70:	d9000204 	addi	r4,sp,8
    9f74:	800b883a 	mov	r5,r16
    9f78:	000ae1c0 	call	ae1c <__unpack_d>
    9f7c:	d8800417 	ldw	r2,16(sp)
    9f80:	00c00044 	movi	r3,1
    9f84:	180d883a 	mov	r6,r3
    9f88:	1880062e 	bgeu	r3,r2,9fa4 <__eqdf2+0x70>
    9f8c:	d8800917 	ldw	r2,36(sp)
    9f90:	8809883a 	mov	r4,r17
    9f94:	800b883a 	mov	r5,r16
    9f98:	1880022e 	bgeu	r3,r2,9fa4 <__eqdf2+0x70>
    9f9c:	000af540 	call	af54 <__fpcmp_parts_d>
    9fa0:	100d883a 	mov	r6,r2
    9fa4:	3005883a 	mov	r2,r6
    9fa8:	dfc01017 	ldw	ra,64(sp)
    9fac:	dc400f17 	ldw	r17,60(sp)
    9fb0:	dc000e17 	ldw	r16,56(sp)
    9fb4:	dec01104 	addi	sp,sp,68
    9fb8:	f800283a 	ret

00009fbc <__gtdf2>:
    9fbc:	deffef04 	addi	sp,sp,-68
    9fc0:	dc400f15 	stw	r17,60(sp)
    9fc4:	dc400404 	addi	r17,sp,16
    9fc8:	2005883a 	mov	r2,r4
    9fcc:	2807883a 	mov	r3,r5
    9fd0:	dc000e15 	stw	r16,56(sp)
    9fd4:	d809883a 	mov	r4,sp
    9fd8:	880b883a 	mov	r5,r17
    9fdc:	dc000904 	addi	r16,sp,36
    9fe0:	d8c00115 	stw	r3,4(sp)
    9fe4:	d8800015 	stw	r2,0(sp)
    9fe8:	d9800215 	stw	r6,8(sp)
    9fec:	dfc01015 	stw	ra,64(sp)
    9ff0:	d9c00315 	stw	r7,12(sp)
    9ff4:	000ae1c0 	call	ae1c <__unpack_d>
    9ff8:	d9000204 	addi	r4,sp,8
    9ffc:	800b883a 	mov	r5,r16
    a000:	000ae1c0 	call	ae1c <__unpack_d>
    a004:	d8800417 	ldw	r2,16(sp)
    a008:	00c00044 	movi	r3,1
    a00c:	01bfffc4 	movi	r6,-1
    a010:	1880062e 	bgeu	r3,r2,a02c <__gtdf2+0x70>
    a014:	d8800917 	ldw	r2,36(sp)
    a018:	8809883a 	mov	r4,r17
    a01c:	800b883a 	mov	r5,r16
    a020:	1880022e 	bgeu	r3,r2,a02c <__gtdf2+0x70>
    a024:	000af540 	call	af54 <__fpcmp_parts_d>
    a028:	100d883a 	mov	r6,r2
    a02c:	3005883a 	mov	r2,r6
    a030:	dfc01017 	ldw	ra,64(sp)
    a034:	dc400f17 	ldw	r17,60(sp)
    a038:	dc000e17 	ldw	r16,56(sp)
    a03c:	dec01104 	addi	sp,sp,68
    a040:	f800283a 	ret

0000a044 <__gedf2>:
    a044:	deffef04 	addi	sp,sp,-68
    a048:	dc400f15 	stw	r17,60(sp)
    a04c:	dc400404 	addi	r17,sp,16
    a050:	2005883a 	mov	r2,r4
    a054:	2807883a 	mov	r3,r5
    a058:	dc000e15 	stw	r16,56(sp)
    a05c:	d809883a 	mov	r4,sp
    a060:	880b883a 	mov	r5,r17
    a064:	dc000904 	addi	r16,sp,36
    a068:	d8c00115 	stw	r3,4(sp)
    a06c:	d8800015 	stw	r2,0(sp)
    a070:	d9800215 	stw	r6,8(sp)
    a074:	dfc01015 	stw	ra,64(sp)
    a078:	d9c00315 	stw	r7,12(sp)
    a07c:	000ae1c0 	call	ae1c <__unpack_d>
    a080:	d9000204 	addi	r4,sp,8
    a084:	800b883a 	mov	r5,r16
    a088:	000ae1c0 	call	ae1c <__unpack_d>
    a08c:	d8800417 	ldw	r2,16(sp)
    a090:	00c00044 	movi	r3,1
    a094:	01bfffc4 	movi	r6,-1
    a098:	1880062e 	bgeu	r3,r2,a0b4 <__gedf2+0x70>
    a09c:	d8800917 	ldw	r2,36(sp)
    a0a0:	8809883a 	mov	r4,r17
    a0a4:	800b883a 	mov	r5,r16
    a0a8:	1880022e 	bgeu	r3,r2,a0b4 <__gedf2+0x70>
    a0ac:	000af540 	call	af54 <__fpcmp_parts_d>
    a0b0:	100d883a 	mov	r6,r2
    a0b4:	3005883a 	mov	r2,r6
    a0b8:	dfc01017 	ldw	ra,64(sp)
    a0bc:	dc400f17 	ldw	r17,60(sp)
    a0c0:	dc000e17 	ldw	r16,56(sp)
    a0c4:	dec01104 	addi	sp,sp,68
    a0c8:	f800283a 	ret

0000a0cc <__ltdf2>:
    a0cc:	deffef04 	addi	sp,sp,-68
    a0d0:	dc400f15 	stw	r17,60(sp)
    a0d4:	dc400404 	addi	r17,sp,16
    a0d8:	2005883a 	mov	r2,r4
    a0dc:	2807883a 	mov	r3,r5
    a0e0:	dc000e15 	stw	r16,56(sp)
    a0e4:	d809883a 	mov	r4,sp
    a0e8:	880b883a 	mov	r5,r17
    a0ec:	dc000904 	addi	r16,sp,36
    a0f0:	d8c00115 	stw	r3,4(sp)
    a0f4:	d8800015 	stw	r2,0(sp)
    a0f8:	d9800215 	stw	r6,8(sp)
    a0fc:	dfc01015 	stw	ra,64(sp)
    a100:	d9c00315 	stw	r7,12(sp)
    a104:	000ae1c0 	call	ae1c <__unpack_d>
    a108:	d9000204 	addi	r4,sp,8
    a10c:	800b883a 	mov	r5,r16
    a110:	000ae1c0 	call	ae1c <__unpack_d>
    a114:	d8800417 	ldw	r2,16(sp)
    a118:	00c00044 	movi	r3,1
    a11c:	180d883a 	mov	r6,r3
    a120:	1880062e 	bgeu	r3,r2,a13c <__ltdf2+0x70>
    a124:	d8800917 	ldw	r2,36(sp)
    a128:	8809883a 	mov	r4,r17
    a12c:	800b883a 	mov	r5,r16
    a130:	1880022e 	bgeu	r3,r2,a13c <__ltdf2+0x70>
    a134:	000af540 	call	af54 <__fpcmp_parts_d>
    a138:	100d883a 	mov	r6,r2
    a13c:	3005883a 	mov	r2,r6
    a140:	dfc01017 	ldw	ra,64(sp)
    a144:	dc400f17 	ldw	r17,60(sp)
    a148:	dc000e17 	ldw	r16,56(sp)
    a14c:	dec01104 	addi	sp,sp,68
    a150:	f800283a 	ret

0000a154 <__floatsidf>:
    a154:	2006d7fa 	srli	r3,r4,31
    a158:	defff604 	addi	sp,sp,-40
    a15c:	008000c4 	movi	r2,3
    a160:	dfc00915 	stw	ra,36(sp)
    a164:	dcc00815 	stw	r19,32(sp)
    a168:	dc800715 	stw	r18,28(sp)
    a16c:	dc400615 	stw	r17,24(sp)
    a170:	dc000515 	stw	r16,20(sp)
    a174:	d8800015 	stw	r2,0(sp)
    a178:	d8c00115 	stw	r3,4(sp)
    a17c:	20000f1e 	bne	r4,zero,a1bc <__floatsidf+0x68>
    a180:	00800084 	movi	r2,2
    a184:	d8800015 	stw	r2,0(sp)
    a188:	d809883a 	mov	r4,sp
    a18c:	000ab080 	call	ab08 <__pack_d>
    a190:	1009883a 	mov	r4,r2
    a194:	180b883a 	mov	r5,r3
    a198:	2005883a 	mov	r2,r4
    a19c:	2807883a 	mov	r3,r5
    a1a0:	dfc00917 	ldw	ra,36(sp)
    a1a4:	dcc00817 	ldw	r19,32(sp)
    a1a8:	dc800717 	ldw	r18,28(sp)
    a1ac:	dc400617 	ldw	r17,24(sp)
    a1b0:	dc000517 	ldw	r16,20(sp)
    a1b4:	dec00a04 	addi	sp,sp,40
    a1b8:	f800283a 	ret
    a1bc:	00800f04 	movi	r2,60
    a1c0:	1807003a 	cmpeq	r3,r3,zero
    a1c4:	d8800215 	stw	r2,8(sp)
    a1c8:	18001126 	beq	r3,zero,a210 <__floatsidf+0xbc>
    a1cc:	0027883a 	mov	r19,zero
    a1d0:	2025883a 	mov	r18,r4
    a1d4:	d9000315 	stw	r4,12(sp)
    a1d8:	dcc00415 	stw	r19,16(sp)
    a1dc:	000a6e80 	call	a6e8 <__clzsi2>
    a1e0:	11000744 	addi	r4,r2,29
    a1e4:	013fe80e 	bge	zero,r4,a188 <__floatsidf+0x34>
    a1e8:	10bfff44 	addi	r2,r2,-3
    a1ec:	10000c16 	blt	r2,zero,a220 <__floatsidf+0xcc>
    a1f0:	90a2983a 	sll	r17,r18,r2
    a1f4:	0021883a 	mov	r16,zero
    a1f8:	d8800217 	ldw	r2,8(sp)
    a1fc:	dc400415 	stw	r17,16(sp)
    a200:	dc000315 	stw	r16,12(sp)
    a204:	1105c83a 	sub	r2,r2,r4
    a208:	d8800215 	stw	r2,8(sp)
    a20c:	003fde06 	br	a188 <__floatsidf+0x34>
    a210:	00a00034 	movhi	r2,32768
    a214:	20800a26 	beq	r4,r2,a240 <__floatsidf+0xec>
    a218:	0109c83a 	sub	r4,zero,r4
    a21c:	003feb06 	br	a1cc <__floatsidf+0x78>
    a220:	9006d07a 	srli	r3,r18,1
    a224:	008007c4 	movi	r2,31
    a228:	1105c83a 	sub	r2,r2,r4
    a22c:	1886d83a 	srl	r3,r3,r2
    a230:	9922983a 	sll	r17,r19,r4
    a234:	9120983a 	sll	r16,r18,r4
    a238:	1c62b03a 	or	r17,r3,r17
    a23c:	003fee06 	br	a1f8 <__floatsidf+0xa4>
    a240:	0009883a 	mov	r4,zero
    a244:	01707834 	movhi	r5,49632
    a248:	003fd306 	br	a198 <__floatsidf+0x44>

0000a24c <__fixdfsi>:
    a24c:	defff804 	addi	sp,sp,-32
    a250:	2005883a 	mov	r2,r4
    a254:	2807883a 	mov	r3,r5
    a258:	d809883a 	mov	r4,sp
    a25c:	d9400204 	addi	r5,sp,8
    a260:	d8c00115 	stw	r3,4(sp)
    a264:	d8800015 	stw	r2,0(sp)
    a268:	dfc00715 	stw	ra,28(sp)
    a26c:	000ae1c0 	call	ae1c <__unpack_d>
    a270:	d8c00217 	ldw	r3,8(sp)
    a274:	00800084 	movi	r2,2
    a278:	1880051e 	bne	r3,r2,a290 <__fixdfsi+0x44>
    a27c:	0007883a 	mov	r3,zero
    a280:	1805883a 	mov	r2,r3
    a284:	dfc00717 	ldw	ra,28(sp)
    a288:	dec00804 	addi	sp,sp,32
    a28c:	f800283a 	ret
    a290:	00800044 	movi	r2,1
    a294:	10fff92e 	bgeu	r2,r3,a27c <__fixdfsi+0x30>
    a298:	00800104 	movi	r2,4
    a29c:	18800426 	beq	r3,r2,a2b0 <__fixdfsi+0x64>
    a2a0:	d8c00417 	ldw	r3,16(sp)
    a2a4:	183ff516 	blt	r3,zero,a27c <__fixdfsi+0x30>
    a2a8:	00800784 	movi	r2,30
    a2ac:	10c0080e 	bge	r2,r3,a2d0 <__fixdfsi+0x84>
    a2b0:	d8800317 	ldw	r2,12(sp)
    a2b4:	1000121e 	bne	r2,zero,a300 <__fixdfsi+0xb4>
    a2b8:	00e00034 	movhi	r3,32768
    a2bc:	18ffffc4 	addi	r3,r3,-1
    a2c0:	1805883a 	mov	r2,r3
    a2c4:	dfc00717 	ldw	ra,28(sp)
    a2c8:	dec00804 	addi	sp,sp,32
    a2cc:	f800283a 	ret
    a2d0:	00800f04 	movi	r2,60
    a2d4:	10d1c83a 	sub	r8,r2,r3
    a2d8:	40bff804 	addi	r2,r8,-32
    a2dc:	d9800517 	ldw	r6,20(sp)
    a2e0:	d9c00617 	ldw	r7,24(sp)
    a2e4:	10000816 	blt	r2,zero,a308 <__fixdfsi+0xbc>
    a2e8:	3888d83a 	srl	r4,r7,r2
    a2ec:	d8800317 	ldw	r2,12(sp)
    a2f0:	2007883a 	mov	r3,r4
    a2f4:	103fe226 	beq	r2,zero,a280 <__fixdfsi+0x34>
    a2f8:	0107c83a 	sub	r3,zero,r4
    a2fc:	003fe006 	br	a280 <__fixdfsi+0x34>
    a300:	00e00034 	movhi	r3,32768
    a304:	003fde06 	br	a280 <__fixdfsi+0x34>
    a308:	39c7883a 	add	r3,r7,r7
    a30c:	008007c4 	movi	r2,31
    a310:	1205c83a 	sub	r2,r2,r8
    a314:	1886983a 	sll	r3,r3,r2
    a318:	3208d83a 	srl	r4,r6,r8
    a31c:	1908b03a 	or	r4,r3,r4
    a320:	003ff206 	br	a2ec <__fixdfsi+0xa0>

0000a324 <__make_dp>:
    a324:	defff904 	addi	sp,sp,-28
    a328:	d8c00717 	ldw	r3,28(sp)
    a32c:	d9000015 	stw	r4,0(sp)
    a330:	d809883a 	mov	r4,sp
    a334:	dfc00515 	stw	ra,20(sp)
    a338:	d9c00615 	stw	r7,24(sp)
    a33c:	d9400115 	stw	r5,4(sp)
    a340:	d9800215 	stw	r6,8(sp)
    a344:	d8c00415 	stw	r3,16(sp)
    a348:	d9c00315 	stw	r7,12(sp)
    a34c:	000ab080 	call	ab08 <__pack_d>
    a350:	dfc00517 	ldw	ra,20(sp)
    a354:	dec00704 	addi	sp,sp,28
    a358:	f800283a 	ret

0000a35c <__truncdfsf2>:
    a35c:	defff804 	addi	sp,sp,-32
    a360:	2005883a 	mov	r2,r4
    a364:	2807883a 	mov	r3,r5
    a368:	d809883a 	mov	r4,sp
    a36c:	d9400204 	addi	r5,sp,8
    a370:	d8c00115 	stw	r3,4(sp)
    a374:	d8800015 	stw	r2,0(sp)
    a378:	dfc00715 	stw	ra,28(sp)
    a37c:	000ae1c0 	call	ae1c <__unpack_d>
    a380:	d9c00517 	ldw	r7,20(sp)
    a384:	da000617 	ldw	r8,24(sp)
    a388:	02d00034 	movhi	r11,16384
    a38c:	5affffc4 	addi	r11,r11,-1
    a390:	3812d7ba 	srli	r9,r7,30
    a394:	401a90ba 	slli	r13,r8,2
    a398:	3ac4703a 	and	r2,r7,r11
    a39c:	0007883a 	mov	r3,zero
    a3a0:	6a52b03a 	or	r9,r13,r9
    a3a4:	10c4b03a 	or	r2,r2,r3
    a3a8:	d9000217 	ldw	r4,8(sp)
    a3ac:	d9400317 	ldw	r5,12(sp)
    a3b0:	d9800417 	ldw	r6,16(sp)
    a3b4:	480f883a 	mov	r7,r9
    a3b8:	10000126 	beq	r2,zero,a3c0 <__truncdfsf2+0x64>
    a3bc:	49c00054 	ori	r7,r9,1
    a3c0:	000aadc0 	call	aadc <__make_fp>
    a3c4:	dfc00717 	ldw	ra,28(sp)
    a3c8:	dec00804 	addi	sp,sp,32
    a3cc:	f800283a 	ret

0000a3d0 <__floatunsidf>:
    a3d0:	defff204 	addi	sp,sp,-56
    a3d4:	dfc00d15 	stw	ra,52(sp)
    a3d8:	ddc00c15 	stw	r23,48(sp)
    a3dc:	dd800b15 	stw	r22,44(sp)
    a3e0:	dd400a15 	stw	r21,40(sp)
    a3e4:	dd000915 	stw	r20,36(sp)
    a3e8:	dcc00815 	stw	r19,32(sp)
    a3ec:	dc800715 	stw	r18,28(sp)
    a3f0:	dc400615 	stw	r17,24(sp)
    a3f4:	dc000515 	stw	r16,20(sp)
    a3f8:	d8000115 	stw	zero,4(sp)
    a3fc:	20000f1e 	bne	r4,zero,a43c <__floatunsidf+0x6c>
    a400:	00800084 	movi	r2,2
    a404:	d8800015 	stw	r2,0(sp)
    a408:	d809883a 	mov	r4,sp
    a40c:	000ab080 	call	ab08 <__pack_d>
    a410:	dfc00d17 	ldw	ra,52(sp)
    a414:	ddc00c17 	ldw	r23,48(sp)
    a418:	dd800b17 	ldw	r22,44(sp)
    a41c:	dd400a17 	ldw	r21,40(sp)
    a420:	dd000917 	ldw	r20,36(sp)
    a424:	dcc00817 	ldw	r19,32(sp)
    a428:	dc800717 	ldw	r18,28(sp)
    a42c:	dc400617 	ldw	r17,24(sp)
    a430:	dc000517 	ldw	r16,20(sp)
    a434:	dec00e04 	addi	sp,sp,56
    a438:	f800283a 	ret
    a43c:	008000c4 	movi	r2,3
    a440:	00c00f04 	movi	r3,60
    a444:	002f883a 	mov	r23,zero
    a448:	202d883a 	mov	r22,r4
    a44c:	d8800015 	stw	r2,0(sp)
    a450:	d8c00215 	stw	r3,8(sp)
    a454:	d9000315 	stw	r4,12(sp)
    a458:	ddc00415 	stw	r23,16(sp)
    a45c:	000a6e80 	call	a6e8 <__clzsi2>
    a460:	12400744 	addi	r9,r2,29
    a464:	48000b16 	blt	r9,zero,a494 <__floatunsidf+0xc4>
    a468:	483fe726 	beq	r9,zero,a408 <__floatunsidf+0x38>
    a46c:	10bfff44 	addi	r2,r2,-3
    a470:	10002e16 	blt	r2,zero,a52c <__floatunsidf+0x15c>
    a474:	b0a2983a 	sll	r17,r22,r2
    a478:	0021883a 	mov	r16,zero
    a47c:	d8800217 	ldw	r2,8(sp)
    a480:	dc400415 	stw	r17,16(sp)
    a484:	dc000315 	stw	r16,12(sp)
    a488:	1245c83a 	sub	r2,r2,r9
    a48c:	d8800215 	stw	r2,8(sp)
    a490:	003fdd06 	br	a408 <__floatunsidf+0x38>
    a494:	0255c83a 	sub	r10,zero,r9
    a498:	51bff804 	addi	r6,r10,-32
    a49c:	30001b16 	blt	r6,zero,a50c <__floatunsidf+0x13c>
    a4a0:	b9a8d83a 	srl	r20,r23,r6
    a4a4:	002b883a 	mov	r21,zero
    a4a8:	000f883a 	mov	r7,zero
    a4ac:	01000044 	movi	r4,1
    a4b0:	0011883a 	mov	r8,zero
    a4b4:	30002516 	blt	r6,zero,a54c <__floatunsidf+0x17c>
    a4b8:	21a6983a 	sll	r19,r4,r6
    a4bc:	0025883a 	mov	r18,zero
    a4c0:	00bfffc4 	movi	r2,-1
    a4c4:	9089883a 	add	r4,r18,r2
    a4c8:	988b883a 	add	r5,r19,r2
    a4cc:	248d803a 	cmpltu	r6,r4,r18
    a4d0:	314b883a 	add	r5,r6,r5
    a4d4:	b104703a 	and	r2,r22,r4
    a4d8:	b946703a 	and	r3,r23,r5
    a4dc:	10c4b03a 	or	r2,r2,r3
    a4e0:	10000226 	beq	r2,zero,a4ec <__floatunsidf+0x11c>
    a4e4:	01c00044 	movi	r7,1
    a4e8:	0011883a 	mov	r8,zero
    a4ec:	d9000217 	ldw	r4,8(sp)
    a4f0:	a1c4b03a 	or	r2,r20,r7
    a4f4:	aa06b03a 	or	r3,r21,r8
    a4f8:	2249c83a 	sub	r4,r4,r9
    a4fc:	d8c00415 	stw	r3,16(sp)
    a500:	d9000215 	stw	r4,8(sp)
    a504:	d8800315 	stw	r2,12(sp)
    a508:	003fbf06 	br	a408 <__floatunsidf+0x38>
    a50c:	bdc7883a 	add	r3,r23,r23
    a510:	008007c4 	movi	r2,31
    a514:	1285c83a 	sub	r2,r2,r10
    a518:	1886983a 	sll	r3,r3,r2
    a51c:	b2a8d83a 	srl	r20,r22,r10
    a520:	baaad83a 	srl	r21,r23,r10
    a524:	1d28b03a 	or	r20,r3,r20
    a528:	003fdf06 	br	a4a8 <__floatunsidf+0xd8>
    a52c:	b006d07a 	srli	r3,r22,1
    a530:	008007c4 	movi	r2,31
    a534:	1245c83a 	sub	r2,r2,r9
    a538:	1886d83a 	srl	r3,r3,r2
    a53c:	ba62983a 	sll	r17,r23,r9
    a540:	b260983a 	sll	r16,r22,r9
    a544:	1c62b03a 	or	r17,r3,r17
    a548:	003fcc06 	br	a47c <__floatunsidf+0xac>
    a54c:	2006d07a 	srli	r3,r4,1
    a550:	008007c4 	movi	r2,31
    a554:	1285c83a 	sub	r2,r2,r10
    a558:	18a6d83a 	srl	r19,r3,r2
    a55c:	22a4983a 	sll	r18,r4,r10
    a560:	003fd706 	br	a4c0 <__floatunsidf+0xf0>

0000a564 <udivmodsi4>:
    a564:	29001b2e 	bgeu	r5,r4,a5d4 <udivmodsi4+0x70>
    a568:	28001a16 	blt	r5,zero,a5d4 <udivmodsi4+0x70>
    a56c:	00800044 	movi	r2,1
    a570:	0007883a 	mov	r3,zero
    a574:	01c007c4 	movi	r7,31
    a578:	00000306 	br	a588 <udivmodsi4+0x24>
    a57c:	19c01326 	beq	r3,r7,a5cc <udivmodsi4+0x68>
    a580:	18c00044 	addi	r3,r3,1
    a584:	28000416 	blt	r5,zero,a598 <udivmodsi4+0x34>
    a588:	294b883a 	add	r5,r5,r5
    a58c:	1085883a 	add	r2,r2,r2
    a590:	293ffa36 	bltu	r5,r4,a57c <udivmodsi4+0x18>
    a594:	10000d26 	beq	r2,zero,a5cc <udivmodsi4+0x68>
    a598:	0007883a 	mov	r3,zero
    a59c:	21400236 	bltu	r4,r5,a5a8 <udivmodsi4+0x44>
    a5a0:	2149c83a 	sub	r4,r4,r5
    a5a4:	1886b03a 	or	r3,r3,r2
    a5a8:	1004d07a 	srli	r2,r2,1
    a5ac:	280ad07a 	srli	r5,r5,1
    a5b0:	103ffa1e 	bne	r2,zero,a59c <udivmodsi4+0x38>
    a5b4:	30000226 	beq	r6,zero,a5c0 <udivmodsi4+0x5c>
    a5b8:	2005883a 	mov	r2,r4
    a5bc:	f800283a 	ret
    a5c0:	1809883a 	mov	r4,r3
    a5c4:	2005883a 	mov	r2,r4
    a5c8:	f800283a 	ret
    a5cc:	0007883a 	mov	r3,zero
    a5d0:	003ff806 	br	a5b4 <udivmodsi4+0x50>
    a5d4:	00800044 	movi	r2,1
    a5d8:	0007883a 	mov	r3,zero
    a5dc:	003fef06 	br	a59c <udivmodsi4+0x38>

0000a5e0 <__divsi3>:
    a5e0:	defffe04 	addi	sp,sp,-8
    a5e4:	dc000015 	stw	r16,0(sp)
    a5e8:	dfc00115 	stw	ra,4(sp)
    a5ec:	0021883a 	mov	r16,zero
    a5f0:	20000c16 	blt	r4,zero,a624 <__divsi3+0x44>
    a5f4:	000d883a 	mov	r6,zero
    a5f8:	28000e16 	blt	r5,zero,a634 <__divsi3+0x54>
    a5fc:	000a5640 	call	a564 <udivmodsi4>
    a600:	1007883a 	mov	r3,r2
    a604:	8005003a 	cmpeq	r2,r16,zero
    a608:	1000011e 	bne	r2,zero,a610 <__divsi3+0x30>
    a60c:	00c7c83a 	sub	r3,zero,r3
    a610:	1805883a 	mov	r2,r3
    a614:	dfc00117 	ldw	ra,4(sp)
    a618:	dc000017 	ldw	r16,0(sp)
    a61c:	dec00204 	addi	sp,sp,8
    a620:	f800283a 	ret
    a624:	0109c83a 	sub	r4,zero,r4
    a628:	04000044 	movi	r16,1
    a62c:	000d883a 	mov	r6,zero
    a630:	283ff20e 	bge	r5,zero,a5fc <__divsi3+0x1c>
    a634:	014bc83a 	sub	r5,zero,r5
    a638:	8021003a 	cmpeq	r16,r16,zero
    a63c:	003fef06 	br	a5fc <__divsi3+0x1c>

0000a640 <__modsi3>:
    a640:	deffff04 	addi	sp,sp,-4
    a644:	dfc00015 	stw	ra,0(sp)
    a648:	01800044 	movi	r6,1
    a64c:	2807883a 	mov	r3,r5
    a650:	20000416 	blt	r4,zero,a664 <__modsi3+0x24>
    a654:	28000c16 	blt	r5,zero,a688 <__modsi3+0x48>
    a658:	dfc00017 	ldw	ra,0(sp)
    a65c:	dec00104 	addi	sp,sp,4
    a660:	000a5641 	jmpi	a564 <udivmodsi4>
    a664:	0109c83a 	sub	r4,zero,r4
    a668:	28000b16 	blt	r5,zero,a698 <__modsi3+0x58>
    a66c:	180b883a 	mov	r5,r3
    a670:	01800044 	movi	r6,1
    a674:	000a5640 	call	a564 <udivmodsi4>
    a678:	0085c83a 	sub	r2,zero,r2
    a67c:	dfc00017 	ldw	ra,0(sp)
    a680:	dec00104 	addi	sp,sp,4
    a684:	f800283a 	ret
    a688:	014bc83a 	sub	r5,zero,r5
    a68c:	dfc00017 	ldw	ra,0(sp)
    a690:	dec00104 	addi	sp,sp,4
    a694:	000a5641 	jmpi	a564 <udivmodsi4>
    a698:	0147c83a 	sub	r3,zero,r5
    a69c:	003ff306 	br	a66c <__modsi3+0x2c>

0000a6a0 <__udivsi3>:
    a6a0:	000d883a 	mov	r6,zero
    a6a4:	000a5641 	jmpi	a564 <udivmodsi4>

0000a6a8 <__umodsi3>:
    a6a8:	01800044 	movi	r6,1
    a6ac:	000a5641 	jmpi	a564 <udivmodsi4>

0000a6b0 <__mulsi3>:
    a6b0:	20000a26 	beq	r4,zero,a6dc <__mulsi3+0x2c>
    a6b4:	0007883a 	mov	r3,zero
    a6b8:	2080004c 	andi	r2,r4,1
    a6bc:	1005003a 	cmpeq	r2,r2,zero
    a6c0:	2008d07a 	srli	r4,r4,1
    a6c4:	1000011e 	bne	r2,zero,a6cc <__mulsi3+0x1c>
    a6c8:	1947883a 	add	r3,r3,r5
    a6cc:	294b883a 	add	r5,r5,r5
    a6d0:	203ff91e 	bne	r4,zero,a6b8 <__mulsi3+0x8>
    a6d4:	1805883a 	mov	r2,r3
    a6d8:	f800283a 	ret
    a6dc:	0007883a 	mov	r3,zero
    a6e0:	1805883a 	mov	r2,r3
    a6e4:	f800283a 	ret

0000a6e8 <__clzsi2>:
    a6e8:	00bfffd4 	movui	r2,65535
    a6ec:	11000e36 	bltu	r2,r4,a728 <__clzsi2+0x40>
    a6f0:	00803fc4 	movi	r2,255
    a6f4:	01400204 	movi	r5,8
    a6f8:	0007883a 	mov	r3,zero
    a6fc:	11001036 	bltu	r2,r4,a740 <__clzsi2+0x58>
    a700:	000b883a 	mov	r5,zero
    a704:	20c6d83a 	srl	r3,r4,r3
    a708:	00800074 	movhi	r2,1
    a70c:	10ba4504 	addi	r2,r2,-5868
    a710:	1887883a 	add	r3,r3,r2
    a714:	18800003 	ldbu	r2,0(r3)
    a718:	00c00804 	movi	r3,32
    a71c:	2885883a 	add	r2,r5,r2
    a720:	1885c83a 	sub	r2,r3,r2
    a724:	f800283a 	ret
    a728:	01400404 	movi	r5,16
    a72c:	00804034 	movhi	r2,256
    a730:	10bfffc4 	addi	r2,r2,-1
    a734:	2807883a 	mov	r3,r5
    a738:	113ff22e 	bgeu	r2,r4,a704 <__clzsi2+0x1c>
    a73c:	01400604 	movi	r5,24
    a740:	2807883a 	mov	r3,r5
    a744:	20c6d83a 	srl	r3,r4,r3
    a748:	00800074 	movhi	r2,1
    a74c:	10ba4504 	addi	r2,r2,-5868
    a750:	1887883a 	add	r3,r3,r2
    a754:	18800003 	ldbu	r2,0(r3)
    a758:	00c00804 	movi	r3,32
    a75c:	2885883a 	add	r2,r5,r2
    a760:	1885c83a 	sub	r2,r3,r2
    a764:	f800283a 	ret

0000a768 <__fixunsdfsi>:
    a768:	defffb04 	addi	sp,sp,-20
    a76c:	dc400115 	stw	r17,4(sp)
    a770:	dc000015 	stw	r16,0(sp)
    a774:	04507834 	movhi	r17,16864
    a778:	0021883a 	mov	r16,zero
    a77c:	800d883a 	mov	r6,r16
    a780:	880f883a 	mov	r7,r17
    a784:	dcc00315 	stw	r19,12(sp)
    a788:	dc800215 	stw	r18,8(sp)
    a78c:	2827883a 	mov	r19,r5
    a790:	2025883a 	mov	r18,r4
    a794:	dfc00415 	stw	ra,16(sp)
    a798:	000a0440 	call	a044 <__gedf2>
    a79c:	000d883a 	mov	r6,zero
    a7a0:	880f883a 	mov	r7,r17
    a7a4:	980b883a 	mov	r5,r19
    a7a8:	9009883a 	mov	r4,r18
    a7ac:	10000d16 	blt	r2,zero,a7e4 <__fixunsdfsi+0x7c>
    a7b0:	00098240 	call	9824 <__subdf3>
    a7b4:	180b883a 	mov	r5,r3
    a7b8:	1009883a 	mov	r4,r2
    a7bc:	000a24c0 	call	a24c <__fixdfsi>
    a7c0:	00e00034 	movhi	r3,32768
    a7c4:	10c5883a 	add	r2,r2,r3
    a7c8:	dfc00417 	ldw	ra,16(sp)
    a7cc:	dcc00317 	ldw	r19,12(sp)
    a7d0:	dc800217 	ldw	r18,8(sp)
    a7d4:	dc400117 	ldw	r17,4(sp)
    a7d8:	dc000017 	ldw	r16,0(sp)
    a7dc:	dec00504 	addi	sp,sp,20
    a7e0:	f800283a 	ret
    a7e4:	980b883a 	mov	r5,r19
    a7e8:	9009883a 	mov	r4,r18
    a7ec:	000a24c0 	call	a24c <__fixdfsi>
    a7f0:	dfc00417 	ldw	ra,16(sp)
    a7f4:	dcc00317 	ldw	r19,12(sp)
    a7f8:	dc800217 	ldw	r18,8(sp)
    a7fc:	dc400117 	ldw	r17,4(sp)
    a800:	dc000017 	ldw	r16,0(sp)
    a804:	dec00504 	addi	sp,sp,20
    a808:	f800283a 	ret

0000a80c <__pack_f>:
    a80c:	20c00017 	ldw	r3,0(r4)
    a810:	01c00044 	movi	r7,1
    a814:	21800317 	ldw	r6,12(r4)
    a818:	21400117 	ldw	r5,4(r4)
    a81c:	38c02d2e 	bgeu	r7,r3,a8d4 <__pack_f+0xc8>
    a820:	00800104 	movi	r2,4
    a824:	18802826 	beq	r3,r2,a8c8 <__pack_f+0xbc>
    a828:	00800084 	movi	r2,2
    a82c:	18800126 	beq	r3,r2,a834 <__pack_f+0x28>
    a830:	3000101e 	bne	r6,zero,a874 <__pack_f+0x68>
    a834:	000d883a 	mov	r6,zero
    a838:	0007883a 	mov	r3,zero
    a83c:	19003fcc 	andi	r4,r3,255
    a840:	200895fa 	slli	r4,r4,23
    a844:	00c02034 	movhi	r3,128
    a848:	18ffffc4 	addi	r3,r3,-1
    a84c:	30c6703a 	and	r3,r6,r3
    a850:	10a0002c 	andhi	r2,r2,32768
    a854:	10c4b03a 	or	r2,r2,r3
    a858:	280a97fa 	slli	r5,r5,31
    a85c:	1104b03a 	or	r2,r2,r4
    a860:	00e00034 	movhi	r3,32768
    a864:	18ffffc4 	addi	r3,r3,-1
    a868:	10c4703a 	and	r2,r2,r3
    a86c:	1144b03a 	or	r2,r2,r5
    a870:	f800283a 	ret
    a874:	21000217 	ldw	r4,8(r4)
    a878:	00bfe084 	movi	r2,-126
    a87c:	20801b16 	blt	r4,r2,a8ec <__pack_f+0xe0>
    a880:	00801fc4 	movi	r2,127
    a884:	11001016 	blt	r2,r4,a8c8 <__pack_f+0xbc>
    a888:	308e703a 	and	r7,r6,r2
    a88c:	2087883a 	add	r3,r4,r2
    a890:	00801004 	movi	r2,64
    a894:	38800526 	beq	r7,r2,a8ac <__pack_f+0xa0>
    a898:	31800fc4 	addi	r6,r6,63
    a89c:	30000716 	blt	r6,zero,a8bc <__pack_f+0xb0>
    a8a0:	300490ba 	slli	r2,r6,2
    a8a4:	100cd27a 	srli	r6,r2,9
    a8a8:	003fe406 	br	a83c <__pack_f+0x30>
    a8ac:	3080200c 	andi	r2,r6,128
    a8b0:	103ffa26 	beq	r2,zero,a89c <__pack_f+0x90>
    a8b4:	31cd883a 	add	r6,r6,r7
    a8b8:	003ff806 	br	a89c <__pack_f+0x90>
    a8bc:	300cd07a 	srli	r6,r6,1
    a8c0:	18c00044 	addi	r3,r3,1
    a8c4:	003ff606 	br	a8a0 <__pack_f+0x94>
    a8c8:	000d883a 	mov	r6,zero
    a8cc:	00ffffc4 	movi	r3,-1
    a8d0:	003fda06 	br	a83c <__pack_f+0x30>
    a8d4:	31800434 	orhi	r6,r6,16
    a8d8:	00802034 	movhi	r2,128
    a8dc:	10bfffc4 	addi	r2,r2,-1
    a8e0:	308c703a 	and	r6,r6,r2
    a8e4:	00ffffc4 	movi	r3,-1
    a8e8:	003fd406 	br	a83c <__pack_f+0x30>
    a8ec:	1109c83a 	sub	r4,r2,r4
    a8f0:	00800644 	movi	r2,25
    a8f4:	11001216 	blt	r2,r4,a940 <__pack_f+0x134>
    a8f8:	3904983a 	sll	r2,r7,r4
    a8fc:	3106d83a 	srl	r3,r6,r4
    a900:	10bfffc4 	addi	r2,r2,-1
    a904:	3084703a 	and	r2,r6,r2
    a908:	1004c03a 	cmpne	r2,r2,zero
    a90c:	1886b03a 	or	r3,r3,r2
    a910:	19001fcc 	andi	r4,r3,127
    a914:	00801004 	movi	r2,64
    a918:	20800c26 	beq	r4,r2,a94c <__pack_f+0x140>
    a91c:	18c00fc4 	addi	r3,r3,63
    a920:	00900034 	movhi	r2,16384
    a924:	10bfffc4 	addi	r2,r2,-1
    a928:	180cd1fa 	srli	r6,r3,7
    a92c:	10c7803a 	cmpltu	r3,r2,r3
    a930:	00802034 	movhi	r2,128
    a934:	10bfffc4 	addi	r2,r2,-1
    a938:	308c703a 	and	r6,r6,r2
    a93c:	003fbf06 	br	a83c <__pack_f+0x30>
    a940:	0007883a 	mov	r3,zero
    a944:	000d883a 	mov	r6,zero
    a948:	003ff906 	br	a930 <__pack_f+0x124>
    a94c:	1880200c 	andi	r2,r3,128
    a950:	10000126 	beq	r2,zero,a958 <__pack_f+0x14c>
    a954:	1907883a 	add	r3,r3,r4
    a958:	180cd1fa 	srli	r6,r3,7
    a95c:	00900034 	movhi	r2,16384
    a960:	10bfffc4 	addi	r2,r2,-1
    a964:	10c7803a 	cmpltu	r3,r2,r3
    a968:	003ff106 	br	a930 <__pack_f+0x124>

0000a96c <__unpack_f>:
    a96c:	21800017 	ldw	r6,0(r4)
    a970:	00c02034 	movhi	r3,128
    a974:	18ffffc4 	addi	r3,r3,-1
    a978:	3004d5fa 	srli	r2,r6,23
    a97c:	3008d7fa 	srli	r4,r6,31
    a980:	30ce703a 	and	r7,r6,r3
    a984:	10c03fcc 	andi	r3,r2,255
    a988:	29000115 	stw	r4,4(r5)
    a98c:	1800131e 	bne	r3,zero,a9dc <__unpack_f+0x70>
    a990:	38000f26 	beq	r7,zero,a9d0 <__unpack_f+0x64>
    a994:	380691fa 	slli	r3,r7,7
    a998:	01bfe084 	movi	r6,-126
    a99c:	008000c4 	movi	r2,3
    a9a0:	01100034 	movhi	r4,16384
    a9a4:	213fffc4 	addi	r4,r4,-1
    a9a8:	28800015 	stw	r2,0(r5)
    a9ac:	29800215 	stw	r6,8(r5)
    a9b0:	20c00536 	bltu	r4,r3,a9c8 <__unpack_f+0x5c>
    a9b4:	3005883a 	mov	r2,r6
    a9b8:	18c7883a 	add	r3,r3,r3
    a9bc:	10bfffc4 	addi	r2,r2,-1
    a9c0:	20fffd2e 	bgeu	r4,r3,a9b8 <__unpack_f+0x4c>
    a9c4:	28800215 	stw	r2,8(r5)
    a9c8:	28c00315 	stw	r3,12(r5)
    a9cc:	f800283a 	ret
    a9d0:	00800084 	movi	r2,2
    a9d4:	28800015 	stw	r2,0(r5)
    a9d8:	f800283a 	ret
    a9dc:	00803fc4 	movi	r2,255
    a9e0:	18800826 	beq	r3,r2,aa04 <__unpack_f+0x98>
    a9e4:	380491fa 	slli	r2,r7,7
    a9e8:	18ffe044 	addi	r3,r3,-127
    a9ec:	28c00215 	stw	r3,8(r5)
    a9f0:	10900034 	orhi	r2,r2,16384
    a9f4:	28800315 	stw	r2,12(r5)
    a9f8:	008000c4 	movi	r2,3
    a9fc:	28800015 	stw	r2,0(r5)
    aa00:	f800283a 	ret
    aa04:	3800031e 	bne	r7,zero,aa14 <__unpack_f+0xa8>
    aa08:	00800104 	movi	r2,4
    aa0c:	28800015 	stw	r2,0(r5)
    aa10:	f800283a 	ret
    aa14:	3080042c 	andhi	r2,r6,16
    aa18:	10000426 	beq	r2,zero,aa2c <__unpack_f+0xc0>
    aa1c:	00800044 	movi	r2,1
    aa20:	28800015 	stw	r2,0(r5)
    aa24:	29c00315 	stw	r7,12(r5)
    aa28:	f800283a 	ret
    aa2c:	28000015 	stw	zero,0(r5)
    aa30:	003ffc06 	br	aa24 <__unpack_f+0xb8>

0000aa34 <__fpcmp_parts_f>:
    aa34:	21800017 	ldw	r6,0(r4)
    aa38:	00c00044 	movi	r3,1
    aa3c:	19800a2e 	bgeu	r3,r6,aa68 <__fpcmp_parts_f+0x34>
    aa40:	28800017 	ldw	r2,0(r5)
    aa44:	1880082e 	bgeu	r3,r2,aa68 <__fpcmp_parts_f+0x34>
    aa48:	00c00104 	movi	r3,4
    aa4c:	30c01e26 	beq	r6,r3,aac8 <__fpcmp_parts_f+0x94>
    aa50:	10c01a26 	beq	r2,r3,aabc <__fpcmp_parts_f+0x88>
    aa54:	00c00084 	movi	r3,2
    aa58:	30c00526 	beq	r6,r3,aa70 <__fpcmp_parts_f+0x3c>
    aa5c:	10c0071e 	bne	r2,r3,aa7c <__fpcmp_parts_f+0x48>
    aa60:	20800117 	ldw	r2,4(r4)
    aa64:	1000091e 	bne	r2,zero,aa8c <__fpcmp_parts_f+0x58>
    aa68:	00800044 	movi	r2,1
    aa6c:	f800283a 	ret
    aa70:	10c0121e 	bne	r2,r3,aabc <__fpcmp_parts_f+0x88>
    aa74:	0005883a 	mov	r2,zero
    aa78:	f800283a 	ret
    aa7c:	20c00117 	ldw	r3,4(r4)
    aa80:	28800117 	ldw	r2,4(r5)
    aa84:	18800326 	beq	r3,r2,aa94 <__fpcmp_parts_f+0x60>
    aa88:	183ff726 	beq	r3,zero,aa68 <__fpcmp_parts_f+0x34>
    aa8c:	00bfffc4 	movi	r2,-1
    aa90:	f800283a 	ret
    aa94:	21800217 	ldw	r6,8(r4)
    aa98:	28800217 	ldw	r2,8(r5)
    aa9c:	11bffa16 	blt	r2,r6,aa88 <__fpcmp_parts_f+0x54>
    aaa0:	30800416 	blt	r6,r2,aab4 <__fpcmp_parts_f+0x80>
    aaa4:	21000317 	ldw	r4,12(r4)
    aaa8:	29400317 	ldw	r5,12(r5)
    aaac:	293ff636 	bltu	r5,r4,aa88 <__fpcmp_parts_f+0x54>
    aab0:	217ff02e 	bgeu	r4,r5,aa74 <__fpcmp_parts_f+0x40>
    aab4:	183fec1e 	bne	r3,zero,aa68 <__fpcmp_parts_f+0x34>
    aab8:	003ff406 	br	aa8c <__fpcmp_parts_f+0x58>
    aabc:	28800117 	ldw	r2,4(r5)
    aac0:	103fe91e 	bne	r2,zero,aa68 <__fpcmp_parts_f+0x34>
    aac4:	003ff106 	br	aa8c <__fpcmp_parts_f+0x58>
    aac8:	11bfe51e 	bne	r2,r6,aa60 <__fpcmp_parts_f+0x2c>
    aacc:	28c00117 	ldw	r3,4(r5)
    aad0:	20800117 	ldw	r2,4(r4)
    aad4:	1885c83a 	sub	r2,r3,r2
    aad8:	f800283a 	ret

0000aadc <__make_fp>:
    aadc:	defffb04 	addi	sp,sp,-20
    aae0:	d9000015 	stw	r4,0(sp)
    aae4:	d809883a 	mov	r4,sp
    aae8:	dfc00415 	stw	ra,16(sp)
    aaec:	d9400115 	stw	r5,4(sp)
    aaf0:	d9800215 	stw	r6,8(sp)
    aaf4:	d9c00315 	stw	r7,12(sp)
    aaf8:	000a80c0 	call	a80c <__pack_f>
    aafc:	dfc00417 	ldw	ra,16(sp)
    ab00:	dec00504 	addi	sp,sp,20
    ab04:	f800283a 	ret

0000ab08 <__pack_d>:
    ab08:	20c00017 	ldw	r3,0(r4)
    ab0c:	defffd04 	addi	sp,sp,-12
    ab10:	dc000015 	stw	r16,0(sp)
    ab14:	dc800215 	stw	r18,8(sp)
    ab18:	dc400115 	stw	r17,4(sp)
    ab1c:	00800044 	movi	r2,1
    ab20:	22000317 	ldw	r8,12(r4)
    ab24:	001f883a 	mov	r15,zero
    ab28:	22400417 	ldw	r9,16(r4)
    ab2c:	24000117 	ldw	r16,4(r4)
    ab30:	10c0552e 	bgeu	r2,r3,ac88 <__pack_d+0x180>
    ab34:	00800104 	movi	r2,4
    ab38:	18804f26 	beq	r3,r2,ac78 <__pack_d+0x170>
    ab3c:	00800084 	movi	r2,2
    ab40:	18800226 	beq	r3,r2,ab4c <__pack_d+0x44>
    ab44:	4244b03a 	or	r2,r8,r9
    ab48:	10001a1e 	bne	r2,zero,abb4 <__pack_d+0xac>
    ab4c:	000d883a 	mov	r6,zero
    ab50:	000f883a 	mov	r7,zero
    ab54:	0011883a 	mov	r8,zero
    ab58:	00800434 	movhi	r2,16
    ab5c:	10bfffc4 	addi	r2,r2,-1
    ab60:	301d883a 	mov	r14,r6
    ab64:	3884703a 	and	r2,r7,r2
    ab68:	400a953a 	slli	r5,r8,20
    ab6c:	79bffc2c 	andhi	r6,r15,65520
    ab70:	308cb03a 	or	r6,r6,r2
    ab74:	00e00434 	movhi	r3,32784
    ab78:	18ffffc4 	addi	r3,r3,-1
    ab7c:	800497fa 	slli	r2,r16,31
    ab80:	30c6703a 	and	r3,r6,r3
    ab84:	1946b03a 	or	r3,r3,r5
    ab88:	01600034 	movhi	r5,32768
    ab8c:	297fffc4 	addi	r5,r5,-1
    ab90:	194a703a 	and	r5,r3,r5
    ab94:	288ab03a 	or	r5,r5,r2
    ab98:	2807883a 	mov	r3,r5
    ab9c:	7005883a 	mov	r2,r14
    aba0:	dc800217 	ldw	r18,8(sp)
    aba4:	dc400117 	ldw	r17,4(sp)
    aba8:	dc000017 	ldw	r16,0(sp)
    abac:	dec00304 	addi	sp,sp,12
    abb0:	f800283a 	ret
    abb4:	21000217 	ldw	r4,8(r4)
    abb8:	00bf0084 	movi	r2,-1022
    abbc:	20803f16 	blt	r4,r2,acbc <__pack_d+0x1b4>
    abc0:	0080ffc4 	movi	r2,1023
    abc4:	11002c16 	blt	r2,r4,ac78 <__pack_d+0x170>
    abc8:	00803fc4 	movi	r2,255
    abcc:	408c703a 	and	r6,r8,r2
    abd0:	00802004 	movi	r2,128
    abd4:	0007883a 	mov	r3,zero
    abd8:	000f883a 	mov	r7,zero
    abdc:	2280ffc4 	addi	r10,r4,1023
    abe0:	30801e26 	beq	r6,r2,ac5c <__pack_d+0x154>
    abe4:	00801fc4 	movi	r2,127
    abe8:	4089883a 	add	r4,r8,r2
    abec:	220d803a 	cmpltu	r6,r4,r8
    abf0:	324d883a 	add	r6,r6,r9
    abf4:	2011883a 	mov	r8,r4
    abf8:	3013883a 	mov	r9,r6
    abfc:	00880034 	movhi	r2,8192
    ac00:	10bfffc4 	addi	r2,r2,-1
    ac04:	12400d36 	bltu	r2,r9,ac3c <__pack_d+0x134>
    ac08:	4804963a 	slli	r2,r9,24
    ac0c:	400cd23a 	srli	r6,r8,8
    ac10:	480ed23a 	srli	r7,r9,8
    ac14:	013fffc4 	movi	r4,-1
    ac18:	118cb03a 	or	r6,r2,r6
    ac1c:	01400434 	movhi	r5,16
    ac20:	297fffc4 	addi	r5,r5,-1
    ac24:	3104703a 	and	r2,r6,r4
    ac28:	3946703a 	and	r3,r7,r5
    ac2c:	5201ffcc 	andi	r8,r10,2047
    ac30:	100d883a 	mov	r6,r2
    ac34:	180f883a 	mov	r7,r3
    ac38:	003fc706 	br	ab58 <__pack_d+0x50>
    ac3c:	480897fa 	slli	r4,r9,31
    ac40:	4004d07a 	srli	r2,r8,1
    ac44:	4806d07a 	srli	r3,r9,1
    ac48:	52800044 	addi	r10,r10,1
    ac4c:	2084b03a 	or	r2,r4,r2
    ac50:	1011883a 	mov	r8,r2
    ac54:	1813883a 	mov	r9,r3
    ac58:	003feb06 	br	ac08 <__pack_d+0x100>
    ac5c:	383fe11e 	bne	r7,zero,abe4 <__pack_d+0xdc>
    ac60:	01004004 	movi	r4,256
    ac64:	4104703a 	and	r2,r8,r4
    ac68:	10c4b03a 	or	r2,r2,r3
    ac6c:	103fe326 	beq	r2,zero,abfc <__pack_d+0xf4>
    ac70:	3005883a 	mov	r2,r6
    ac74:	003fdc06 	br	abe8 <__pack_d+0xe0>
    ac78:	000d883a 	mov	r6,zero
    ac7c:	000f883a 	mov	r7,zero
    ac80:	0201ffc4 	movi	r8,2047
    ac84:	003fb406 	br	ab58 <__pack_d+0x50>
    ac88:	0005883a 	mov	r2,zero
    ac8c:	00c00234 	movhi	r3,8
    ac90:	408cb03a 	or	r6,r8,r2
    ac94:	48ceb03a 	or	r7,r9,r3
    ac98:	013fffc4 	movi	r4,-1
    ac9c:	01400434 	movhi	r5,16
    aca0:	297fffc4 	addi	r5,r5,-1
    aca4:	3104703a 	and	r2,r6,r4
    aca8:	3946703a 	and	r3,r7,r5
    acac:	100d883a 	mov	r6,r2
    acb0:	180f883a 	mov	r7,r3
    acb4:	0201ffc4 	movi	r8,2047
    acb8:	003fa706 	br	ab58 <__pack_d+0x50>
    acbc:	1109c83a 	sub	r4,r2,r4
    acc0:	00800e04 	movi	r2,56
    acc4:	11004316 	blt	r2,r4,add4 <__pack_d+0x2cc>
    acc8:	21fff804 	addi	r7,r4,-32
    accc:	38004516 	blt	r7,zero,ade4 <__pack_d+0x2dc>
    acd0:	49d8d83a 	srl	r12,r9,r7
    acd4:	001b883a 	mov	r13,zero
    acd8:	0023883a 	mov	r17,zero
    acdc:	01400044 	movi	r5,1
    ace0:	0025883a 	mov	r18,zero
    ace4:	38004716 	blt	r7,zero,ae04 <__pack_d+0x2fc>
    ace8:	29d6983a 	sll	r11,r5,r7
    acec:	0015883a 	mov	r10,zero
    acf0:	00bfffc4 	movi	r2,-1
    acf4:	5089883a 	add	r4,r10,r2
    acf8:	588b883a 	add	r5,r11,r2
    acfc:	228d803a 	cmpltu	r6,r4,r10
    ad00:	314b883a 	add	r5,r6,r5
    ad04:	4104703a 	and	r2,r8,r4
    ad08:	4946703a 	and	r3,r9,r5
    ad0c:	10c4b03a 	or	r2,r2,r3
    ad10:	10000226 	beq	r2,zero,ad1c <__pack_d+0x214>
    ad14:	04400044 	movi	r17,1
    ad18:	0025883a 	mov	r18,zero
    ad1c:	00803fc4 	movi	r2,255
    ad20:	644eb03a 	or	r7,r12,r17
    ad24:	3892703a 	and	r9,r7,r2
    ad28:	00802004 	movi	r2,128
    ad2c:	6c90b03a 	or	r8,r13,r18
    ad30:	0015883a 	mov	r10,zero
    ad34:	48801626 	beq	r9,r2,ad90 <__pack_d+0x288>
    ad38:	01001fc4 	movi	r4,127
    ad3c:	3905883a 	add	r2,r7,r4
    ad40:	11cd803a 	cmpltu	r6,r2,r7
    ad44:	320d883a 	add	r6,r6,r8
    ad48:	100f883a 	mov	r7,r2
    ad4c:	00840034 	movhi	r2,4096
    ad50:	10bfffc4 	addi	r2,r2,-1
    ad54:	3011883a 	mov	r8,r6
    ad58:	0007883a 	mov	r3,zero
    ad5c:	11801b36 	bltu	r2,r6,adcc <__pack_d+0x2c4>
    ad60:	4004963a 	slli	r2,r8,24
    ad64:	3808d23a 	srli	r4,r7,8
    ad68:	400ad23a 	srli	r5,r8,8
    ad6c:	1813883a 	mov	r9,r3
    ad70:	1108b03a 	or	r4,r2,r4
    ad74:	00bfffc4 	movi	r2,-1
    ad78:	00c00434 	movhi	r3,16
    ad7c:	18ffffc4 	addi	r3,r3,-1
    ad80:	208c703a 	and	r6,r4,r2
    ad84:	28ce703a 	and	r7,r5,r3
    ad88:	4a01ffcc 	andi	r8,r9,2047
    ad8c:	003f7206 	br	ab58 <__pack_d+0x50>
    ad90:	503fe91e 	bne	r10,zero,ad38 <__pack_d+0x230>
    ad94:	01004004 	movi	r4,256
    ad98:	3904703a 	and	r2,r7,r4
    ad9c:	0007883a 	mov	r3,zero
    ada0:	10c4b03a 	or	r2,r2,r3
    ada4:	10000626 	beq	r2,zero,adc0 <__pack_d+0x2b8>
    ada8:	3a45883a 	add	r2,r7,r9
    adac:	11cd803a 	cmpltu	r6,r2,r7
    adb0:	320d883a 	add	r6,r6,r8
    adb4:	100f883a 	mov	r7,r2
    adb8:	3011883a 	mov	r8,r6
    adbc:	0007883a 	mov	r3,zero
    adc0:	00840034 	movhi	r2,4096
    adc4:	10bfffc4 	addi	r2,r2,-1
    adc8:	123fe52e 	bgeu	r2,r8,ad60 <__pack_d+0x258>
    adcc:	00c00044 	movi	r3,1
    add0:	003fe306 	br	ad60 <__pack_d+0x258>
    add4:	0009883a 	mov	r4,zero
    add8:	0013883a 	mov	r9,zero
    addc:	000b883a 	mov	r5,zero
    ade0:	003fe406 	br	ad74 <__pack_d+0x26c>
    ade4:	4a47883a 	add	r3,r9,r9
    ade8:	008007c4 	movi	r2,31
    adec:	1105c83a 	sub	r2,r2,r4
    adf0:	1886983a 	sll	r3,r3,r2
    adf4:	4118d83a 	srl	r12,r8,r4
    adf8:	491ad83a 	srl	r13,r9,r4
    adfc:	1b18b03a 	or	r12,r3,r12
    ae00:	003fb506 	br	acd8 <__pack_d+0x1d0>
    ae04:	2806d07a 	srli	r3,r5,1
    ae08:	008007c4 	movi	r2,31
    ae0c:	1105c83a 	sub	r2,r2,r4
    ae10:	1896d83a 	srl	r11,r3,r2
    ae14:	2914983a 	sll	r10,r5,r4
    ae18:	003fb506 	br	acf0 <__pack_d+0x1e8>

0000ae1c <__unpack_d>:
    ae1c:	20c00117 	ldw	r3,4(r4)
    ae20:	22400017 	ldw	r9,0(r4)
    ae24:	00800434 	movhi	r2,16
    ae28:	10bfffc4 	addi	r2,r2,-1
    ae2c:	1808d53a 	srli	r4,r3,20
    ae30:	180cd7fa 	srli	r6,r3,31
    ae34:	1894703a 	and	r10,r3,r2
    ae38:	2201ffcc 	andi	r8,r4,2047
    ae3c:	281b883a 	mov	r13,r5
    ae40:	4817883a 	mov	r11,r9
    ae44:	29800115 	stw	r6,4(r5)
    ae48:	5019883a 	mov	r12,r10
    ae4c:	40001e1e 	bne	r8,zero,aec8 <__unpack_d+0xac>
    ae50:	4a84b03a 	or	r2,r9,r10
    ae54:	10001926 	beq	r2,zero,aebc <__unpack_d+0xa0>
    ae58:	4804d63a 	srli	r2,r9,24
    ae5c:	500c923a 	slli	r6,r10,8
    ae60:	013f0084 	movi	r4,-1022
    ae64:	00c40034 	movhi	r3,4096
    ae68:	18ffffc4 	addi	r3,r3,-1
    ae6c:	118cb03a 	or	r6,r2,r6
    ae70:	008000c4 	movi	r2,3
    ae74:	480a923a 	slli	r5,r9,8
    ae78:	68800015 	stw	r2,0(r13)
    ae7c:	69000215 	stw	r4,8(r13)
    ae80:	19800b36 	bltu	r3,r6,aeb0 <__unpack_d+0x94>
    ae84:	200f883a 	mov	r7,r4
    ae88:	1811883a 	mov	r8,r3
    ae8c:	2945883a 	add	r2,r5,r5
    ae90:	1149803a 	cmpltu	r4,r2,r5
    ae94:	3187883a 	add	r3,r6,r6
    ae98:	20c9883a 	add	r4,r4,r3
    ae9c:	100b883a 	mov	r5,r2
    aea0:	200d883a 	mov	r6,r4
    aea4:	39ffffc4 	addi	r7,r7,-1
    aea8:	413ff82e 	bgeu	r8,r4,ae8c <__unpack_d+0x70>
    aeac:	69c00215 	stw	r7,8(r13)
    aeb0:	69800415 	stw	r6,16(r13)
    aeb4:	69400315 	stw	r5,12(r13)
    aeb8:	f800283a 	ret
    aebc:	00800084 	movi	r2,2
    aec0:	28800015 	stw	r2,0(r5)
    aec4:	f800283a 	ret
    aec8:	0081ffc4 	movi	r2,2047
    aecc:	40800f26 	beq	r8,r2,af0c <__unpack_d+0xf0>
    aed0:	480cd63a 	srli	r6,r9,24
    aed4:	5006923a 	slli	r3,r10,8
    aed8:	4804923a 	slli	r2,r9,8
    aedc:	0009883a 	mov	r4,zero
    aee0:	30c6b03a 	or	r3,r6,r3
    aee4:	01440034 	movhi	r5,4096
    aee8:	110cb03a 	or	r6,r2,r4
    aeec:	423f0044 	addi	r8,r8,-1023
    aef0:	194eb03a 	or	r7,r3,r5
    aef4:	008000c4 	movi	r2,3
    aef8:	69c00415 	stw	r7,16(r13)
    aefc:	6a000215 	stw	r8,8(r13)
    af00:	68800015 	stw	r2,0(r13)
    af04:	69800315 	stw	r6,12(r13)
    af08:	f800283a 	ret
    af0c:	4a84b03a 	or	r2,r9,r10
    af10:	1000031e 	bne	r2,zero,af20 <__unpack_d+0x104>
    af14:	00800104 	movi	r2,4
    af18:	28800015 	stw	r2,0(r5)
    af1c:	f800283a 	ret
    af20:	0009883a 	mov	r4,zero
    af24:	01400234 	movhi	r5,8
    af28:	4904703a 	and	r2,r9,r4
    af2c:	5146703a 	and	r3,r10,r5
    af30:	10c4b03a 	or	r2,r2,r3
    af34:	10000526 	beq	r2,zero,af4c <__unpack_d+0x130>
    af38:	00800044 	movi	r2,1
    af3c:	68800015 	stw	r2,0(r13)
    af40:	6b000415 	stw	r12,16(r13)
    af44:	6ac00315 	stw	r11,12(r13)
    af48:	f800283a 	ret
    af4c:	68000015 	stw	zero,0(r13)
    af50:	003ffb06 	br	af40 <__unpack_d+0x124>

0000af54 <__fpcmp_parts_d>:
    af54:	21800017 	ldw	r6,0(r4)
    af58:	00c00044 	movi	r3,1
    af5c:	19800a2e 	bgeu	r3,r6,af88 <__fpcmp_parts_d+0x34>
    af60:	28800017 	ldw	r2,0(r5)
    af64:	1880082e 	bgeu	r3,r2,af88 <__fpcmp_parts_d+0x34>
    af68:	00c00104 	movi	r3,4
    af6c:	30c02626 	beq	r6,r3,b008 <__fpcmp_parts_d+0xb4>
    af70:	10c02226 	beq	r2,r3,affc <__fpcmp_parts_d+0xa8>
    af74:	00c00084 	movi	r3,2
    af78:	30c00526 	beq	r6,r3,af90 <__fpcmp_parts_d+0x3c>
    af7c:	10c0071e 	bne	r2,r3,af9c <__fpcmp_parts_d+0x48>
    af80:	20800117 	ldw	r2,4(r4)
    af84:	1000091e 	bne	r2,zero,afac <__fpcmp_parts_d+0x58>
    af88:	00800044 	movi	r2,1
    af8c:	f800283a 	ret
    af90:	10c01a1e 	bne	r2,r3,affc <__fpcmp_parts_d+0xa8>
    af94:	0005883a 	mov	r2,zero
    af98:	f800283a 	ret
    af9c:	22000117 	ldw	r8,4(r4)
    afa0:	28800117 	ldw	r2,4(r5)
    afa4:	40800326 	beq	r8,r2,afb4 <__fpcmp_parts_d+0x60>
    afa8:	403ff726 	beq	r8,zero,af88 <__fpcmp_parts_d+0x34>
    afac:	00bfffc4 	movi	r2,-1
    afb0:	f800283a 	ret
    afb4:	20c00217 	ldw	r3,8(r4)
    afb8:	28800217 	ldw	r2,8(r5)
    afbc:	10fffa16 	blt	r2,r3,afa8 <__fpcmp_parts_d+0x54>
    afc0:	18800916 	blt	r3,r2,afe8 <__fpcmp_parts_d+0x94>
    afc4:	21c00417 	ldw	r7,16(r4)
    afc8:	28c00417 	ldw	r3,16(r5)
    afcc:	21800317 	ldw	r6,12(r4)
    afd0:	28800317 	ldw	r2,12(r5)
    afd4:	19fff436 	bltu	r3,r7,afa8 <__fpcmp_parts_d+0x54>
    afd8:	38c00526 	beq	r7,r3,aff0 <__fpcmp_parts_d+0x9c>
    afdc:	38c00236 	bltu	r7,r3,afe8 <__fpcmp_parts_d+0x94>
    afe0:	19ffec1e 	bne	r3,r7,af94 <__fpcmp_parts_d+0x40>
    afe4:	30bfeb2e 	bgeu	r6,r2,af94 <__fpcmp_parts_d+0x40>
    afe8:	403fe71e 	bne	r8,zero,af88 <__fpcmp_parts_d+0x34>
    afec:	003fef06 	br	afac <__fpcmp_parts_d+0x58>
    aff0:	11bffa2e 	bgeu	r2,r6,afdc <__fpcmp_parts_d+0x88>
    aff4:	403fe426 	beq	r8,zero,af88 <__fpcmp_parts_d+0x34>
    aff8:	003fec06 	br	afac <__fpcmp_parts_d+0x58>
    affc:	28800117 	ldw	r2,4(r5)
    b000:	103fe11e 	bne	r2,zero,af88 <__fpcmp_parts_d+0x34>
    b004:	003fe906 	br	afac <__fpcmp_parts_d+0x58>
    b008:	11bfdd1e 	bne	r2,r6,af80 <__fpcmp_parts_d+0x2c>
    b00c:	28c00117 	ldw	r3,4(r5)
    b010:	20800117 	ldw	r2,4(r4)
    b014:	1885c83a 	sub	r2,r3,r2
    b018:	f800283a 	ret

0000b01c <__errno>:
    b01c:	00c00074 	movhi	r3,1
    b020:	18c17104 	addi	r3,r3,1476
    b024:	18800017 	ldw	r2,0(r3)
    b028:	f800283a 	ret

0000b02c <strlen>:
    b02c:	208000cc 	andi	r2,r4,3
    b030:	2011883a 	mov	r8,r4
    b034:	1000161e 	bne	r2,zero,b090 <strlen+0x64>
    b038:	20c00017 	ldw	r3,0(r4)
    b03c:	017fbff4 	movhi	r5,65279
    b040:	297fbfc4 	addi	r5,r5,-257
    b044:	01e02074 	movhi	r7,32897
    b048:	39e02004 	addi	r7,r7,-32640
    b04c:	1945883a 	add	r2,r3,r5
    b050:	11c4703a 	and	r2,r2,r7
    b054:	00c6303a 	nor	r3,zero,r3
    b058:	1886703a 	and	r3,r3,r2
    b05c:	18000c1e 	bne	r3,zero,b090 <strlen+0x64>
    b060:	280d883a 	mov	r6,r5
    b064:	380b883a 	mov	r5,r7
    b068:	21000104 	addi	r4,r4,4
    b06c:	20800017 	ldw	r2,0(r4)
    b070:	1187883a 	add	r3,r2,r6
    b074:	1946703a 	and	r3,r3,r5
    b078:	0084303a 	nor	r2,zero,r2
    b07c:	10c4703a 	and	r2,r2,r3
    b080:	103ff926 	beq	r2,zero,b068 <strlen+0x3c>
    b084:	20800007 	ldb	r2,0(r4)
    b088:	10000326 	beq	r2,zero,b098 <strlen+0x6c>
    b08c:	21000044 	addi	r4,r4,1
    b090:	20800007 	ldb	r2,0(r4)
    b094:	103ffd1e 	bne	r2,zero,b08c <strlen+0x60>
    b098:	2205c83a 	sub	r2,r4,r8
    b09c:	f800283a 	ret

0000b0a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b0a0:	defffe04 	addi	sp,sp,-8
    b0a4:	de00012e 	bgeu	sp,et,b0ac <alt_load+0xc>
    b0a8:	003da0fa 	break	3
    b0ac:	dfc00115 	stw	ra,4(sp)
    b0b0:	df000015 	stw	fp,0(sp)
    b0b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b0b8:	01000074 	movhi	r4,1
    b0bc:	21017e04 	addi	r4,r4,1528
    b0c0:	01400074 	movhi	r5,1
    b0c4:	297b3504 	addi	r5,r5,-4908
    b0c8:	01800074 	movhi	r6,1
    b0cc:	31817e04 	addi	r6,r6,1528
    b0d0:	000b1280 	call	b128 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b0d4:	01000034 	movhi	r4,0
    b0d8:	21000004 	addi	r4,r4,0
    b0dc:	01400834 	movhi	r5,32
    b0e0:	29400804 	addi	r5,r5,32
    b0e4:	01800834 	movhi	r6,32
    b0e8:	31807104 	addi	r6,r6,452
    b0ec:	000b1280 	call	b128 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b0f0:	01000074 	movhi	r4,1
    b0f4:	2139a604 	addi	r4,r4,-6504
    b0f8:	01400074 	movhi	r5,1
    b0fc:	2979a604 	addi	r5,r5,-6504
    b100:	01800074 	movhi	r6,1
    b104:	31bb3504 	addi	r6,r6,-4908
    b108:	000b1280 	call	b128 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b10c:	000d2840 	call	d284 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b110:	000d4d80 	call	d4d8 <alt_icache_flush_all>
}
    b114:	e037883a 	mov	sp,fp
    b118:	dfc00117 	ldw	ra,4(sp)
    b11c:	df000017 	ldw	fp,0(sp)
    b120:	dec00204 	addi	sp,sp,8
    b124:	f800283a 	ret

0000b128 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b128:	defffc04 	addi	sp,sp,-16
    b12c:	de00012e 	bgeu	sp,et,b134 <alt_load_section+0xc>
    b130:	003da0fa 	break	3
    b134:	df000315 	stw	fp,12(sp)
    b138:	df000304 	addi	fp,sp,12
    b13c:	e13ffd15 	stw	r4,-12(fp)
    b140:	e17ffe15 	stw	r5,-8(fp)
    b144:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b148:	e0fffe17 	ldw	r3,-8(fp)
    b14c:	e0bffd17 	ldw	r2,-12(fp)
    b150:	18800e26 	beq	r3,r2,b18c <alt_load_section+0x64>
  {
    while( to != end )
    b154:	00000a06 	br	b180 <alt_load_section+0x58>
    {
      *to++ = *from++;
    b158:	e0bffd17 	ldw	r2,-12(fp)
    b15c:	10c00017 	ldw	r3,0(r2)
    b160:	e0bffe17 	ldw	r2,-8(fp)
    b164:	10c00015 	stw	r3,0(r2)
    b168:	e0bffe17 	ldw	r2,-8(fp)
    b16c:	10800104 	addi	r2,r2,4
    b170:	e0bffe15 	stw	r2,-8(fp)
    b174:	e0bffd17 	ldw	r2,-12(fp)
    b178:	10800104 	addi	r2,r2,4
    b17c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b180:	e0fffe17 	ldw	r3,-8(fp)
    b184:	e0bfff17 	ldw	r2,-4(fp)
    b188:	18bff31e 	bne	r3,r2,b158 <alt_load_section+0x30>
    {
      *to++ = *from++;
    }
  }
}
    b18c:	e037883a 	mov	sp,fp
    b190:	df000017 	ldw	fp,0(sp)
    b194:	dec00104 	addi	sp,sp,4
    b198:	f800283a 	ret

0000b19c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b19c:	defffd04 	addi	sp,sp,-12
    b1a0:	de00012e 	bgeu	sp,et,b1a8 <alt_main+0xc>
    b1a4:	003da0fa 	break	3
    b1a8:	dfc00215 	stw	ra,8(sp)
    b1ac:	df000115 	stw	fp,4(sp)
    b1b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b1b4:	0009883a 	mov	r4,zero
    b1b8:	000b2480 	call	b248 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b1bc:	000b2840 	call	b284 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b1c0:	01000074 	movhi	r4,1
    b1c4:	213a8604 	addi	r4,r4,-5608
    b1c8:	01400074 	movhi	r5,1
    b1cc:	297a8604 	addi	r5,r5,-5608
    b1d0:	01800074 	movhi	r6,1
    b1d4:	31ba8604 	addi	r6,r6,-5608
    b1d8:	000d8d00 	call	d8d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b1dc:	000d4000 	call	d400 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b1e0:	01000074 	movhi	r4,1
    b1e4:	21351b04 	addi	r4,r4,-11156
    b1e8:	000e1440 	call	e144 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b1ec:	d126d317 	ldw	r4,-25780(gp)
    b1f0:	d166d417 	ldw	r5,-25776(gp)
    b1f4:	d1a6d517 	ldw	r6,-25772(gp)
    b1f8:	0003aec0 	call	3aec <main>
    b1fc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b200:	01000044 	movi	r4,1
    b204:	000d1140 	call	d114 <close>
  exit (result);
    b208:	e13fff17 	ldw	r4,-4(fp)
    b20c:	000e1580 	call	e158 <exit>

0000b210 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    b210:	defffd04 	addi	sp,sp,-12
    b214:	de00012e 	bgeu	sp,et,b21c <usleep+0xc>
    b218:	003da0fa 	break	3
    b21c:	dfc00215 	stw	ra,8(sp)
    b220:	df000115 	stw	fp,4(sp)
    b224:	df000104 	addi	fp,sp,4
    b228:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    b22c:	e13fff17 	ldw	r4,-4(fp)
    b230:	000cfb00 	call	cfb0 <alt_busy_sleep>
}
    b234:	e037883a 	mov	sp,fp
    b238:	dfc00117 	ldw	ra,4(sp)
    b23c:	df000017 	ldw	fp,0(sp)
    b240:	dec00204 	addi	sp,sp,8
    b244:	f800283a 	ret

0000b248 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b248:	defffd04 	addi	sp,sp,-12
    b24c:	de00012e 	bgeu	sp,et,b254 <alt_irq_init+0xc>
    b250:	003da0fa 	break	3
    b254:	dfc00215 	stw	ra,8(sp)
    b258:	df000115 	stw	fp,4(sp)
    b25c:	df000104 	addi	fp,sp,4
    b260:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS_CPU, NIOS_CPU);
    b264:	000de800 	call	de80 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b268:	00800044 	movi	r2,1
    b26c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b270:	e037883a 	mov	sp,fp
    b274:	dfc00117 	ldw	ra,4(sp)
    b278:	df000017 	ldw	fp,0(sp)
    b27c:	dec00204 	addi	sp,sp,8
    b280:	f800283a 	ret

0000b284 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b284:	defffe04 	addi	sp,sp,-8
    b288:	de00012e 	bgeu	sp,et,b290 <alt_sys_init+0xc>
    b28c:	003da0fa 	break	3
    b290:	dfc00115 	stw	ra,4(sp)
    b294:	df000015 	stw	fp,0(sp)
    b298:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    b29c:	01000074 	movhi	r4,1
    b2a0:	213c4d04 	addi	r4,r4,-3788
    b2a4:	000b883a 	mov	r5,zero
    b2a8:	000d883a 	mov	r6,zero
    b2ac:	000b4900 	call	b490 <altera_avalon_jtag_uart_init>
    b2b0:	01000074 	movhi	r4,1
    b2b4:	213c4304 	addi	r4,r4,-3828
    b2b8:	000b2e80 	call	b2e8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, LCD);
    b2bc:	01000074 	movhi	r4,1
    b2c0:	21006504 	addi	r4,r4,404
    b2c4:	000ccb00 	call	ccb0 <altera_avalon_lcd_16207_init>
    b2c8:	01000074 	movhi	r4,1
    b2cc:	21005b04 	addi	r4,r4,364
    b2d0:	000b2e80 	call	b2e8 <alt_dev_reg>
}
    b2d4:	e037883a 	mov	sp,fp
    b2d8:	dfc00117 	ldw	ra,4(sp)
    b2dc:	df000017 	ldw	fp,0(sp)
    b2e0:	dec00204 	addi	sp,sp,8
    b2e4:	f800283a 	ret

0000b2e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b2e8:	defffd04 	addi	sp,sp,-12
    b2ec:	de00012e 	bgeu	sp,et,b2f4 <alt_dev_reg+0xc>
    b2f0:	003da0fa 	break	3
    b2f4:	dfc00215 	stw	ra,8(sp)
    b2f8:	df000115 	stw	fp,4(sp)
    b2fc:	df000104 	addi	fp,sp,4
    b300:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b304:	e13fff17 	ldw	r4,-4(fp)
    b308:	01400074 	movhi	r5,1
    b30c:	29417604 	addi	r5,r5,1496
    b310:	000d2dc0 	call	d2dc <alt_dev_llist_insert>
}
    b314:	e037883a 	mov	sp,fp
    b318:	dfc00117 	ldw	ra,4(sp)
    b31c:	df000017 	ldw	fp,0(sp)
    b320:	dec00204 	addi	sp,sp,8
    b324:	f800283a 	ret

0000b328 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b328:	defffa04 	addi	sp,sp,-24
    b32c:	de00012e 	bgeu	sp,et,b334 <altera_avalon_jtag_uart_read_fd+0xc>
    b330:	003da0fa 	break	3
    b334:	dfc00515 	stw	ra,20(sp)
    b338:	df000415 	stw	fp,16(sp)
    b33c:	df000404 	addi	fp,sp,16
    b340:	e13ffd15 	stw	r4,-12(fp)
    b344:	e17ffe15 	stw	r5,-8(fp)
    b348:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b34c:	e0bffd17 	ldw	r2,-12(fp)
    b350:	10800017 	ldw	r2,0(r2)
    b354:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b358:	e0bffc17 	ldw	r2,-16(fp)
    b35c:	11000a04 	addi	r4,r2,40
    b360:	e0bffd17 	ldw	r2,-12(fp)
    b364:	11c00217 	ldw	r7,8(r2)
    b368:	e17ffe17 	ldw	r5,-8(fp)
    b36c:	e1bfff17 	ldw	r6,-4(fp)
    b370:	000b9b80 	call	b9b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b374:	e037883a 	mov	sp,fp
    b378:	dfc00117 	ldw	ra,4(sp)
    b37c:	df000017 	ldw	fp,0(sp)
    b380:	dec00204 	addi	sp,sp,8
    b384:	f800283a 	ret

0000b388 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b388:	defffa04 	addi	sp,sp,-24
    b38c:	de00012e 	bgeu	sp,et,b394 <altera_avalon_jtag_uart_write_fd+0xc>
    b390:	003da0fa 	break	3
    b394:	dfc00515 	stw	ra,20(sp)
    b398:	df000415 	stw	fp,16(sp)
    b39c:	df000404 	addi	fp,sp,16
    b3a0:	e13ffd15 	stw	r4,-12(fp)
    b3a4:	e17ffe15 	stw	r5,-8(fp)
    b3a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b3ac:	e0bffd17 	ldw	r2,-12(fp)
    b3b0:	10800017 	ldw	r2,0(r2)
    b3b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b3b8:	e0bffc17 	ldw	r2,-16(fp)
    b3bc:	11000a04 	addi	r4,r2,40
    b3c0:	e0bffd17 	ldw	r2,-12(fp)
    b3c4:	11c00217 	ldw	r7,8(r2)
    b3c8:	e17ffe17 	ldw	r5,-8(fp)
    b3cc:	e1bfff17 	ldw	r6,-4(fp)
    b3d0:	000bbe40 	call	bbe4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b3d4:	e037883a 	mov	sp,fp
    b3d8:	dfc00117 	ldw	ra,4(sp)
    b3dc:	df000017 	ldw	fp,0(sp)
    b3e0:	dec00204 	addi	sp,sp,8
    b3e4:	f800283a 	ret

0000b3e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b3e8:	defffc04 	addi	sp,sp,-16
    b3ec:	de00012e 	bgeu	sp,et,b3f4 <altera_avalon_jtag_uart_close_fd+0xc>
    b3f0:	003da0fa 	break	3
    b3f4:	dfc00315 	stw	ra,12(sp)
    b3f8:	df000215 	stw	fp,8(sp)
    b3fc:	df000204 	addi	fp,sp,8
    b400:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b404:	e0bfff17 	ldw	r2,-4(fp)
    b408:	10800017 	ldw	r2,0(r2)
    b40c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b410:	e0bffe17 	ldw	r2,-8(fp)
    b414:	11000a04 	addi	r4,r2,40
    b418:	e0bfff17 	ldw	r2,-4(fp)
    b41c:	11400217 	ldw	r5,8(r2)
    b420:	000b8400 	call	b840 <altera_avalon_jtag_uart_close>
}
    b424:	e037883a 	mov	sp,fp
    b428:	dfc00117 	ldw	ra,4(sp)
    b42c:	df000017 	ldw	fp,0(sp)
    b430:	dec00204 	addi	sp,sp,8
    b434:	f800283a 	ret

0000b438 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b438:	defffa04 	addi	sp,sp,-24
    b43c:	de00012e 	bgeu	sp,et,b444 <altera_avalon_jtag_uart_ioctl_fd+0xc>
    b440:	003da0fa 	break	3
    b444:	dfc00515 	stw	ra,20(sp)
    b448:	df000415 	stw	fp,16(sp)
    b44c:	df000404 	addi	fp,sp,16
    b450:	e13ffd15 	stw	r4,-12(fp)
    b454:	e17ffe15 	stw	r5,-8(fp)
    b458:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b45c:	e0bffd17 	ldw	r2,-12(fp)
    b460:	10800017 	ldw	r2,0(r2)
    b464:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b468:	e0bffc17 	ldw	r2,-16(fp)
    b46c:	11000a04 	addi	r4,r2,40
    b470:	e17ffe17 	ldw	r5,-8(fp)
    b474:	e1bfff17 	ldw	r6,-4(fp)
    b478:	000b8bc0 	call	b8bc <altera_avalon_jtag_uart_ioctl>
}
    b47c:	e037883a 	mov	sp,fp
    b480:	dfc00117 	ldw	ra,4(sp)
    b484:	df000017 	ldw	fp,0(sp)
    b488:	dec00204 	addi	sp,sp,8
    b48c:	f800283a 	ret

0000b490 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b490:	defffa04 	addi	sp,sp,-24
    b494:	de00012e 	bgeu	sp,et,b49c <altera_avalon_jtag_uart_init+0xc>
    b498:	003da0fa 	break	3
    b49c:	dfc00515 	stw	ra,20(sp)
    b4a0:	df000415 	stw	fp,16(sp)
    b4a4:	df000404 	addi	fp,sp,16
    b4a8:	e13ffd15 	stw	r4,-12(fp)
    b4ac:	e17ffe15 	stw	r5,-8(fp)
    b4b0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b4b4:	e0fffd17 	ldw	r3,-12(fp)
    b4b8:	00800044 	movi	r2,1
    b4bc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b4c0:	e0bffd17 	ldw	r2,-12(fp)
    b4c4:	10800017 	ldw	r2,0(r2)
    b4c8:	11000104 	addi	r4,r2,4
    b4cc:	e0bffd17 	ldw	r2,-12(fp)
    b4d0:	10800817 	ldw	r2,32(r2)
    b4d4:	1007883a 	mov	r3,r2
    b4d8:	2005883a 	mov	r2,r4
    b4dc:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b4e0:	e13ffe17 	ldw	r4,-8(fp)
    b4e4:	e17fff17 	ldw	r5,-4(fp)
    b4e8:	d8000015 	stw	zero,0(sp)
    b4ec:	01800074 	movhi	r6,1
    b4f0:	31ad5604 	addi	r6,r6,-19112
    b4f4:	e1fffd17 	ldw	r7,-12(fp)
    b4f8:	000d4fc0 	call	d4fc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b4fc:	e0bffd17 	ldw	r2,-12(fp)
    b500:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b504:	e0bffd17 	ldw	r2,-12(fp)
    b508:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b50c:	00800074 	movhi	r2,1
    b510:	1087e404 	addi	r2,r2,8080
    b514:	10800017 	ldw	r2,0(r2)
    b518:	100b883a 	mov	r5,r2
    b51c:	01800074 	movhi	r6,1
    b520:	31ade204 	addi	r6,r6,-18552
    b524:	e1fffd17 	ldw	r7,-12(fp)
    b528:	000ce540 	call	ce54 <alt_alarm_start>
    b52c:	1004403a 	cmpge	r2,r2,zero
    b530:	1000041e 	bne	r2,zero,b544 <altera_avalon_jtag_uart_init+0xb4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b534:	e0fffd17 	ldw	r3,-12(fp)
    b538:	00a00034 	movhi	r2,32768
    b53c:	10bfffc4 	addi	r2,r2,-1
    b540:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b544:	e037883a 	mov	sp,fp
    b548:	dfc00117 	ldw	ra,4(sp)
    b54c:	df000017 	ldw	fp,0(sp)
    b550:	dec00204 	addi	sp,sp,8
    b554:	f800283a 	ret

0000b558 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b558:	defff804 	addi	sp,sp,-32
    b55c:	de00012e 	bgeu	sp,et,b564 <altera_avalon_jtag_uart_irq+0xc>
    b560:	003da0fa 	break	3
    b564:	df000715 	stw	fp,28(sp)
    b568:	df000704 	addi	fp,sp,28
    b56c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b570:	e0bfff17 	ldw	r2,-4(fp)
    b574:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    b578:	e0bffe17 	ldw	r2,-8(fp)
    b57c:	10800017 	ldw	r2,0(r2)
    b580:	e0bffd15 	stw	r2,-12(fp)
    b584:	00000006 	br	b588 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b588:	e0bffd17 	ldw	r2,-12(fp)
    b58c:	10800104 	addi	r2,r2,4
    b590:	10800037 	ldwio	r2,0(r2)
    b594:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    b598:	e0bffc17 	ldw	r2,-16(fp)
    b59c:	1080c00c 	andi	r2,r2,768
    b5a0:	1005003a 	cmpeq	r2,r2,zero
    b5a4:	1000741e 	bne	r2,zero,b778 <altera_avalon_jtag_uart_irq+0x220>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    b5a8:	e0bffc17 	ldw	r2,-16(fp)
    b5ac:	1080400c 	andi	r2,r2,256
    b5b0:	1005003a 	cmpeq	r2,r2,zero
    b5b4:	1000351e 	bne	r2,zero,b68c <altera_avalon_jtag_uart_irq+0x134>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    b5b8:	00800074 	movhi	r2,1
    b5bc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b5c0:	e0bffe17 	ldw	r2,-8(fp)
    b5c4:	10800a17 	ldw	r2,40(r2)
    b5c8:	10800044 	addi	r2,r2,1
    b5cc:	1081ffcc 	andi	r2,r2,2047
    b5d0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    b5d4:	e0bffe17 	ldw	r2,-8(fp)
    b5d8:	10c00b17 	ldw	r3,44(r2)
    b5dc:	e0bffa17 	ldw	r2,-24(fp)
    b5e0:	18801626 	beq	r3,r2,b63c <altera_avalon_jtag_uart_irq+0xe4>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b5e4:	e0bffd17 	ldw	r2,-12(fp)
    b5e8:	10800037 	ldwio	r2,0(r2)
    b5ec:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    b5f0:	e0bffb17 	ldw	r2,-20(fp)
    b5f4:	10a0000c 	andi	r2,r2,32768
    b5f8:	1005003a 	cmpeq	r2,r2,zero
    b5fc:	10000f1e 	bne	r2,zero,b63c <altera_avalon_jtag_uart_irq+0xe4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b600:	e0bffe17 	ldw	r2,-8(fp)
    b604:	10c00a17 	ldw	r3,40(r2)
    b608:	e0bffb17 	ldw	r2,-20(fp)
    b60c:	1009883a 	mov	r4,r2
    b610:	e0bffe17 	ldw	r2,-8(fp)
    b614:	1885883a 	add	r2,r3,r2
    b618:	10800e04 	addi	r2,r2,56
    b61c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b620:	e0bffe17 	ldw	r2,-8(fp)
    b624:	10800a17 	ldw	r2,40(r2)
    b628:	10800044 	addi	r2,r2,1
    b62c:	10c1ffcc 	andi	r3,r2,2047
    b630:	e0bffe17 	ldw	r2,-8(fp)
    b634:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    b638:	003fe106 	br	b5c0 <altera_avalon_jtag_uart_irq+0x68>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    b63c:	e0bffb17 	ldw	r2,-20(fp)
    b640:	10bfffec 	andhi	r2,r2,65535
    b644:	1005003a 	cmpeq	r2,r2,zero
    b648:	1000101e 	bne	r2,zero,b68c <altera_avalon_jtag_uart_irq+0x134>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b64c:	e0bffe17 	ldw	r2,-8(fp)
    b650:	10c00817 	ldw	r3,32(r2)
    b654:	00bfff84 	movi	r2,-2
    b658:	1886703a 	and	r3,r3,r2
    b65c:	e0bffe17 	ldw	r2,-8(fp)
    b660:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    b664:	e0bffd17 	ldw	r2,-12(fp)
    b668:	11000104 	addi	r4,r2,4
    b66c:	e0bffe17 	ldw	r2,-8(fp)
    b670:	10800817 	ldw	r2,32(r2)
    b674:	1007883a 	mov	r3,r2
    b678:	2005883a 	mov	r2,r4
    b67c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b680:	e0bffd17 	ldw	r2,-12(fp)
    b684:	10800104 	addi	r2,r2,4
    b688:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    b68c:	e0bffc17 	ldw	r2,-16(fp)
    b690:	1080800c 	andi	r2,r2,512
    b694:	1005003a 	cmpeq	r2,r2,zero
    b698:	103fbb1e 	bne	r2,zero,b588 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    b69c:	e0bffc17 	ldw	r2,-16(fp)
    b6a0:	10bfffec 	andhi	r2,r2,65535
    b6a4:	1004d43a 	srli	r2,r2,16
    b6a8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    b6ac:	00001506 	br	b704 <altera_avalon_jtag_uart_irq+0x1ac>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    b6b0:	e13ffd17 	ldw	r4,-12(fp)
    b6b4:	e0bffe17 	ldw	r2,-8(fp)
    b6b8:	10c00d17 	ldw	r3,52(r2)
    b6bc:	e0bffe17 	ldw	r2,-8(fp)
    b6c0:	1885883a 	add	r2,r3,r2
    b6c4:	10820e04 	addi	r2,r2,2104
    b6c8:	10800003 	ldbu	r2,0(r2)
    b6cc:	10c03fcc 	andi	r3,r2,255
    b6d0:	18c0201c 	xori	r3,r3,128
    b6d4:	18ffe004 	addi	r3,r3,-128
    b6d8:	2005883a 	mov	r2,r4
    b6dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b6e0:	e0bffe17 	ldw	r2,-8(fp)
    b6e4:	10800d17 	ldw	r2,52(r2)
    b6e8:	10800044 	addi	r2,r2,1
    b6ec:	10c1ffcc 	andi	r3,r2,2047
    b6f0:	e0bffe17 	ldw	r2,-8(fp)
    b6f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    b6f8:	e0bff917 	ldw	r2,-28(fp)
    b6fc:	10bfffc4 	addi	r2,r2,-1
    b700:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    b704:	e0bff917 	ldw	r2,-28(fp)
    b708:	1005003a 	cmpeq	r2,r2,zero
    b70c:	1000051e 	bne	r2,zero,b724 <altera_avalon_jtag_uart_irq+0x1cc>
    b710:	e0bffe17 	ldw	r2,-8(fp)
    b714:	10c00d17 	ldw	r3,52(r2)
    b718:	e0bffe17 	ldw	r2,-8(fp)
    b71c:	10800c17 	ldw	r2,48(r2)
    b720:	18bfe31e 	bne	r3,r2,b6b0 <altera_avalon_jtag_uart_irq+0x158>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    b724:	e0bff917 	ldw	r2,-28(fp)
    b728:	1005003a 	cmpeq	r2,r2,zero
    b72c:	103f961e 	bne	r2,zero,b588 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b730:	e0bffe17 	ldw	r2,-8(fp)
    b734:	10c00817 	ldw	r3,32(r2)
    b738:	00bfff44 	movi	r2,-3
    b73c:	1886703a 	and	r3,r3,r2
    b740:	e0bffe17 	ldw	r2,-8(fp)
    b744:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b748:	e0bffe17 	ldw	r2,-8(fp)
    b74c:	10800017 	ldw	r2,0(r2)
    b750:	11000104 	addi	r4,r2,4
    b754:	e0bffe17 	ldw	r2,-8(fp)
    b758:	10800817 	ldw	r2,32(r2)
    b75c:	1007883a 	mov	r3,r2
    b760:	2005883a 	mov	r2,r4
    b764:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b768:	e0bffd17 	ldw	r2,-12(fp)
    b76c:	10800104 	addi	r2,r2,4
    b770:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    b774:	003f8406 	br	b588 <altera_avalon_jtag_uart_irq+0x30>
}
    b778:	e037883a 	mov	sp,fp
    b77c:	df000017 	ldw	fp,0(sp)
    b780:	dec00104 	addi	sp,sp,4
    b784:	f800283a 	ret

0000b788 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    b788:	defffc04 	addi	sp,sp,-16
    b78c:	de00012e 	bgeu	sp,et,b794 <altera_avalon_jtag_uart_timeout+0xc>
    b790:	003da0fa 	break	3
    b794:	df000315 	stw	fp,12(sp)
    b798:	df000304 	addi	fp,sp,12
    b79c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    b7a0:	e0bfff17 	ldw	r2,-4(fp)
    b7a4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    b7a8:	e0bffe17 	ldw	r2,-8(fp)
    b7ac:	10800017 	ldw	r2,0(r2)
    b7b0:	10800104 	addi	r2,r2,4
    b7b4:	10800037 	ldwio	r2,0(r2)
    b7b8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    b7bc:	e0bffd17 	ldw	r2,-12(fp)
    b7c0:	1081000c 	andi	r2,r2,1024
    b7c4:	1005003a 	cmpeq	r2,r2,zero
    b7c8:	10000c1e 	bne	r2,zero,b7fc <altera_avalon_jtag_uart_timeout+0x74>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    b7cc:	e0bffe17 	ldw	r2,-8(fp)
    b7d0:	10800017 	ldw	r2,0(r2)
    b7d4:	11000104 	addi	r4,r2,4
    b7d8:	e0bffe17 	ldw	r2,-8(fp)
    b7dc:	10800817 	ldw	r2,32(r2)
    b7e0:	10810014 	ori	r2,r2,1024
    b7e4:	1007883a 	mov	r3,r2
    b7e8:	2005883a 	mov	r2,r4
    b7ec:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    b7f0:	e0bffe17 	ldw	r2,-8(fp)
    b7f4:	10000915 	stw	zero,36(r2)
    b7f8:	00000a06 	br	b824 <altera_avalon_jtag_uart_timeout+0x9c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    b7fc:	e0bffe17 	ldw	r2,-8(fp)
    b800:	10c00917 	ldw	r3,36(r2)
    b804:	00a00034 	movhi	r2,32768
    b808:	10bfff04 	addi	r2,r2,-4
    b80c:	10c00536 	bltu	r2,r3,b824 <altera_avalon_jtag_uart_timeout+0x9c>
    sp->host_inactive++;
    b810:	e0bffe17 	ldw	r2,-8(fp)
    b814:	10800917 	ldw	r2,36(r2)
    b818:	10c00044 	addi	r3,r2,1
    b81c:	e0bffe17 	ldw	r2,-8(fp)
    b820:	10c00915 	stw	r3,36(r2)
    b824:	00800074 	movhi	r2,1
    b828:	1087e404 	addi	r2,r2,8080
    b82c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    b830:	e037883a 	mov	sp,fp
    b834:	df000017 	ldw	fp,0(sp)
    b838:	dec00104 	addi	sp,sp,4
    b83c:	f800283a 	ret

0000b840 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b840:	defffc04 	addi	sp,sp,-16
    b844:	de00012e 	bgeu	sp,et,b84c <altera_avalon_jtag_uart_close+0xc>
    b848:	003da0fa 	break	3
    b84c:	df000315 	stw	fp,12(sp)
    b850:	df000304 	addi	fp,sp,12
    b854:	e13ffd15 	stw	r4,-12(fp)
    b858:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b85c:	00000706 	br	b87c <altera_avalon_jtag_uart_close+0x3c>
    if (flags & O_NONBLOCK) {
    b860:	e0bffe17 	ldw	r2,-8(fp)
    b864:	1090000c 	andi	r2,r2,16384
    b868:	1005003a 	cmpeq	r2,r2,zero
    b86c:	1000031e 	bne	r2,zero,b87c <altera_avalon_jtag_uart_close+0x3c>
      return -EWOULDBLOCK; 
    b870:	00bffd44 	movi	r2,-11
    b874:	e0bfff15 	stw	r2,-4(fp)
    b878:	00000b06 	br	b8a8 <altera_avalon_jtag_uart_close+0x68>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b87c:	e0bffd17 	ldw	r2,-12(fp)
    b880:	10c00d17 	ldw	r3,52(r2)
    b884:	e0bffd17 	ldw	r2,-12(fp)
    b888:	10800c17 	ldw	r2,48(r2)
    b88c:	18800526 	beq	r3,r2,b8a4 <altera_avalon_jtag_uart_close+0x64>
    b890:	e0bffd17 	ldw	r2,-12(fp)
    b894:	10c00917 	ldw	r3,36(r2)
    b898:	e0bffd17 	ldw	r2,-12(fp)
    b89c:	10800117 	ldw	r2,4(r2)
    b8a0:	18bfef36 	bltu	r3,r2,b860 <altera_avalon_jtag_uart_close+0x20>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b8a4:	e03fff15 	stw	zero,-4(fp)
    b8a8:	e0bfff17 	ldw	r2,-4(fp)
}
    b8ac:	e037883a 	mov	sp,fp
    b8b0:	df000017 	ldw	fp,0(sp)
    b8b4:	dec00104 	addi	sp,sp,4
    b8b8:	f800283a 	ret

0000b8bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b8bc:	defff804 	addi	sp,sp,-32
    b8c0:	de00012e 	bgeu	sp,et,b8c8 <altera_avalon_jtag_uart_ioctl+0xc>
    b8c4:	003da0fa 	break	3
    b8c8:	df000715 	stw	fp,28(sp)
    b8cc:	df000704 	addi	fp,sp,28
    b8d0:	e13ffb15 	stw	r4,-20(fp)
    b8d4:	e17ffc15 	stw	r5,-16(fp)
    b8d8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    b8dc:	00bff9c4 	movi	r2,-25
    b8e0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    b8e4:	e0bffc17 	ldw	r2,-16(fp)
    b8e8:	e0bfff15 	stw	r2,-4(fp)
    b8ec:	e0ffff17 	ldw	r3,-4(fp)
    b8f0:	189a8060 	cmpeqi	r2,r3,27137
    b8f4:	1000041e 	bne	r2,zero,b908 <altera_avalon_jtag_uart_ioctl+0x4c>
    b8f8:	e0ffff17 	ldw	r3,-4(fp)
    b8fc:	189a80a0 	cmpeqi	r2,r3,27138
    b900:	10001b1e 	bne	r2,zero,b970 <altera_avalon_jtag_uart_ioctl+0xb4>
    b904:	00002706 	br	b9a4 <altera_avalon_jtag_uart_ioctl+0xe8>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b908:	e0bffb17 	ldw	r2,-20(fp)
    b90c:	10c00117 	ldw	r3,4(r2)
    b910:	00a00034 	movhi	r2,32768
    b914:	10bfffc4 	addi	r2,r2,-1
    b918:	18802226 	beq	r3,r2,b9a4 <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      int timeout = *((int *)arg);
    b91c:	e0bffd17 	ldw	r2,-12(fp)
    b920:	10800017 	ldw	r2,0(r2)
    b924:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b928:	e0bff917 	ldw	r2,-28(fp)
    b92c:	10800090 	cmplti	r2,r2,2
    b930:	1000071e 	bne	r2,zero,b950 <altera_avalon_jtag_uart_ioctl+0x94>
    b934:	e0fff917 	ldw	r3,-28(fp)
    b938:	00a00034 	movhi	r2,32768
    b93c:	10bfffc4 	addi	r2,r2,-1
    b940:	18800326 	beq	r3,r2,b950 <altera_avalon_jtag_uart_ioctl+0x94>
    b944:	e0bff917 	ldw	r2,-28(fp)
    b948:	e0bffe15 	stw	r2,-8(fp)
    b94c:	00000306 	br	b95c <altera_avalon_jtag_uart_ioctl+0xa0>
    b950:	00e00034 	movhi	r3,32768
    b954:	18ffff84 	addi	r3,r3,-2
    b958:	e0fffe15 	stw	r3,-8(fp)
    b95c:	e0bffb17 	ldw	r2,-20(fp)
    b960:	e0fffe17 	ldw	r3,-8(fp)
    b964:	10c00115 	stw	r3,4(r2)
      rc = 0;
    b968:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    b96c:	00000d06 	br	b9a4 <altera_avalon_jtag_uart_ioctl+0xe8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b970:	e0bffb17 	ldw	r2,-20(fp)
    b974:	10c00117 	ldw	r3,4(r2)
    b978:	00a00034 	movhi	r2,32768
    b97c:	10bfffc4 	addi	r2,r2,-1
    b980:	18800826 	beq	r3,r2,b9a4 <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b984:	e13ffd17 	ldw	r4,-12(fp)
    b988:	e0bffb17 	ldw	r2,-20(fp)
    b98c:	10c00917 	ldw	r3,36(r2)
    b990:	e0bffb17 	ldw	r2,-20(fp)
    b994:	10800117 	ldw	r2,4(r2)
    b998:	1885803a 	cmpltu	r2,r3,r2
    b99c:	20800015 	stw	r2,0(r4)
      rc = 0;
    b9a0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    b9a4:	e0bffa17 	ldw	r2,-24(fp)
}
    b9a8:	e037883a 	mov	sp,fp
    b9ac:	df000017 	ldw	fp,0(sp)
    b9b0:	dec00104 	addi	sp,sp,4
    b9b4:	f800283a 	ret

0000b9b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b9b8:	defff204 	addi	sp,sp,-56
    b9bc:	de00012e 	bgeu	sp,et,b9c4 <altera_avalon_jtag_uart_read+0xc>
    b9c0:	003da0fa 	break	3
    b9c4:	dfc00d15 	stw	ra,52(sp)
    b9c8:	df000c15 	stw	fp,48(sp)
    b9cc:	df000c04 	addi	fp,sp,48
    b9d0:	e13ffb15 	stw	r4,-20(fp)
    b9d4:	e17ffc15 	stw	r5,-16(fp)
    b9d8:	e1bffd15 	stw	r6,-12(fp)
    b9dc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    b9e0:	e0bffc17 	ldw	r2,-16(fp)
    b9e4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b9e8:	00004806 	br	bb0c <altera_avalon_jtag_uart_read+0x154>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b9ec:	e0bffb17 	ldw	r2,-20(fp)
    b9f0:	10800a17 	ldw	r2,40(r2)
    b9f4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    b9f8:	e0bffb17 	ldw	r2,-20(fp)
    b9fc:	10800b17 	ldw	r2,44(r2)
    ba00:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    ba04:	e0fff717 	ldw	r3,-36(fp)
    ba08:	e0bff617 	ldw	r2,-40(fp)
    ba0c:	18800536 	bltu	r3,r2,ba24 <altera_avalon_jtag_uart_read+0x6c>
        n = in - out;
    ba10:	e0bff717 	ldw	r2,-36(fp)
    ba14:	e0fff617 	ldw	r3,-40(fp)
    ba18:	10c5c83a 	sub	r2,r2,r3
    ba1c:	e0bff815 	stw	r2,-32(fp)
    ba20:	00000406 	br	ba34 <altera_avalon_jtag_uart_read+0x7c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ba24:	00820004 	movi	r2,2048
    ba28:	e0fff617 	ldw	r3,-40(fp)
    ba2c:	10c5c83a 	sub	r2,r2,r3
    ba30:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    ba34:	e0bff817 	ldw	r2,-32(fp)
    ba38:	1005003a 	cmpeq	r2,r2,zero
    ba3c:	10001f1e 	bne	r2,zero,babc <altera_avalon_jtag_uart_read+0x104>
        break; /* No more data available */

      if (n > space)
    ba40:	e0fffd17 	ldw	r3,-12(fp)
    ba44:	e0bff817 	ldw	r2,-32(fp)
    ba48:	1880022e 	bgeu	r3,r2,ba54 <altera_avalon_jtag_uart_read+0x9c>
        n = space;
    ba4c:	e0bffd17 	ldw	r2,-12(fp)
    ba50:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ba54:	e0bffb17 	ldw	r2,-20(fp)
    ba58:	10c00e04 	addi	r3,r2,56
    ba5c:	e0bff617 	ldw	r2,-40(fp)
    ba60:	1887883a 	add	r3,r3,r2
    ba64:	e0bffa17 	ldw	r2,-24(fp)
    ba68:	1009883a 	mov	r4,r2
    ba6c:	180b883a 	mov	r5,r3
    ba70:	e1bff817 	ldw	r6,-32(fp)
    ba74:	000e2040 	call	e204 <memcpy>
      ptr   += n;
    ba78:	e0fff817 	ldw	r3,-32(fp)
    ba7c:	e0bffa17 	ldw	r2,-24(fp)
    ba80:	10c5883a 	add	r2,r2,r3
    ba84:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    ba88:	e0fffd17 	ldw	r3,-12(fp)
    ba8c:	e0bff817 	ldw	r2,-32(fp)
    ba90:	1885c83a 	sub	r2,r3,r2
    ba94:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ba98:	e0fff617 	ldw	r3,-40(fp)
    ba9c:	e0bff817 	ldw	r2,-32(fp)
    baa0:	1885883a 	add	r2,r3,r2
    baa4:	10c1ffcc 	andi	r3,r2,2047
    baa8:	e0bffb17 	ldw	r2,-20(fp)
    baac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    bab0:	e0bffd17 	ldw	r2,-12(fp)
    bab4:	10800048 	cmpgei	r2,r2,1
    bab8:	103fcc1e 	bne	r2,zero,b9ec <altera_avalon_jtag_uart_read+0x34>

    /* If we read any data then return it */
    if (ptr != buffer)
    babc:	e0fffa17 	ldw	r3,-24(fp)
    bac0:	e0bffc17 	ldw	r2,-16(fp)
    bac4:	1880141e 	bne	r3,r2,bb18 <altera_avalon_jtag_uart_read+0x160>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    bac8:	e0bffe17 	ldw	r2,-8(fp)
    bacc:	1090000c 	andi	r2,r2,16384
    bad0:	1004c03a 	cmpne	r2,r2,zero
    bad4:	1000101e 	bne	r2,zero,bb18 <altera_avalon_jtag_uart_read+0x160>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    bad8:	e0bffb17 	ldw	r2,-20(fp)
    badc:	10c00a17 	ldw	r3,40(r2)
    bae0:	e0bff717 	ldw	r2,-36(fp)
    bae4:	1880051e 	bne	r3,r2,bafc <altera_avalon_jtag_uart_read+0x144>
    bae8:	e0bffb17 	ldw	r2,-20(fp)
    baec:	10c00917 	ldw	r3,36(r2)
    baf0:	e0bffb17 	ldw	r2,-20(fp)
    baf4:	10800117 	ldw	r2,4(r2)
    baf8:	18bff736 	bltu	r3,r2,bad8 <altera_avalon_jtag_uart_read+0x120>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    bafc:	e0bffb17 	ldw	r2,-20(fp)
    bb00:	10c00a17 	ldw	r3,40(r2)
    bb04:	e0bff717 	ldw	r2,-36(fp)
    bb08:	18800326 	beq	r3,r2,bb18 <altera_avalon_jtag_uart_read+0x160>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bb0c:	e0bffd17 	ldw	r2,-12(fp)
    bb10:	10800048 	cmpgei	r2,r2,1
    bb14:	103fb51e 	bne	r2,zero,b9ec <altera_avalon_jtag_uart_read+0x34>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    bb18:	e0fffa17 	ldw	r3,-24(fp)
    bb1c:	e0bffc17 	ldw	r2,-16(fp)
    bb20:	18801926 	beq	r3,r2,bb88 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb24:	0005303a 	rdctl	r2,status
    bb28:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb2c:	e0fff517 	ldw	r3,-44(fp)
    bb30:	00bfff84 	movi	r2,-2
    bb34:	1884703a 	and	r2,r3,r2
    bb38:	1001703a 	wrctl	status,r2
  
  return context;
    bb3c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    bb40:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bb44:	e0bffb17 	ldw	r2,-20(fp)
    bb48:	10800817 	ldw	r2,32(r2)
    bb4c:	10c00054 	ori	r3,r2,1
    bb50:	e0bffb17 	ldw	r2,-20(fp)
    bb54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bb58:	e0bffb17 	ldw	r2,-20(fp)
    bb5c:	10800017 	ldw	r2,0(r2)
    bb60:	11000104 	addi	r4,r2,4
    bb64:	e0bffb17 	ldw	r2,-20(fp)
    bb68:	10800817 	ldw	r2,32(r2)
    bb6c:	1007883a 	mov	r3,r2
    bb70:	2005883a 	mov	r2,r4
    bb74:	10c00035 	stwio	r3,0(r2)
    bb78:	e0bff917 	ldw	r2,-28(fp)
    bb7c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb80:	e0bff417 	ldw	r2,-48(fp)
    bb84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    bb88:	e0fffa17 	ldw	r3,-24(fp)
    bb8c:	e0bffc17 	ldw	r2,-16(fp)
    bb90:	18800526 	beq	r3,r2,bba8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    bb94:	e0fffa17 	ldw	r3,-24(fp)
    bb98:	e0bffc17 	ldw	r2,-16(fp)
    bb9c:	1887c83a 	sub	r3,r3,r2
    bba0:	e0ffff15 	stw	r3,-4(fp)
    bba4:	00000906 	br	bbcc <altera_avalon_jtag_uart_read+0x214>
  else if (flags & O_NONBLOCK)
    bba8:	e0bffe17 	ldw	r2,-8(fp)
    bbac:	1090000c 	andi	r2,r2,16384
    bbb0:	1005003a 	cmpeq	r2,r2,zero
    bbb4:	1000031e 	bne	r2,zero,bbc4 <altera_avalon_jtag_uart_read+0x20c>
    return -EWOULDBLOCK;
    bbb8:	00bffd44 	movi	r2,-11
    bbbc:	e0bfff15 	stw	r2,-4(fp)
    bbc0:	00000206 	br	bbcc <altera_avalon_jtag_uart_read+0x214>
  else
    return -EIO;
    bbc4:	00bffec4 	movi	r2,-5
    bbc8:	e0bfff15 	stw	r2,-4(fp)
    bbcc:	e0bfff17 	ldw	r2,-4(fp)
}
    bbd0:	e037883a 	mov	sp,fp
    bbd4:	dfc00117 	ldw	ra,4(sp)
    bbd8:	df000017 	ldw	fp,0(sp)
    bbdc:	dec00204 	addi	sp,sp,8
    bbe0:	f800283a 	ret

0000bbe4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bbe4:	defff204 	addi	sp,sp,-56
    bbe8:	de00012e 	bgeu	sp,et,bbf0 <altera_avalon_jtag_uart_write+0xc>
    bbec:	003da0fa 	break	3
    bbf0:	dfc00d15 	stw	ra,52(sp)
    bbf4:	df000c15 	stw	fp,48(sp)
    bbf8:	df000c04 	addi	fp,sp,48
    bbfc:	e13ffb15 	stw	r4,-20(fp)
    bc00:	e17ffc15 	stw	r5,-16(fp)
    bc04:	e1bffd15 	stw	r6,-12(fp)
    bc08:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    bc0c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    bc10:	e0bffc17 	ldw	r2,-16(fp)
    bc14:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bc18:	00003a06 	br	bd04 <altera_avalon_jtag_uart_write+0x120>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    bc1c:	e0bffb17 	ldw	r2,-20(fp)
    bc20:	10800c17 	ldw	r2,48(r2)
    bc24:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    bc28:	e0bffb17 	ldw	r2,-20(fp)
    bc2c:	10800d17 	ldw	r2,52(r2)
    bc30:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    bc34:	e0fffa17 	ldw	r3,-24(fp)
    bc38:	e0bff917 	ldw	r2,-28(fp)
    bc3c:	1880062e 	bgeu	r3,r2,bc58 <altera_avalon_jtag_uart_write+0x74>
        n = out - 1 - in;
    bc40:	e0fff917 	ldw	r3,-28(fp)
    bc44:	e0bffa17 	ldw	r2,-24(fp)
    bc48:	1885c83a 	sub	r2,r3,r2
    bc4c:	10bfffc4 	addi	r2,r2,-1
    bc50:	e0bff815 	stw	r2,-32(fp)
    bc54:	00000c06 	br	bc88 <altera_avalon_jtag_uart_write+0xa4>
      else if (out > 0)
    bc58:	e0bff917 	ldw	r2,-28(fp)
    bc5c:	1005003a 	cmpeq	r2,r2,zero
    bc60:	1000051e 	bne	r2,zero,bc78 <altera_avalon_jtag_uart_write+0x94>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    bc64:	00820004 	movi	r2,2048
    bc68:	e0fffa17 	ldw	r3,-24(fp)
    bc6c:	10c5c83a 	sub	r2,r2,r3
    bc70:	e0bff815 	stw	r2,-32(fp)
    bc74:	00000406 	br	bc88 <altera_avalon_jtag_uart_write+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    bc78:	0081ffc4 	movi	r2,2047
    bc7c:	e0fffa17 	ldw	r3,-24(fp)
    bc80:	10c5c83a 	sub	r2,r2,r3
    bc84:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    bc88:	e0bff817 	ldw	r2,-32(fp)
    bc8c:	1005003a 	cmpeq	r2,r2,zero
    bc90:	10001f1e 	bne	r2,zero,bd10 <altera_avalon_jtag_uart_write+0x12c>
        break;

      if (n > count)
    bc94:	e0fffd17 	ldw	r3,-12(fp)
    bc98:	e0bff817 	ldw	r2,-32(fp)
    bc9c:	1880022e 	bgeu	r3,r2,bca8 <altera_avalon_jtag_uart_write+0xc4>
        n = count;
    bca0:	e0bffd17 	ldw	r2,-12(fp)
    bca4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    bca8:	e0bffb17 	ldw	r2,-20(fp)
    bcac:	10c20e04 	addi	r3,r2,2104
    bcb0:	e0bffa17 	ldw	r2,-24(fp)
    bcb4:	1885883a 	add	r2,r3,r2
    bcb8:	e0fffc17 	ldw	r3,-16(fp)
    bcbc:	1009883a 	mov	r4,r2
    bcc0:	180b883a 	mov	r5,r3
    bcc4:	e1bff817 	ldw	r6,-32(fp)
    bcc8:	000e2040 	call	e204 <memcpy>
      ptr   += n;
    bccc:	e0fff817 	ldw	r3,-32(fp)
    bcd0:	e0bffc17 	ldw	r2,-16(fp)
    bcd4:	10c5883a 	add	r2,r2,r3
    bcd8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    bcdc:	e0fffd17 	ldw	r3,-12(fp)
    bce0:	e0bff817 	ldw	r2,-32(fp)
    bce4:	1885c83a 	sub	r2,r3,r2
    bce8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bcec:	e0fffa17 	ldw	r3,-24(fp)
    bcf0:	e0bff817 	ldw	r2,-32(fp)
    bcf4:	1885883a 	add	r2,r3,r2
    bcf8:	10c1ffcc 	andi	r3,r2,2047
    bcfc:	e0bffb17 	ldw	r2,-20(fp)
    bd00:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bd04:	e0bffd17 	ldw	r2,-12(fp)
    bd08:	10800048 	cmpgei	r2,r2,1
    bd0c:	103fc31e 	bne	r2,zero,bc1c <altera_avalon_jtag_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd10:	0005303a 	rdctl	r2,status
    bd14:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd18:	e0fff517 	ldw	r3,-44(fp)
    bd1c:	00bfff84 	movi	r2,-2
    bd20:	1884703a 	and	r2,r3,r2
    bd24:	1001703a 	wrctl	status,r2
  
  return context;
    bd28:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    bd2c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bd30:	e0bffb17 	ldw	r2,-20(fp)
    bd34:	10800817 	ldw	r2,32(r2)
    bd38:	10c00094 	ori	r3,r2,2
    bd3c:	e0bffb17 	ldw	r2,-20(fp)
    bd40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bd44:	e0bffb17 	ldw	r2,-20(fp)
    bd48:	10800017 	ldw	r2,0(r2)
    bd4c:	11000104 	addi	r4,r2,4
    bd50:	e0bffb17 	ldw	r2,-20(fp)
    bd54:	10800817 	ldw	r2,32(r2)
    bd58:	1007883a 	mov	r3,r2
    bd5c:	2005883a 	mov	r2,r4
    bd60:	10c00035 	stwio	r3,0(r2)
    bd64:	e0bff717 	ldw	r2,-36(fp)
    bd68:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd6c:	e0bff417 	ldw	r2,-48(fp)
    bd70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    bd74:	e0bffd17 	ldw	r2,-12(fp)
    bd78:	10800050 	cmplti	r2,r2,1
    bd7c:	1000111e 	bne	r2,zero,bdc4 <altera_avalon_jtag_uart_write+0x1e0>
    {
      if (flags & O_NONBLOCK)
    bd80:	e0bffe17 	ldw	r2,-8(fp)
    bd84:	1090000c 	andi	r2,r2,16384
    bd88:	1004c03a 	cmpne	r2,r2,zero
    bd8c:	1000101e 	bne	r2,zero,bdd0 <altera_avalon_jtag_uart_write+0x1ec>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    bd90:	e0bffb17 	ldw	r2,-20(fp)
    bd94:	10c00d17 	ldw	r3,52(r2)
    bd98:	e0bff917 	ldw	r2,-28(fp)
    bd9c:	1880051e 	bne	r3,r2,bdb4 <altera_avalon_jtag_uart_write+0x1d0>
    bda0:	e0bffb17 	ldw	r2,-20(fp)
    bda4:	10c00917 	ldw	r3,36(r2)
    bda8:	e0bffb17 	ldw	r2,-20(fp)
    bdac:	10800117 	ldw	r2,4(r2)
    bdb0:	18bff736 	bltu	r3,r2,bd90 <altera_avalon_jtag_uart_write+0x1ac>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    bdb4:	e0bffb17 	ldw	r2,-20(fp)
    bdb8:	10c00d17 	ldw	r3,52(r2)
    bdbc:	e0bff917 	ldw	r2,-28(fp)
    bdc0:	18800326 	beq	r3,r2,bdd0 <altera_avalon_jtag_uart_write+0x1ec>
         break;
    }
  }
  while (count > 0);
    bdc4:	e0bffd17 	ldw	r2,-12(fp)
    bdc8:	10800048 	cmpgei	r2,r2,1
    bdcc:	103fcd1e 	bne	r2,zero,bd04 <altera_avalon_jtag_uart_write+0x120>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    bdd0:	e0fffc17 	ldw	r3,-16(fp)
    bdd4:	e0bff617 	ldw	r2,-40(fp)
    bdd8:	18800526 	beq	r3,r2,bdf0 <altera_avalon_jtag_uart_write+0x20c>
    return ptr - start;
    bddc:	e0fffc17 	ldw	r3,-16(fp)
    bde0:	e0bff617 	ldw	r2,-40(fp)
    bde4:	1887c83a 	sub	r3,r3,r2
    bde8:	e0ffff15 	stw	r3,-4(fp)
    bdec:	00000906 	br	be14 <altera_avalon_jtag_uart_write+0x230>
  else if (flags & O_NONBLOCK)
    bdf0:	e0bffe17 	ldw	r2,-8(fp)
    bdf4:	1090000c 	andi	r2,r2,16384
    bdf8:	1005003a 	cmpeq	r2,r2,zero
    bdfc:	1000031e 	bne	r2,zero,be0c <altera_avalon_jtag_uart_write+0x228>
    return -EWOULDBLOCK;
    be00:	00bffd44 	movi	r2,-11
    be04:	e0bfff15 	stw	r2,-4(fp)
    be08:	00000206 	br	be14 <altera_avalon_jtag_uart_write+0x230>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    be0c:	00bffec4 	movi	r2,-5
    be10:	e0bfff15 	stw	r2,-4(fp)
    be14:	e0bfff17 	ldw	r2,-4(fp)
}
    be18:	e037883a 	mov	sp,fp
    be1c:	dfc00117 	ldw	ra,4(sp)
    be20:	df000017 	ldw	fp,0(sp)
    be24:	dec00204 	addi	sp,sp,8
    be28:	f800283a 	ret

0000be2c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
    be2c:	defffa04 	addi	sp,sp,-24
    be30:	de00012e 	bgeu	sp,et,be38 <lcd_write_command+0xc>
    be34:	003da0fa 	break	3
    be38:	dfc00515 	stw	ra,20(sp)
    be3c:	df000415 	stw	fp,16(sp)
    be40:	df000404 	addi	fp,sp,16
    be44:	e13ffe15 	stw	r4,-8(fp)
    be48:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
    be4c:	e0bffe17 	ldw	r2,-8(fp)
    be50:	10800017 	ldw	r2,0(r2)
    be54:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    be58:	008003f4 	movhi	r2,15
    be5c:	10909004 	addi	r2,r2,16960
    be60:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    be64:	e0bffe17 	ldw	r2,-8(fp)
    be68:	10800803 	ldbu	r2,32(r2)
    be6c:	10803fcc 	andi	r2,r2,255
    be70:	1080201c 	xori	r2,r2,128
    be74:	10bfe004 	addi	r2,r2,-128
    be78:	1004c03a 	cmpne	r2,r2,zero
    be7c:	1000161e 	bne	r2,zero,bed8 <lcd_write_command+0xac>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    be80:	00000a06 	br	beac <lcd_write_command+0x80>
    if (--i == 0)
    be84:	e0bffc17 	ldw	r2,-16(fp)
    be88:	10bfffc4 	addi	r2,r2,-1
    be8c:	e0bffc15 	stw	r2,-16(fp)
    be90:	e0bffc17 	ldw	r2,-16(fp)
    be94:	1004c03a 	cmpne	r2,r2,zero
    be98:	1000041e 	bne	r2,zero,beac <lcd_write_command+0x80>
    {
      sp->broken = 1;
    be9c:	e0fffe17 	ldw	r3,-8(fp)
    bea0:	00800044 	movi	r2,1
    bea4:	18800805 	stb	r2,32(r3)
      return;
    bea8:	00000b06 	br	bed8 <lcd_write_command+0xac>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    beac:	e0bffd17 	ldw	r2,-12(fp)
    beb0:	10800104 	addi	r2,r2,4
    beb4:	10800037 	ldwio	r2,0(r2)
    beb8:	1080200c 	andi	r2,r2,128
    bebc:	1004c03a 	cmpne	r2,r2,zero
    bec0:	103ff01e 	bne	r2,zero,be84 <lcd_write_command+0x58>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    bec4:	01001904 	movi	r4,100
    bec8:	000b2100 	call	b210 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
    becc:	e0bffd17 	ldw	r2,-12(fp)
    bed0:	e0ffff03 	ldbu	r3,-4(fp)
    bed4:	10c00035 	stwio	r3,0(r2)
}
    bed8:	e037883a 	mov	sp,fp
    bedc:	dfc00117 	ldw	ra,4(sp)
    bee0:	df000017 	ldw	fp,0(sp)
    bee4:	dec00204 	addi	sp,sp,8
    bee8:	f800283a 	ret

0000beec <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
    beec:	defffa04 	addi	sp,sp,-24
    bef0:	de00012e 	bgeu	sp,et,bef8 <lcd_write_data+0xc>
    bef4:	003da0fa 	break	3
    bef8:	dfc00515 	stw	ra,20(sp)
    befc:	df000415 	stw	fp,16(sp)
    bf00:	df000404 	addi	fp,sp,16
    bf04:	e13ffe15 	stw	r4,-8(fp)
    bf08:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
    bf0c:	e0bffe17 	ldw	r2,-8(fp)
    bf10:	10800017 	ldw	r2,0(r2)
    bf14:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    bf18:	008003f4 	movhi	r2,15
    bf1c:	10909004 	addi	r2,r2,16960
    bf20:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    bf24:	e0bffe17 	ldw	r2,-8(fp)
    bf28:	10800803 	ldbu	r2,32(r2)
    bf2c:	10803fcc 	andi	r2,r2,255
    bf30:	1080201c 	xori	r2,r2,128
    bf34:	10bfe004 	addi	r2,r2,-128
    bf38:	1004c03a 	cmpne	r2,r2,zero
    bf3c:	10001d1e 	bne	r2,zero,bfb4 <lcd_write_data+0xc8>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    bf40:	00000a06 	br	bf6c <lcd_write_data+0x80>
    if (--i == 0)
    bf44:	e0bffc17 	ldw	r2,-16(fp)
    bf48:	10bfffc4 	addi	r2,r2,-1
    bf4c:	e0bffc15 	stw	r2,-16(fp)
    bf50:	e0bffc17 	ldw	r2,-16(fp)
    bf54:	1004c03a 	cmpne	r2,r2,zero
    bf58:	1000041e 	bne	r2,zero,bf6c <lcd_write_data+0x80>
    {
      sp->broken = 1;
    bf5c:	e0fffe17 	ldw	r3,-8(fp)
    bf60:	00800044 	movi	r2,1
    bf64:	18800805 	stb	r2,32(r3)
      return;
    bf68:	00001206 	br	bfb4 <lcd_write_data+0xc8>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    bf6c:	e0bffd17 	ldw	r2,-12(fp)
    bf70:	10800104 	addi	r2,r2,4
    bf74:	10800037 	ldwio	r2,0(r2)
    bf78:	1080200c 	andi	r2,r2,128
    bf7c:	1004c03a 	cmpne	r2,r2,zero
    bf80:	103ff01e 	bne	r2,zero,bf44 <lcd_write_data+0x58>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    bf84:	01001904 	movi	r4,100
    bf88:	000b2100 	call	b210 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
    bf8c:	e0bffd17 	ldw	r2,-12(fp)
    bf90:	10800204 	addi	r2,r2,8
    bf94:	e0ffff03 	ldbu	r3,-4(fp)
    bf98:	10c00035 	stwio	r3,0(r2)

  sp->address++;
    bf9c:	e0bffe17 	ldw	r2,-8(fp)
    bfa0:	108008c3 	ldbu	r2,35(r2)
    bfa4:	10800044 	addi	r2,r2,1
    bfa8:	1007883a 	mov	r3,r2
    bfac:	e0bffe17 	ldw	r2,-8(fp)
    bfb0:	10c008c5 	stb	r3,35(r2)
}
    bfb4:	e037883a 	mov	sp,fp
    bfb8:	dfc00117 	ldw	ra,4(sp)
    bfbc:	df000017 	ldw	fp,0(sp)
    bfc0:	dec00204 	addi	sp,sp,8
    bfc4:	f800283a 	ret

0000bfc8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
    bfc8:	defffb04 	addi	sp,sp,-20
    bfcc:	de00012e 	bgeu	sp,et,bfd4 <lcd_clear_screen+0xc>
    bfd0:	003da0fa 	break	3
    bfd4:	dfc00415 	stw	ra,16(sp)
    bfd8:	df000315 	stw	fp,12(sp)
    bfdc:	dc000215 	stw	r16,8(sp)
    bfe0:	df000204 	addi	fp,sp,8
    bfe4:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
    bfe8:	e13fff17 	ldw	r4,-4(fp)
    bfec:	01400044 	movi	r5,1
    bff0:	000be2c0 	call	be2c <lcd_write_command>

  sp->x = 0;
    bff4:	e0bfff17 	ldw	r2,-4(fp)
    bff8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
    bffc:	e0bfff17 	ldw	r2,-4(fp)
    c000:	10000885 	stb	zero,34(r2)
  sp->address = 0;
    c004:	e0bfff17 	ldw	r2,-4(fp)
    c008:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    c00c:	e03ffe15 	stw	zero,-8(fp)
    c010:	00001c06 	br	c084 <lcd_clear_screen+0xbc>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    c014:	e13ffe17 	ldw	r4,-8(fp)
    c018:	014018c4 	movi	r5,99
    c01c:	000a6b00 	call	a6b0 <__mulsi3>
    c020:	10c01004 	addi	r3,r2,64
    c024:	e0bfff17 	ldw	r2,-4(fp)
    c028:	1889883a 	add	r4,r3,r2
    c02c:	01400804 	movi	r5,32
    c030:	01801444 	movi	r6,81
    c034:	000e2a40 	call	e2a4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    c038:	e13ffe17 	ldw	r4,-8(fp)
    c03c:	014018c4 	movi	r5,99
    c040:	000a6b00 	call	a6b0 <__mulsi3>
    c044:	10c00c04 	addi	r3,r2,48
    c048:	e0bfff17 	ldw	r2,-4(fp)
    c04c:	1889883a 	add	r4,r3,r2
    c050:	01400804 	movi	r5,32
    c054:	01800404 	movi	r6,16
    c058:	000e2a40 	call	e2a4 <memset>
    sp->line[y].width = 0;
    c05c:	e13ffe17 	ldw	r4,-8(fp)
    c060:	e43fff17 	ldw	r16,-4(fp)
    c064:	014018c4 	movi	r5,99
    c068:	000a6b00 	call	a6b0 <__mulsi3>
    c06c:	1405883a 	add	r2,r2,r16
    c070:	10802404 	addi	r2,r2,144
    c074:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    c078:	e0bffe17 	ldw	r2,-8(fp)
    c07c:	10800044 	addi	r2,r2,1
    c080:	e0bffe15 	stw	r2,-8(fp)
    c084:	e0bffe17 	ldw	r2,-8(fp)
    c088:	10800090 	cmplti	r2,r2,2
    c08c:	103fe11e 	bne	r2,zero,c014 <lcd_clear_screen+0x4c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
    c090:	e037883a 	mov	sp,fp
    c094:	dfc00217 	ldw	ra,8(sp)
    c098:	df000117 	ldw	fp,4(sp)
    c09c:	dc000017 	ldw	r16,0(sp)
    c0a0:	dec00304 	addi	sp,sp,12
    c0a4:	f800283a 	ret

0000c0a8 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
    c0a8:	defff404 	addi	sp,sp,-48
    c0ac:	de00012e 	bgeu	sp,et,c0b4 <lcd_repaint_screen+0xc>
    c0b0:	003da0fa 	break	3
    c0b4:	dfc00b15 	stw	ra,44(sp)
    c0b8:	df000a15 	stw	fp,40(sp)
    c0bc:	dc800915 	stw	r18,36(sp)
    c0c0:	dc400815 	stw	r17,32(sp)
    c0c4:	dc000715 	stw	r16,28(sp)
    c0c8:	df000704 	addi	fp,sp,28
    c0cc:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
    c0d0:	e0bfff17 	ldw	r2,-4(fp)
    c0d4:	10800943 	ldbu	r2,37(r2)
    c0d8:	10803fcc 	andi	r2,r2,255
    c0dc:	1080201c 	xori	r2,r2,128
    c0e0:	10bfe004 	addi	r2,r2,-128
    c0e4:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    c0e8:	e03ffe15 	stw	zero,-8(fp)
    c0ec:	00006a06 	br	c298 <lcd_repaint_screen+0x1f0>
  {
    int width  = sp->line[y].width;
    c0f0:	e13ffe17 	ldw	r4,-8(fp)
    c0f4:	e43fff17 	ldw	r16,-4(fp)
    c0f8:	014018c4 	movi	r5,99
    c0fc:	000a6b00 	call	a6b0 <__mulsi3>
    c100:	1405883a 	add	r2,r2,r16
    c104:	10802404 	addi	r2,r2,144
    c108:	10800043 	ldbu	r2,1(r2)
    c10c:	10803fcc 	andi	r2,r2,255
    c110:	1080201c 	xori	r2,r2,128
    c114:	10bfe004 	addi	r2,r2,-128
    c118:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    c11c:	e13ffe17 	ldw	r4,-8(fp)
    c120:	e43fff17 	ldw	r16,-4(fp)
    c124:	014018c4 	movi	r5,99
    c128:	000a6b00 	call	a6b0 <__mulsi3>
    c12c:	1405883a 	add	r2,r2,r16
    c130:	10802404 	addi	r2,r2,144
    c134:	10800083 	ldbu	r2,2(r2)
    c138:	11003fcc 	andi	r4,r2,255
    c13c:	e17ffc17 	ldw	r5,-16(fp)
    c140:	000a6b00 	call	a6b0 <__mulsi3>
    c144:	1005d23a 	srai	r2,r2,8
    c148:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
    c14c:	e0fffa17 	ldw	r3,-24(fp)
    c150:	e0bffb17 	ldw	r2,-20(fp)
    c154:	18800116 	blt	r3,r2,c15c <lcd_repaint_screen+0xb4>
      offset = 0;
    c158:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    c15c:	e03ffd15 	stw	zero,-12(fp)
    c160:	00004706 	br	c280 <lcd_repaint_screen+0x1d8>
    {
      char c = sp->line[y].data[(x + offset) % width];
    c164:	e47ffe17 	ldw	r17,-8(fp)
    c168:	e0fffd17 	ldw	r3,-12(fp)
    c16c:	e0bffa17 	ldw	r2,-24(fp)
    c170:	1889883a 	add	r4,r3,r2
    c174:	e17ffb17 	ldw	r5,-20(fp)
    c178:	000a6400 	call	a640 <__modsi3>
    c17c:	1025883a 	mov	r18,r2
    c180:	e43fff17 	ldw	r16,-4(fp)
    c184:	8809883a 	mov	r4,r17
    c188:	014018c4 	movi	r5,99
    c18c:	000a6b00 	call	a6b0 <__mulsi3>
    c190:	1405883a 	add	r2,r2,r16
    c194:	1485883a 	add	r2,r2,r18
    c198:	10801004 	addi	r2,r2,64
    c19c:	10800003 	ldbu	r2,0(r2)
    c1a0:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
    c1a4:	e13ffe17 	ldw	r4,-8(fp)
    c1a8:	e47ffd17 	ldw	r17,-12(fp)
    c1ac:	e43fff17 	ldw	r16,-4(fp)
    c1b0:	014018c4 	movi	r5,99
    c1b4:	000a6b00 	call	a6b0 <__mulsi3>
    c1b8:	1405883a 	add	r2,r2,r16
    c1bc:	1445883a 	add	r2,r2,r17
    c1c0:	10800c04 	addi	r2,r2,48
    c1c4:	10800003 	ldbu	r2,0(r2)
    c1c8:	10c03fcc 	andi	r3,r2,255
    c1cc:	18c0201c 	xori	r3,r3,128
    c1d0:	18ffe004 	addi	r3,r3,-128
    c1d4:	e0bff947 	ldb	r2,-27(fp)
    c1d8:	18802626 	beq	r3,r2,c274 <lcd_repaint_screen+0x1cc>
      {
        unsigned char address = x + colstart[y];
    c1dc:	e0fffe17 	ldw	r3,-8(fp)
    c1e0:	d0a06604 	addi	r2,gp,-32360
    c1e4:	1885883a 	add	r2,r3,r2
    c1e8:	10800003 	ldbu	r2,0(r2)
    c1ec:	1007883a 	mov	r3,r2
    c1f0:	e0bffd17 	ldw	r2,-12(fp)
    c1f4:	1885883a 	add	r2,r3,r2
    c1f8:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
    c1fc:	e0fff903 	ldbu	r3,-28(fp)
    c200:	e0bfff17 	ldw	r2,-4(fp)
    c204:	108008c3 	ldbu	r2,35(r2)
    c208:	10803fcc 	andi	r2,r2,255
    c20c:	1080201c 	xori	r2,r2,128
    c210:	10bfe004 	addi	r2,r2,-128
    c214:	18800926 	beq	r3,r2,c23c <lcd_repaint_screen+0x194>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
    c218:	e0fff903 	ldbu	r3,-28(fp)
    c21c:	00bfe004 	movi	r2,-128
    c220:	1884b03a 	or	r2,r3,r2
    c224:	11403fcc 	andi	r5,r2,255
    c228:	e13fff17 	ldw	r4,-4(fp)
    c22c:	000be2c0 	call	be2c <lcd_write_command>
          sp->address = address;
    c230:	e0fff903 	ldbu	r3,-28(fp)
    c234:	e0bfff17 	ldw	r2,-4(fp)
    c238:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
    c23c:	e0bff943 	ldbu	r2,-27(fp)
    c240:	11403fcc 	andi	r5,r2,255
    c244:	e13fff17 	ldw	r4,-4(fp)
    c248:	000beec0 	call	beec <lcd_write_data>
        sp->line[y].visible[x] = c;
    c24c:	e13ffe17 	ldw	r4,-8(fp)
    c250:	e47ffd17 	ldw	r17,-12(fp)
    c254:	e43fff17 	ldw	r16,-4(fp)
    c258:	014018c4 	movi	r5,99
    c25c:	000a6b00 	call	a6b0 <__mulsi3>
    c260:	1405883a 	add	r2,r2,r16
    c264:	1445883a 	add	r2,r2,r17
    c268:	10c00c04 	addi	r3,r2,48
    c26c:	e0bff943 	ldbu	r2,-27(fp)
    c270:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    c274:	e0bffd17 	ldw	r2,-12(fp)
    c278:	10800044 	addi	r2,r2,1
    c27c:	e0bffd15 	stw	r2,-12(fp)
    c280:	e0bffd17 	ldw	r2,-12(fp)
    c284:	10800410 	cmplti	r2,r2,16
    c288:	103fb61e 	bne	r2,zero,c164 <lcd_repaint_screen+0xbc>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    c28c:	e0bffe17 	ldw	r2,-8(fp)
    c290:	10800044 	addi	r2,r2,1
    c294:	e0bffe15 	stw	r2,-8(fp)
    c298:	e0bffe17 	ldw	r2,-8(fp)
    c29c:	10800090 	cmplti	r2,r2,2
    c2a0:	103f931e 	bne	r2,zero,c0f0 <lcd_repaint_screen+0x48>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
    c2a4:	e037883a 	mov	sp,fp
    c2a8:	dfc00417 	ldw	ra,16(sp)
    c2ac:	df000317 	ldw	fp,12(sp)
    c2b0:	dc800217 	ldw	r18,8(sp)
    c2b4:	dc400117 	ldw	r17,4(sp)
    c2b8:	dc000017 	ldw	r16,0(sp)
    c2bc:	dec00504 	addi	sp,sp,20
    c2c0:	f800283a 	ret

0000c2c4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
    c2c4:	defffb04 	addi	sp,sp,-20
    c2c8:	de00012e 	bgeu	sp,et,c2d0 <lcd_scroll_up+0xc>
    c2cc:	003da0fa 	break	3
    c2d0:	dfc00415 	stw	ra,16(sp)
    c2d4:	df000315 	stw	fp,12(sp)
    c2d8:	dc000215 	stw	r16,8(sp)
    c2dc:	df000204 	addi	fp,sp,8
    c2e0:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    c2e4:	e03ffe15 	stw	zero,-8(fp)
    c2e8:	00002106 	br	c370 <lcd_scroll_up+0xac>
  {
    if (y < ALT_LCD_HEIGHT-1)
    c2ec:	e0bffe17 	ldw	r2,-8(fp)
    c2f0:	10800048 	cmpgei	r2,r2,1
    c2f4:	1000121e 	bne	r2,zero,c340 <lcd_scroll_up+0x7c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    c2f8:	e13ffe17 	ldw	r4,-8(fp)
    c2fc:	014018c4 	movi	r5,99
    c300:	000a6b00 	call	a6b0 <__mulsi3>
    c304:	10c01004 	addi	r3,r2,64
    c308:	e0bfff17 	ldw	r2,-4(fp)
    c30c:	18a1883a 	add	r16,r3,r2
    c310:	e0bffe17 	ldw	r2,-8(fp)
    c314:	11000044 	addi	r4,r2,1
    c318:	014018c4 	movi	r5,99
    c31c:	000a6b00 	call	a6b0 <__mulsi3>
    c320:	10c01004 	addi	r3,r2,64
    c324:	e0bfff17 	ldw	r2,-4(fp)
    c328:	1885883a 	add	r2,r3,r2
    c32c:	8009883a 	mov	r4,r16
    c330:	100b883a 	mov	r5,r2
    c334:	01801404 	movi	r6,80
    c338:	000e2040 	call	e204 <memcpy>
    c33c:	00000906 	br	c364 <lcd_scroll_up+0xa0>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
    c340:	e13ffe17 	ldw	r4,-8(fp)
    c344:	014018c4 	movi	r5,99
    c348:	000a6b00 	call	a6b0 <__mulsi3>
    c34c:	10c01004 	addi	r3,r2,64
    c350:	e0bfff17 	ldw	r2,-4(fp)
    c354:	1889883a 	add	r4,r3,r2
    c358:	01400804 	movi	r5,32
    c35c:	01801404 	movi	r6,80
    c360:	000e2a40 	call	e2a4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    c364:	e0bffe17 	ldw	r2,-8(fp)
    c368:	10800044 	addi	r2,r2,1
    c36c:	e0bffe15 	stw	r2,-8(fp)
    c370:	e0bffe17 	ldw	r2,-8(fp)
    c374:	10800090 	cmplti	r2,r2,2
    c378:	103fdc1e 	bne	r2,zero,c2ec <lcd_scroll_up+0x28>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
    c37c:	e0bfff17 	ldw	r2,-4(fp)
    c380:	10800883 	ldbu	r2,34(r2)
    c384:	10bfffc4 	addi	r2,r2,-1
    c388:	1007883a 	mov	r3,r2
    c38c:	e0bfff17 	ldw	r2,-4(fp)
    c390:	10c00885 	stb	r3,34(r2)
}
    c394:	e037883a 	mov	sp,fp
    c398:	dfc00217 	ldw	ra,8(sp)
    c39c:	df000117 	ldw	fp,4(sp)
    c3a0:	dc000017 	ldw	r16,0(sp)
    c3a4:	dec00304 	addi	sp,sp,12
    c3a8:	f800283a 	ret

0000c3ac <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
    c3ac:	defff804 	addi	sp,sp,-32
    c3b0:	de00012e 	bgeu	sp,et,c3b8 <lcd_handle_escape+0xc>
    c3b4:	003da0fa 	break	3
    c3b8:	dfc00715 	stw	ra,28(sp)
    c3bc:	df000615 	stw	fp,24(sp)
    c3c0:	df000604 	addi	fp,sp,24
    c3c4:	e13ffd15 	stw	r4,-12(fp)
    c3c8:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
    c3cc:	e03ffc15 	stw	zero,-16(fp)
    c3d0:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
    c3d4:	e0bffd17 	ldw	r2,-12(fp)
    c3d8:	10800a03 	ldbu	r2,40(r2)
    c3dc:	10803fcc 	andi	r2,r2,255
    c3e0:	1080201c 	xori	r2,r2,128
    c3e4:	10bfe004 	addi	r2,r2,-128
    c3e8:	108016d8 	cmpnei	r2,r2,91
    c3ec:	10004d1e 	bne	r2,zero,c524 <lcd_handle_escape+0x178>
  {
    char * ptr = sp->escape+1;
    c3f0:	e0bffd17 	ldw	r2,-12(fp)
    c3f4:	10800a04 	addi	r2,r2,40
    c3f8:	10800044 	addi	r2,r2,1
    c3fc:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
    c400:	00000f06 	br	c440 <lcd_handle_escape+0x94>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
    c404:	e13ffc17 	ldw	r4,-16(fp)
    c408:	01400284 	movi	r5,10
    c40c:	000a6b00 	call	a6b0 <__mulsi3>
    c410:	1007883a 	mov	r3,r2
    c414:	e0bffa17 	ldw	r2,-24(fp)
    c418:	10800003 	ldbu	r2,0(r2)
    c41c:	10803fcc 	andi	r2,r2,255
    c420:	1080201c 	xori	r2,r2,128
    c424:	10bfe004 	addi	r2,r2,-128
    c428:	1885883a 	add	r2,r3,r2
    c42c:	10bff404 	addi	r2,r2,-48
    c430:	e0bffc15 	stw	r2,-16(fp)
    c434:	e0bffa17 	ldw	r2,-24(fp)
    c438:	10800044 	addi	r2,r2,1
    c43c:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
    c440:	e0bffa17 	ldw	r2,-24(fp)
    c444:	10800003 	ldbu	r2,0(r2)
    c448:	10803fcc 	andi	r2,r2,255
    c44c:	1080201c 	xori	r2,r2,128
    c450:	10bfe004 	addi	r2,r2,-128
    c454:	1007883a 	mov	r3,r2
    c458:	00800074 	movhi	r2,1
    c45c:	10817d04 	addi	r2,r2,1524
    c460:	10800017 	ldw	r2,0(r2)
    c464:	1885883a 	add	r2,r3,r2
    c468:	10800003 	ldbu	r2,0(r2)
    c46c:	10803fcc 	andi	r2,r2,255
    c470:	1080010c 	andi	r2,r2,4
    c474:	1004c03a 	cmpne	r2,r2,zero
    c478:	103fe21e 	bne	r2,zero,c404 <lcd_handle_escape+0x58>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    c47c:	e0bffa17 	ldw	r2,-24(fp)
    c480:	10800003 	ldbu	r2,0(r2)
    c484:	10803fcc 	andi	r2,r2,255
    c488:	1080201c 	xori	r2,r2,128
    c48c:	10bfe004 	addi	r2,r2,-128
    c490:	10800ed8 	cmpnei	r2,r2,59
    c494:	1000251e 	bne	r2,zero,c52c <lcd_handle_escape+0x180>
    {
      ptr++;
    c498:	e0bffa17 	ldw	r2,-24(fp)
    c49c:	10800044 	addi	r2,r2,1
    c4a0:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
    c4a4:	00000f06 	br	c4e4 <lcd_handle_escape+0x138>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    c4a8:	e13ffb17 	ldw	r4,-20(fp)
    c4ac:	01400284 	movi	r5,10
    c4b0:	000a6b00 	call	a6b0 <__mulsi3>
    c4b4:	1007883a 	mov	r3,r2
    c4b8:	e0bffa17 	ldw	r2,-24(fp)
    c4bc:	10800003 	ldbu	r2,0(r2)
    c4c0:	10803fcc 	andi	r2,r2,255
    c4c4:	1080201c 	xori	r2,r2,128
    c4c8:	10bfe004 	addi	r2,r2,-128
    c4cc:	1885883a 	add	r2,r3,r2
    c4d0:	10bff404 	addi	r2,r2,-48
    c4d4:	e0bffb15 	stw	r2,-20(fp)
    c4d8:	e0bffa17 	ldw	r2,-24(fp)
    c4dc:	10800044 	addi	r2,r2,1
    c4e0:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
    c4e4:	e0bffa17 	ldw	r2,-24(fp)
    c4e8:	10800003 	ldbu	r2,0(r2)
    c4ec:	10803fcc 	andi	r2,r2,255
    c4f0:	1080201c 	xori	r2,r2,128
    c4f4:	10bfe004 	addi	r2,r2,-128
    c4f8:	1007883a 	mov	r3,r2
    c4fc:	00800074 	movhi	r2,1
    c500:	10817d04 	addi	r2,r2,1524
    c504:	10800017 	ldw	r2,0(r2)
    c508:	1885883a 	add	r2,r3,r2
    c50c:	10800003 	ldbu	r2,0(r2)
    c510:	10803fcc 	andi	r2,r2,255
    c514:	1080010c 	andi	r2,r2,4
    c518:	1004c03a 	cmpne	r2,r2,zero
    c51c:	103fe21e 	bne	r2,zero,c4a8 <lcd_handle_escape+0xfc>
    c520:	00000206 	br	c52c <lcd_handle_escape+0x180>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
    c524:	00bfffc4 	movi	r2,-1
    c528:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
    c52c:	e0bffe07 	ldb	r2,-8(fp)
    c530:	e0bfff15 	stw	r2,-4(fp)
    c534:	e0ffff17 	ldw	r3,-4(fp)
    c538:	188012a0 	cmpeqi	r2,r3,74
    c53c:	10002f1e 	bne	r2,zero,c5fc <lcd_handle_escape+0x250>
    c540:	e0ffff17 	ldw	r3,-4(fp)
    c544:	188012c8 	cmpgei	r2,r3,75
    c548:	1000041e 	bne	r2,zero,c55c <lcd_handle_escape+0x1b0>
    c54c:	e0ffff17 	ldw	r3,-4(fp)
    c550:	18801220 	cmpeqi	r2,r3,72
    c554:	1000081e 	bne	r2,zero,c578 <lcd_handle_escape+0x1cc>
    c558:	00004a06 	br	c684 <lcd_handle_escape+0x2d8>
    c55c:	e0ffff17 	ldw	r3,-4(fp)
    c560:	188012e0 	cmpeqi	r2,r3,75
    c564:	10002b1e 	bne	r2,zero,c614 <lcd_handle_escape+0x268>
    c568:	e0ffff17 	ldw	r3,-4(fp)
    c56c:	188019a0 	cmpeqi	r2,r3,102
    c570:	1000011e 	bne	r2,zero,c578 <lcd_handle_escape+0x1cc>
    c574:	00004306 	br	c684 <lcd_handle_escape+0x2d8>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
    c578:	e0bffb17 	ldw	r2,-20(fp)
    c57c:	10800050 	cmplti	r2,r2,1
    c580:	1000051e 	bne	r2,zero,c598 <lcd_handle_escape+0x1ec>
      sp->x = parm2 - 1;
    c584:	e0bffb17 	ldw	r2,-20(fp)
    c588:	10bfffc4 	addi	r2,r2,-1
    c58c:	1007883a 	mov	r3,r2
    c590:	e0bffd17 	ldw	r2,-12(fp)
    c594:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
    c598:	e0bffc17 	ldw	r2,-16(fp)
    c59c:	10800050 	cmplti	r2,r2,1
    c5a0:	1000381e 	bne	r2,zero,c684 <lcd_handle_escape+0x2d8>
    {
      sp->y = parm1 - 1;
    c5a4:	e0bffc17 	ldw	r2,-16(fp)
    c5a8:	10bfffc4 	addi	r2,r2,-1
    c5ac:	1007883a 	mov	r3,r2
    c5b0:	e0bffd17 	ldw	r2,-12(fp)
    c5b4:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
    c5b8:	e0bffd17 	ldw	r2,-12(fp)
    c5bc:	10800883 	ldbu	r2,34(r2)
    c5c0:	10803fcc 	andi	r2,r2,255
    c5c4:	10800170 	cmpltui	r2,r2,5
    c5c8:	1000061e 	bne	r2,zero,c5e4 <lcd_handle_escape+0x238>
        sp->y = ALT_LCD_HEIGHT * 2;
    c5cc:	e0fffd17 	ldw	r3,-12(fp)
    c5d0:	00800104 	movi	r2,4
    c5d4:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
    c5d8:	00000206 	br	c5e4 <lcd_handle_escape+0x238>
        lcd_scroll_up(sp);
    c5dc:	e13ffd17 	ldw	r4,-12(fp)
    c5e0:	000c2c40 	call	c2c4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
    c5e4:	e0bffd17 	ldw	r2,-12(fp)
    c5e8:	10800883 	ldbu	r2,34(r2)
    c5ec:	10803fcc 	andi	r2,r2,255
    c5f0:	108000e8 	cmpgeui	r2,r2,3
    c5f4:	103ff91e 	bne	r2,zero,c5dc <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
    }
    break;
    c5f8:	00002206 	br	c684 <lcd_handle_escape+0x2d8>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
    c5fc:	e0bffc17 	ldw	r2,-16(fp)
    c600:	10800098 	cmpnei	r2,r2,2
    c604:	10001f1e 	bne	r2,zero,c684 <lcd_handle_escape+0x2d8>
      lcd_clear_screen(sp);
    c608:	e13ffd17 	ldw	r4,-12(fp)
    c60c:	000bfc80 	call	bfc8 <lcd_clear_screen>
    break;
    c610:	00001c06 	br	c684 <lcd_handle_escape+0x2d8>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
    c614:	e0bffc17 	ldw	r2,-16(fp)
    c618:	10800048 	cmpgei	r2,r2,1
    c61c:	1000191e 	bne	r2,zero,c684 <lcd_handle_escape+0x2d8>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    c620:	e0bffd17 	ldw	r2,-12(fp)
    c624:	10800843 	ldbu	r2,33(r2)
    c628:	10803fcc 	andi	r2,r2,255
    c62c:	10801428 	cmpgeui	r2,r2,80
    c630:	1000141e 	bne	r2,zero,c684 <lcd_handle_escape+0x2d8>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    c634:	e0bffd17 	ldw	r2,-12(fp)
    c638:	10800883 	ldbu	r2,34(r2)
    c63c:	11003fcc 	andi	r4,r2,255
    c640:	014018c4 	movi	r5,99
    c644:	000a6b00 	call	a6b0 <__mulsi3>
    c648:	10c01004 	addi	r3,r2,64
    c64c:	e0bffd17 	ldw	r2,-12(fp)
    c650:	1887883a 	add	r3,r3,r2
    c654:	e0bffd17 	ldw	r2,-12(fp)
    c658:	10800843 	ldbu	r2,33(r2)
    c65c:	10803fcc 	andi	r2,r2,255
    c660:	1889883a 	add	r4,r3,r2
    c664:	e0bffd17 	ldw	r2,-12(fp)
    c668:	10800843 	ldbu	r2,33(r2)
    c66c:	10c03fcc 	andi	r3,r2,255
    c670:	00801404 	movi	r2,80
    c674:	10c5c83a 	sub	r2,r2,r3
    c678:	100d883a 	mov	r6,r2
    c67c:	01400804 	movi	r5,32
    c680:	000e2a40 	call	e2a4 <memset>
    }
    break;
  }
}
    c684:	e037883a 	mov	sp,fp
    c688:	dfc00117 	ldw	ra,4(sp)
    c68c:	df000017 	ldw	fp,0(sp)
    c690:	dec00204 	addi	sp,sp,8
    c694:	f800283a 	ret

0000c698 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
    c698:	defff004 	addi	sp,sp,-64
    c69c:	de00012e 	bgeu	sp,et,c6a4 <altera_avalon_lcd_16207_write+0xc>
    c6a0:	003da0fa 	break	3
    c6a4:	dfc00f15 	stw	ra,60(sp)
    c6a8:	df000e15 	stw	fp,56(sp)
    c6ac:	dc800d15 	stw	r18,52(sp)
    c6b0:	dc400c15 	stw	r17,48(sp)
    c6b4:	dc000b15 	stw	r16,44(sp)
    c6b8:	df000b04 	addi	fp,sp,44
    c6bc:	e13ffc15 	stw	r4,-16(fp)
    c6c0:	e17ffd15 	stw	r5,-12(fp)
    c6c4:	e1bffe15 	stw	r6,-8(fp)
    c6c8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
    c6cc:	e0bffe17 	ldw	r2,-8(fp)
    c6d0:	1007883a 	mov	r3,r2
    c6d4:	e0bffd17 	ldw	r2,-12(fp)
    c6d8:	10c5883a 	add	r2,r2,r3
    c6dc:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
    c6e0:	e0fffc17 	ldw	r3,-16(fp)
    c6e4:	00800044 	movi	r2,1
    c6e8:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
    c6ec:	0000a306 	br	c97c <altera_avalon_lcd_16207_write+0x2e4>
  {
    char c = *ptr;
    c6f0:	e0bffd17 	ldw	r2,-12(fp)
    c6f4:	10800003 	ldbu	r2,0(r2)
    c6f8:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
    c6fc:	e0bffc17 	ldw	r2,-16(fp)
    c700:	10800903 	ldbu	r2,36(r2)
    c704:	10803fcc 	andi	r2,r2,255
    c708:	1080201c 	xori	r2,r2,128
    c70c:	10bfe004 	addi	r2,r2,-128
    c710:	1004803a 	cmplt	r2,r2,zero
    c714:	10003b1e 	bne	r2,zero,c804 <altera_avalon_lcd_16207_write+0x16c>
    {
      unsigned int esccount = sp->esccount;
    c718:	e0bffc17 	ldw	r2,-16(fp)
    c71c:	10800903 	ldbu	r2,36(r2)
    c720:	10803fcc 	andi	r2,r2,255
    c724:	1080201c 	xori	r2,r2,128
    c728:	10bfe004 	addi	r2,r2,-128
    c72c:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
    c730:	e0bff717 	ldw	r2,-36(fp)
    c734:	1004c03a 	cmpne	r2,r2,zero
    c738:	1000031e 	bne	r2,zero,c748 <altera_avalon_lcd_16207_write+0xb0>
    c73c:	e0bff807 	ldb	r2,-32(fp)
    c740:	108016d8 	cmpnei	r2,r2,91
    c744:	1000111e 	bne	r2,zero,c78c <altera_avalon_lcd_16207_write+0xf4>
    c748:	e0bff717 	ldw	r2,-36(fp)
    c74c:	1005003a 	cmpeq	r2,r2,zero
    c750:	10001a1e 	bne	r2,zero,c7bc <altera_avalon_lcd_16207_write+0x124>
    c754:	e0bff807 	ldb	r2,-32(fp)
    c758:	1007883a 	mov	r3,r2
    c75c:	00800074 	movhi	r2,1
    c760:	10817d04 	addi	r2,r2,1524
    c764:	10800017 	ldw	r2,0(r2)
    c768:	1885883a 	add	r2,r3,r2
    c76c:	10800003 	ldbu	r2,0(r2)
    c770:	10803fcc 	andi	r2,r2,255
    c774:	1080010c 	andi	r2,r2,4
    c778:	1004c03a 	cmpne	r2,r2,zero
    c77c:	10000f1e 	bne	r2,zero,c7bc <altera_avalon_lcd_16207_write+0x124>
    c780:	e0bff807 	ldb	r2,-32(fp)
    c784:	10800ee0 	cmpeqi	r2,r2,59
    c788:	10000c1e 	bne	r2,zero,c7bc <altera_avalon_lcd_16207_write+0x124>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
    c78c:	e0fff717 	ldw	r3,-36(fp)
    c790:	e0bffc17 	ldw	r2,-16(fp)
    c794:	1885883a 	add	r2,r3,r2
    c798:	10800a04 	addi	r2,r2,40
    c79c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
    c7a0:	e17ff807 	ldb	r5,-32(fp)
    c7a4:	e13ffc17 	ldw	r4,-16(fp)
    c7a8:	000c3ac0 	call	c3ac <lcd_handle_escape>

        sp->esccount = -1;
    c7ac:	e0fffc17 	ldw	r3,-16(fp)
    c7b0:	00bfffc4 	movi	r2,-1
    c7b4:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
    c7b8:	00006d06 	br	c970 <altera_avalon_lcd_16207_write+0x2d8>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
    c7bc:	e0bffc17 	ldw	r2,-16(fp)
    c7c0:	10800903 	ldbu	r2,36(r2)
    c7c4:	10803fcc 	andi	r2,r2,255
    c7c8:	108001e8 	cmpgeui	r2,r2,7
    c7cc:	1000681e 	bne	r2,zero,c970 <altera_avalon_lcd_16207_write+0x2d8>
      {
        sp->escape[esccount] = c;
    c7d0:	e0fff717 	ldw	r3,-36(fp)
    c7d4:	e0bffc17 	ldw	r2,-16(fp)
    c7d8:	1885883a 	add	r2,r3,r2
    c7dc:	10c00a04 	addi	r3,r2,40
    c7e0:	e0bff803 	ldbu	r2,-32(fp)
    c7e4:	18800005 	stb	r2,0(r3)
        sp->esccount++;
    c7e8:	e0bffc17 	ldw	r2,-16(fp)
    c7ec:	10800903 	ldbu	r2,36(r2)
    c7f0:	10800044 	addi	r2,r2,1
    c7f4:	1007883a 	mov	r3,r2
    c7f8:	e0bffc17 	ldw	r2,-16(fp)
    c7fc:	10c00905 	stb	r3,36(r2)
    c800:	00005b06 	br	c970 <altera_avalon_lcd_16207_write+0x2d8>
      }
    }
    else if (c == 27) /* ESC */
    c804:	e0bff807 	ldb	r2,-32(fp)
    c808:	108006d8 	cmpnei	r2,r2,27
    c80c:	1000031e 	bne	r2,zero,c81c <altera_avalon_lcd_16207_write+0x184>
    {
      sp->esccount = 0;
    c810:	e0bffc17 	ldw	r2,-16(fp)
    c814:	10000905 	stb	zero,36(r2)
    c818:	00005506 	br	c970 <altera_avalon_lcd_16207_write+0x2d8>
    }
    else if (c == '\r')
    c81c:	e0bff807 	ldb	r2,-32(fp)
    c820:	10800358 	cmpnei	r2,r2,13
    c824:	1000031e 	bne	r2,zero,c834 <altera_avalon_lcd_16207_write+0x19c>
    {
      sp->x = 0;
    c828:	e0bffc17 	ldw	r2,-16(fp)
    c82c:	10000845 	stb	zero,33(r2)
    c830:	00004f06 	br	c970 <altera_avalon_lcd_16207_write+0x2d8>
    }
    else if (c == '\n')
    c834:	e0bff807 	ldb	r2,-32(fp)
    c838:	10800298 	cmpnei	r2,r2,10
    c83c:	1000101e 	bne	r2,zero,c880 <altera_avalon_lcd_16207_write+0x1e8>
    {
      sp->x = 0;
    c840:	e0bffc17 	ldw	r2,-16(fp)
    c844:	10000845 	stb	zero,33(r2)
      sp->y++;
    c848:	e0bffc17 	ldw	r2,-16(fp)
    c84c:	10800883 	ldbu	r2,34(r2)
    c850:	10800044 	addi	r2,r2,1
    c854:	1007883a 	mov	r3,r2
    c858:	e0bffc17 	ldw	r2,-16(fp)
    c85c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
    c860:	e0bffc17 	ldw	r2,-16(fp)
    c864:	10800883 	ldbu	r2,34(r2)
    c868:	10803fcc 	andi	r2,r2,255
    c86c:	108000f0 	cmpltui	r2,r2,3
    c870:	10003f1e 	bne	r2,zero,c970 <altera_avalon_lcd_16207_write+0x2d8>
        lcd_scroll_up(sp);
    c874:	e13ffc17 	ldw	r4,-16(fp)
    c878:	000c2c40 	call	c2c4 <lcd_scroll_up>
    c87c:	00003c06 	br	c970 <altera_avalon_lcd_16207_write+0x2d8>
    }
    else if (c == '\b')
    c880:	e0bff807 	ldb	r2,-32(fp)
    c884:	10800218 	cmpnei	r2,r2,8
    c888:	10000c1e 	bne	r2,zero,c8bc <altera_avalon_lcd_16207_write+0x224>
    {
      if (sp->x > 0)
    c88c:	e0bffc17 	ldw	r2,-16(fp)
    c890:	10800843 	ldbu	r2,33(r2)
    c894:	10803fcc 	andi	r2,r2,255
    c898:	1005003a 	cmpeq	r2,r2,zero
    c89c:	1000341e 	bne	r2,zero,c970 <altera_avalon_lcd_16207_write+0x2d8>
        sp->x--;
    c8a0:	e0bffc17 	ldw	r2,-16(fp)
    c8a4:	10800843 	ldbu	r2,33(r2)
    c8a8:	10bfffc4 	addi	r2,r2,-1
    c8ac:	1007883a 	mov	r3,r2
    c8b0:	e0bffc17 	ldw	r2,-16(fp)
    c8b4:	10c00845 	stb	r3,33(r2)
    c8b8:	00002d06 	br	c970 <altera_avalon_lcd_16207_write+0x2d8>
    }
    else if (isprint(c))
    c8bc:	e0bff807 	ldb	r2,-32(fp)
    c8c0:	1007883a 	mov	r3,r2
    c8c4:	00800074 	movhi	r2,1
    c8c8:	10817d04 	addi	r2,r2,1524
    c8cc:	10800017 	ldw	r2,0(r2)
    c8d0:	1885883a 	add	r2,r3,r2
    c8d4:	10800003 	ldbu	r2,0(r2)
    c8d8:	10803fcc 	andi	r2,r2,255
    c8dc:	1080201c 	xori	r2,r2,128
    c8e0:	10bfe004 	addi	r2,r2,-128
    c8e4:	108025cc 	andi	r2,r2,151
    c8e8:	1005003a 	cmpeq	r2,r2,zero
    c8ec:	1000201e 	bne	r2,zero,c970 <altera_avalon_lcd_16207_write+0x2d8>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
    c8f0:	e0bffc17 	ldw	r2,-16(fp)
    c8f4:	10800883 	ldbu	r2,34(r2)
    c8f8:	10803fcc 	andi	r2,r2,255
    c8fc:	108000b0 	cmpltui	r2,r2,2
    c900:	1000021e 	bne	r2,zero,c90c <altera_avalon_lcd_16207_write+0x274>
        lcd_scroll_up(sp);
    c904:	e13ffc17 	ldw	r4,-16(fp)
    c908:	000c2c40 	call	c2c4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    c90c:	e0bffc17 	ldw	r2,-16(fp)
    c910:	10800843 	ldbu	r2,33(r2)
    c914:	10803fcc 	andi	r2,r2,255
    c918:	10801428 	cmpgeui	r2,r2,80
    c91c:	10000e1e 	bne	r2,zero,c958 <altera_avalon_lcd_16207_write+0x2c0>
        sp->line[sp->y].data[sp->x] = c;
    c920:	e0bffc17 	ldw	r2,-16(fp)
    c924:	10800883 	ldbu	r2,34(r2)
    c928:	11003fcc 	andi	r4,r2,255
    c92c:	e0bffc17 	ldw	r2,-16(fp)
    c930:	10800843 	ldbu	r2,33(r2)
    c934:	14403fcc 	andi	r17,r2,255
    c938:	e43ffc17 	ldw	r16,-16(fp)
    c93c:	014018c4 	movi	r5,99
    c940:	000a6b00 	call	a6b0 <__mulsi3>
    c944:	1405883a 	add	r2,r2,r16
    c948:	1445883a 	add	r2,r2,r17
    c94c:	10c01004 	addi	r3,r2,64
    c950:	e0bff803 	ldbu	r2,-32(fp)
    c954:	18800005 	stb	r2,0(r3)

      sp->x++;
    c958:	e0bffc17 	ldw	r2,-16(fp)
    c95c:	10800843 	ldbu	r2,33(r2)
    c960:	10800044 	addi	r2,r2,1
    c964:	1007883a 	mov	r3,r2
    c968:	e0bffc17 	ldw	r2,-16(fp)
    c96c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
    c970:	e0bffd17 	ldw	r2,-12(fp)
    c974:	10800044 	addi	r2,r2,1
    c978:	e0bffd15 	stw	r2,-12(fp)
    c97c:	e0fffd17 	ldw	r3,-12(fp)
    c980:	e0bffb17 	ldw	r2,-20(fp)
    c984:	18bf5a36 	bltu	r3,r2,c6f0 <altera_avalon_lcd_16207_write+0x58>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
    c988:	00800404 	movi	r2,16
    c98c:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    c990:	e03ffa15 	stw	zero,-24(fp)
    c994:	00003906 	br	ca7c <altera_avalon_lcd_16207_write+0x3e4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
    c998:	00801404 	movi	r2,80
    c99c:	e0bff615 	stw	r2,-40(fp)
    c9a0:	00001206 	br	c9ec <altera_avalon_lcd_16207_write+0x354>
      if (sp->line[y].data[width-1] != ' ')
    c9a4:	e13ffa17 	ldw	r4,-24(fp)
    c9a8:	e0bff617 	ldw	r2,-40(fp)
    c9ac:	147fffc4 	addi	r17,r2,-1
    c9b0:	e43ffc17 	ldw	r16,-16(fp)
    c9b4:	014018c4 	movi	r5,99
    c9b8:	000a6b00 	call	a6b0 <__mulsi3>
    c9bc:	1405883a 	add	r2,r2,r16
    c9c0:	1445883a 	add	r2,r2,r17
    c9c4:	10801004 	addi	r2,r2,64
    c9c8:	10800003 	ldbu	r2,0(r2)
    c9cc:	10803fcc 	andi	r2,r2,255
    c9d0:	1080201c 	xori	r2,r2,128
    c9d4:	10bfe004 	addi	r2,r2,-128
    c9d8:	10800818 	cmpnei	r2,r2,32
    c9dc:	1000061e 	bne	r2,zero,c9f8 <altera_avalon_lcd_16207_write+0x360>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
    c9e0:	e0bff617 	ldw	r2,-40(fp)
    c9e4:	10bfffc4 	addi	r2,r2,-1
    c9e8:	e0bff615 	stw	r2,-40(fp)
    c9ec:	e0bff617 	ldw	r2,-40(fp)
    c9f0:	10800048 	cmpgei	r2,r2,1
    c9f4:	103feb1e 	bne	r2,zero,c9a4 <altera_avalon_lcd_16207_write+0x30c>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
    c9f8:	e0bff617 	ldw	r2,-40(fp)
    c9fc:	10800448 	cmpgei	r2,r2,17
    ca00:	1000031e 	bne	r2,zero,ca10 <altera_avalon_lcd_16207_write+0x378>
      width = ALT_LCD_WIDTH;
    ca04:	00800404 	movi	r2,16
    ca08:	e0bff615 	stw	r2,-40(fp)
    ca0c:	00000306 	br	ca1c <altera_avalon_lcd_16207_write+0x384>
    else
      width++;
    ca10:	e0bff617 	ldw	r2,-40(fp)
    ca14:	10800044 	addi	r2,r2,1
    ca18:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
    ca1c:	e13ffa17 	ldw	r4,-24(fp)
    ca20:	e0bff617 	ldw	r2,-40(fp)
    ca24:	1023883a 	mov	r17,r2
    ca28:	e43ffc17 	ldw	r16,-16(fp)
    ca2c:	014018c4 	movi	r5,99
    ca30:	000a6b00 	call	a6b0 <__mulsi3>
    ca34:	1405883a 	add	r2,r2,r16
    ca38:	10802404 	addi	r2,r2,144
    ca3c:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
    ca40:	e0fff917 	ldw	r3,-28(fp)
    ca44:	e0bff617 	ldw	r2,-40(fp)
    ca48:	1880020e 	bge	r3,r2,ca54 <altera_avalon_lcd_16207_write+0x3bc>
      widthmax = width;
    ca4c:	e0bff617 	ldw	r2,-40(fp)
    ca50:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
    ca54:	e13ffa17 	ldw	r4,-24(fp)
    ca58:	e43ffc17 	ldw	r16,-16(fp)
    ca5c:	014018c4 	movi	r5,99
    ca60:	000a6b00 	call	a6b0 <__mulsi3>
    ca64:	1405883a 	add	r2,r2,r16
    ca68:	10802404 	addi	r2,r2,144
    ca6c:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    ca70:	e0bffa17 	ldw	r2,-24(fp)
    ca74:	10800044 	addi	r2,r2,1
    ca78:	e0bffa15 	stw	r2,-24(fp)
    ca7c:	e0bffa17 	ldw	r2,-24(fp)
    ca80:	10800090 	cmplti	r2,r2,2
    ca84:	103fc41e 	bne	r2,zero,c998 <altera_avalon_lcd_16207_write+0x300>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
    ca88:	e0bff917 	ldw	r2,-28(fp)
    ca8c:	10800448 	cmpgei	r2,r2,17
    ca90:	1000031e 	bne	r2,zero,caa0 <altera_avalon_lcd_16207_write+0x408>
    sp->scrollmax = 0;
    ca94:	e0bffc17 	ldw	r2,-16(fp)
    ca98:	10000985 	stb	zero,38(r2)
    ca9c:	00003106 	br	cb64 <altera_avalon_lcd_16207_write+0x4cc>
  else
  {
    widthmax *= 2;
    caa0:	e0bff917 	ldw	r2,-28(fp)
    caa4:	1085883a 	add	r2,r2,r2
    caa8:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
    caac:	e0bff917 	ldw	r2,-28(fp)
    cab0:	1007883a 	mov	r3,r2
    cab4:	e0bffc17 	ldw	r2,-16(fp)
    cab8:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cabc:	e03ffa15 	stw	zero,-24(fp)
    cac0:	00002506 	br	cb58 <altera_avalon_lcd_16207_write+0x4c0>
      if (sp->line[y].width > ALT_LCD_WIDTH)
    cac4:	e13ffa17 	ldw	r4,-24(fp)
    cac8:	e43ffc17 	ldw	r16,-16(fp)
    cacc:	014018c4 	movi	r5,99
    cad0:	000a6b00 	call	a6b0 <__mulsi3>
    cad4:	1405883a 	add	r2,r2,r16
    cad8:	10802404 	addi	r2,r2,144
    cadc:	10800043 	ldbu	r2,1(r2)
    cae0:	10803fcc 	andi	r2,r2,255
    cae4:	1080201c 	xori	r2,r2,128
    cae8:	10bfe004 	addi	r2,r2,-128
    caec:	10800450 	cmplti	r2,r2,17
    caf0:	1000161e 	bne	r2,zero,cb4c <altera_avalon_lcd_16207_write+0x4b4>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
    caf4:	e4bffa17 	ldw	r18,-24(fp)
    caf8:	e13ffa17 	ldw	r4,-24(fp)
    cafc:	e43ffc17 	ldw	r16,-16(fp)
    cb00:	014018c4 	movi	r5,99
    cb04:	000a6b00 	call	a6b0 <__mulsi3>
    cb08:	1405883a 	add	r2,r2,r16
    cb0c:	10802404 	addi	r2,r2,144
    cb10:	10800043 	ldbu	r2,1(r2)
    cb14:	10803fcc 	andi	r2,r2,255
    cb18:	1080201c 	xori	r2,r2,128
    cb1c:	10bfe004 	addi	r2,r2,-128
    cb20:	1008923a 	slli	r4,r2,8
    cb24:	e17ff917 	ldw	r5,-28(fp)
    cb28:	000a5e00 	call	a5e0 <__divsi3>
    cb2c:	1023883a 	mov	r17,r2
    cb30:	e43ffc17 	ldw	r16,-16(fp)
    cb34:	9009883a 	mov	r4,r18
    cb38:	014018c4 	movi	r5,99
    cb3c:	000a6b00 	call	a6b0 <__mulsi3>
    cb40:	1405883a 	add	r2,r2,r16
    cb44:	10802404 	addi	r2,r2,144
    cb48:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cb4c:	e0bffa17 	ldw	r2,-24(fp)
    cb50:	10800044 	addi	r2,r2,1
    cb54:	e0bffa15 	stw	r2,-24(fp)
    cb58:	e0bffa17 	ldw	r2,-24(fp)
    cb5c:	10800090 	cmplti	r2,r2,2
    cb60:	103fd81e 	bne	r2,zero,cac4 <altera_avalon_lcd_16207_write+0x42c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
    cb64:	e0bffc17 	ldw	r2,-16(fp)
    cb68:	10800943 	ldbu	r2,37(r2)
    cb6c:	10803fcc 	andi	r2,r2,255
    cb70:	1080201c 	xori	r2,r2,128
    cb74:	10bfe004 	addi	r2,r2,-128
    cb78:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
    cb7c:	e13ffc17 	ldw	r4,-16(fp)
    cb80:	000c0a80 	call	c0a8 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
    cb84:	e0bffc17 	ldw	r2,-16(fp)
    cb88:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
    cb8c:	e0bffc17 	ldw	r2,-16(fp)
    cb90:	10800943 	ldbu	r2,37(r2)
    cb94:	10c03fcc 	andi	r3,r2,255
    cb98:	18c0201c 	xori	r3,r3,128
    cb9c:	18ffe004 	addi	r3,r3,-128
    cba0:	e0bff517 	ldw	r2,-44(fp)
    cba4:	18800426 	beq	r3,r2,cbb8 <altera_avalon_lcd_16207_write+0x520>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
    cba8:	e0fffc17 	ldw	r3,-16(fp)
    cbac:	00800044 	movi	r2,1
    cbb0:	188009c5 	stb	r2,39(r3)
  }
    cbb4:	003feb06 	br	cb64 <altera_avalon_lcd_16207_write+0x4cc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
    cbb8:	e0bffe17 	ldw	r2,-8(fp)
}
    cbbc:	e037883a 	mov	sp,fp
    cbc0:	dfc00417 	ldw	ra,16(sp)
    cbc4:	df000317 	ldw	fp,12(sp)
    cbc8:	dc800217 	ldw	r18,8(sp)
    cbcc:	dc400117 	ldw	r17,4(sp)
    cbd0:	dc000017 	ldw	r16,0(sp)
    cbd4:	dec00504 	addi	sp,sp,20
    cbd8:	f800283a 	ret

0000cbdc <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
    cbdc:	defffc04 	addi	sp,sp,-16
    cbe0:	de00012e 	bgeu	sp,et,cbe8 <alt_lcd_16207_timeout+0xc>
    cbe4:	003da0fa 	break	3
    cbe8:	dfc00315 	stw	ra,12(sp)
    cbec:	df000215 	stw	fp,8(sp)
    cbf0:	df000204 	addi	fp,sp,8
    cbf4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
    cbf8:	e0bfff17 	ldw	r2,-4(fp)
    cbfc:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
    cc00:	e0bffe17 	ldw	r2,-8(fp)
    cc04:	10800943 	ldbu	r2,37(r2)
    cc08:	10803fcc 	andi	r2,r2,255
    cc0c:	1080201c 	xori	r2,r2,128
    cc10:	10bfe004 	addi	r2,r2,-128
    cc14:	10c00044 	addi	r3,r2,1
    cc18:	e0bffe17 	ldw	r2,-8(fp)
    cc1c:	10800983 	ldbu	r2,38(r2)
    cc20:	10803fcc 	andi	r2,r2,255
    cc24:	1080201c 	xori	r2,r2,128
    cc28:	10bfe004 	addi	r2,r2,-128
    cc2c:	18800316 	blt	r3,r2,cc3c <alt_lcd_16207_timeout+0x60>
    sp->scrollpos = 0;
    cc30:	e0bffe17 	ldw	r2,-8(fp)
    cc34:	10000945 	stb	zero,37(r2)
    cc38:	00000606 	br	cc54 <alt_lcd_16207_timeout+0x78>
  else
    sp->scrollpos = sp->scrollpos + 1;
    cc3c:	e0bffe17 	ldw	r2,-8(fp)
    cc40:	10800943 	ldbu	r2,37(r2)
    cc44:	10800044 	addi	r2,r2,1
    cc48:	1007883a 	mov	r3,r2
    cc4c:	e0bffe17 	ldw	r2,-8(fp)
    cc50:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
    cc54:	e0bffe17 	ldw	r2,-8(fp)
    cc58:	10800983 	ldbu	r2,38(r2)
    cc5c:	10803fcc 	andi	r2,r2,255
    cc60:	1080201c 	xori	r2,r2,128
    cc64:	10bfe004 	addi	r2,r2,-128
    cc68:	10800050 	cmplti	r2,r2,1
    cc6c:	1000091e 	bne	r2,zero,cc94 <alt_lcd_16207_timeout+0xb8>
    cc70:	e0bffe17 	ldw	r2,-8(fp)
    cc74:	108009c3 	ldbu	r2,39(r2)
    cc78:	10803fcc 	andi	r2,r2,255
    cc7c:	1080201c 	xori	r2,r2,128
    cc80:	10bfe004 	addi	r2,r2,-128
    cc84:	1004c03a 	cmpne	r2,r2,zero
    cc88:	1000021e 	bne	r2,zero,cc94 <alt_lcd_16207_timeout+0xb8>
    lcd_repaint_screen(sp);
    cc8c:	e13ffe17 	ldw	r4,-8(fp)
    cc90:	000c0a80 	call	c0a8 <lcd_repaint_screen>

  return sp->period;
    cc94:	e0bffe17 	ldw	r2,-8(fp)
    cc98:	10800717 	ldw	r2,28(r2)
}
    cc9c:	e037883a 	mov	sp,fp
    cca0:	dfc00117 	ldw	ra,4(sp)
    cca4:	df000017 	ldw	fp,0(sp)
    cca8:	dec00204 	addi	sp,sp,8
    ccac:	f800283a 	ret

0000ccb0 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
    ccb0:	defffc04 	addi	sp,sp,-16
    ccb4:	de00012e 	bgeu	sp,et,ccbc <altera_avalon_lcd_16207_init+0xc>
    ccb8:	003da0fa 	break	3
    ccbc:	dfc00315 	stw	ra,12(sp)
    ccc0:	df000215 	stw	fp,8(sp)
    ccc4:	df000204 	addi	fp,sp,8
    ccc8:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
    cccc:	e0bfff17 	ldw	r2,-4(fp)
    ccd0:	10800017 	ldw	r2,0(r2)
    ccd4:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
    ccd8:	e0bfff17 	ldw	r2,-4(fp)
    ccdc:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
    cce0:	010ea604 	movi	r4,15000
    cce4:	000b2100 	call	b210 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    cce8:	e0bffe17 	ldw	r2,-8(fp)
    ccec:	1007883a 	mov	r3,r2
    ccf0:	00800c04 	movi	r2,48
    ccf4:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
    ccf8:	01040104 	movi	r4,4100
    ccfc:	000b2100 	call	b210 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    cd00:	e0bffe17 	ldw	r2,-8(fp)
    cd04:	1007883a 	mov	r3,r2
    cd08:	00800c04 	movi	r2,48
    cd0c:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
    cd10:	0100fa04 	movi	r4,1000
    cd14:	000b2100 	call	b210 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    cd18:	e0bffe17 	ldw	r2,-8(fp)
    cd1c:	1007883a 	mov	r3,r2
    cd20:	00800c04 	movi	r2,48
    cd24:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
    cd28:	e13fff17 	ldw	r4,-4(fp)
    cd2c:	01400e04 	movi	r5,56
    cd30:	000be2c0 	call	be2c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
    cd34:	e13fff17 	ldw	r4,-4(fp)
    cd38:	01400204 	movi	r5,8
    cd3c:	000be2c0 	call	be2c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
    cd40:	e13fff17 	ldw	r4,-4(fp)
    cd44:	000bfc80 	call	bfc8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
    cd48:	e13fff17 	ldw	r4,-4(fp)
    cd4c:	01400184 	movi	r5,6
    cd50:	000be2c0 	call	be2c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
    cd54:	e13fff17 	ldw	r4,-4(fp)
    cd58:	01400304 	movi	r5,12
    cd5c:	000be2c0 	call	be2c <lcd_write_command>

  sp->esccount = -1;
    cd60:	e0ffff17 	ldw	r3,-4(fp)
    cd64:	00bfffc4 	movi	r2,-1
    cd68:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
    cd6c:	e0bfff17 	ldw	r2,-4(fp)
    cd70:	11000a04 	addi	r4,r2,40
    cd74:	000b883a 	mov	r5,zero
    cd78:	01800204 	movi	r6,8
    cd7c:	000e2a40 	call	e2a4 <memset>

  sp->scrollpos = 0;
    cd80:	e0bfff17 	ldw	r2,-4(fp)
    cd84:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
    cd88:	e0bfff17 	ldw	r2,-4(fp)
    cd8c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
    cd90:	e0bfff17 	ldw	r2,-4(fp)
    cd94:	100009c5 	stb	zero,39(r2)
    cd98:	00800074 	movhi	r2,1
    cd9c:	1087e404 	addi	r2,r2,8080
    cda0:	10800017 	ldw	r2,0(r2)
    cda4:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
    cda8:	01400284 	movi	r5,10
    cdac:	000a6a00 	call	a6a0 <__udivsi3>
    cdb0:	1007883a 	mov	r3,r2
    cdb4:	e0bfff17 	ldw	r2,-4(fp)
    cdb8:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
    cdbc:	e0bfff17 	ldw	r2,-4(fp)
    cdc0:	11000104 	addi	r4,r2,4
    cdc4:	e0bfff17 	ldw	r2,-4(fp)
    cdc8:	10800717 	ldw	r2,28(r2)
    cdcc:	100b883a 	mov	r5,r2
    cdd0:	01800074 	movhi	r6,1
    cdd4:	31b2f704 	addi	r6,r6,-13348
    cdd8:	e1ffff17 	ldw	r7,-4(fp)
    cddc:	000ce540 	call	ce54 <alt_alarm_start>
}
    cde0:	e037883a 	mov	sp,fp
    cde4:	dfc00117 	ldw	ra,4(sp)
    cde8:	df000017 	ldw	fp,0(sp)
    cdec:	dec00204 	addi	sp,sp,8
    cdf0:	f800283a 	ret

0000cdf4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
    cdf4:	defffa04 	addi	sp,sp,-24
    cdf8:	de00012e 	bgeu	sp,et,ce00 <altera_avalon_lcd_16207_write_fd+0xc>
    cdfc:	003da0fa 	break	3
    ce00:	dfc00515 	stw	ra,20(sp)
    ce04:	df000415 	stw	fp,16(sp)
    ce08:	df000404 	addi	fp,sp,16
    ce0c:	e13ffd15 	stw	r4,-12(fp)
    ce10:	e17ffe15 	stw	r5,-8(fp)
    ce14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
    ce18:	e0bffd17 	ldw	r2,-12(fp)
    ce1c:	10800017 	ldw	r2,0(r2)
    ce20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
    ce24:	e0bffc17 	ldw	r2,-16(fp)
    ce28:	11000a04 	addi	r4,r2,40
    ce2c:	e0bffd17 	ldw	r2,-12(fp)
    ce30:	11c00217 	ldw	r7,8(r2)
    ce34:	e17ffe17 	ldw	r5,-8(fp)
    ce38:	e1bfff17 	ldw	r6,-4(fp)
    ce3c:	000c6980 	call	c698 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
    ce40:	e037883a 	mov	sp,fp
    ce44:	dfc00117 	ldw	ra,4(sp)
    ce48:	df000017 	ldw	fp,0(sp)
    ce4c:	dec00204 	addi	sp,sp,8
    ce50:	f800283a 	ret

0000ce54 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    ce54:	defff404 	addi	sp,sp,-48
    ce58:	de00012e 	bgeu	sp,et,ce60 <alt_alarm_start+0xc>
    ce5c:	003da0fa 	break	3
    ce60:	df000b15 	stw	fp,44(sp)
    ce64:	df000b04 	addi	fp,sp,44
    ce68:	e13ffb15 	stw	r4,-20(fp)
    ce6c:	e17ffc15 	stw	r5,-16(fp)
    ce70:	e1bffd15 	stw	r6,-12(fp)
    ce74:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    ce78:	e03ff915 	stw	zero,-28(fp)
    ce7c:	00800074 	movhi	r2,1
    ce80:	1087e404 	addi	r2,r2,8080
    ce84:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    ce88:	1005003a 	cmpeq	r2,r2,zero
    ce8c:	1000411e 	bne	r2,zero,cf94 <alt_alarm_start+0x140>
  {
    if (alarm)
    ce90:	e0bffb17 	ldw	r2,-20(fp)
    ce94:	1005003a 	cmpeq	r2,r2,zero
    ce98:	10003b1e 	bne	r2,zero,cf88 <alt_alarm_start+0x134>
    {
      alarm->callback = callback;
    ce9c:	e0fffb17 	ldw	r3,-20(fp)
    cea0:	e0bffd17 	ldw	r2,-12(fp)
    cea4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    cea8:	e0fffb17 	ldw	r3,-20(fp)
    ceac:	e0bffe17 	ldw	r2,-8(fp)
    ceb0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ceb4:	0005303a 	rdctl	r2,status
    ceb8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cebc:	e0fff817 	ldw	r3,-32(fp)
    cec0:	00bfff84 	movi	r2,-2
    cec4:	1884703a 	and	r2,r3,r2
    cec8:	1001703a 	wrctl	status,r2
  
  return context;
    cecc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    ced0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ced4:	00800074 	movhi	r2,1
    ced8:	1087e504 	addi	r2,r2,8084
    cedc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    cee0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    cee4:	e0fffc17 	ldw	r3,-16(fp)
    cee8:	e0bff917 	ldw	r2,-28(fp)
    ceec:	1885883a 	add	r2,r3,r2
    cef0:	10c00044 	addi	r3,r2,1
    cef4:	e0bffb17 	ldw	r2,-20(fp)
    cef8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    cefc:	e0bffb17 	ldw	r2,-20(fp)
    cf00:	10c00217 	ldw	r3,8(r2)
    cf04:	e0bff917 	ldw	r2,-28(fp)
    cf08:	1880042e 	bgeu	r3,r2,cf1c <alt_alarm_start+0xc8>
      {
        alarm->rollover = 1;
    cf0c:	e0fffb17 	ldw	r3,-20(fp)
    cf10:	00800044 	movi	r2,1
    cf14:	18800405 	stb	r2,16(r3)
    cf18:	00000206 	br	cf24 <alt_alarm_start+0xd0>
      }
      else
      {
        alarm->rollover = 0;
    cf1c:	e0bffb17 	ldw	r2,-20(fp)
    cf20:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    cf24:	e0fffb17 	ldw	r3,-20(fp)
    cf28:	00800074 	movhi	r2,1
    cf2c:	10817b04 	addi	r2,r2,1516
    cf30:	e0bff615 	stw	r2,-40(fp)
    cf34:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cf38:	e0fff717 	ldw	r3,-36(fp)
    cf3c:	e0bff617 	ldw	r2,-40(fp)
    cf40:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    cf44:	e0bff617 	ldw	r2,-40(fp)
    cf48:	10c00017 	ldw	r3,0(r2)
    cf4c:	e0bff717 	ldw	r2,-36(fp)
    cf50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cf54:	e0bff617 	ldw	r2,-40(fp)
    cf58:	10c00017 	ldw	r3,0(r2)
    cf5c:	e0bff717 	ldw	r2,-36(fp)
    cf60:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    cf64:	e0fff617 	ldw	r3,-40(fp)
    cf68:	e0bff717 	ldw	r2,-36(fp)
    cf6c:	18800015 	stw	r2,0(r3)
    cf70:	e0bffa17 	ldw	r2,-24(fp)
    cf74:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cf78:	e0bff517 	ldw	r2,-44(fp)
    cf7c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    cf80:	e03fff15 	stw	zero,-4(fp)
    cf84:	00000506 	br	cf9c <alt_alarm_start+0x148>
    }
    else
    {
      return -EINVAL;
    cf88:	00bffa84 	movi	r2,-22
    cf8c:	e0bfff15 	stw	r2,-4(fp)
    cf90:	00000206 	br	cf9c <alt_alarm_start+0x148>
    }
  }
  else
  {
    return -ENOTSUP;
    cf94:	00bfde84 	movi	r2,-134
    cf98:	e0bfff15 	stw	r2,-4(fp)
    cf9c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    cfa0:	e037883a 	mov	sp,fp
    cfa4:	df000017 	ldw	fp,0(sp)
    cfa8:	dec00104 	addi	sp,sp,4
    cfac:	f800283a 	ret

0000cfb0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    cfb0:	defffa04 	addi	sp,sp,-24
    cfb4:	de00012e 	bgeu	sp,et,cfbc <alt_busy_sleep+0xc>
    cfb8:	003da0fa 	break	3
    cfbc:	dfc00515 	stw	ra,20(sp)
    cfc0:	df000415 	stw	fp,16(sp)
    cfc4:	df000404 	addi	fp,sp,16
    cfc8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    cfcc:	00800244 	movi	r2,9
    cfd0:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    cfd4:	e13ffc17 	ldw	r4,-16(fp)
    cfd8:	014003f4 	movhi	r5,15
    cfdc:	29509004 	addi	r5,r5,16960
    cfe0:	000a6b00 	call	a6b0 <__mulsi3>
    cfe4:	100b883a 	mov	r5,r2
    cfe8:	01010b34 	movhi	r4,1068
    cfec:	21076004 	addi	r4,r4,7552
    cff0:	000a6a00 	call	a6a0 <__udivsi3>
    cff4:	100b883a 	mov	r5,r2
    cff8:	01200034 	movhi	r4,32768
    cffc:	213fffc4 	addi	r4,r4,-1
    d000:	000a6a00 	call	a6a0 <__udivsi3>
    d004:	100b883a 	mov	r5,r2
    d008:	e13fff17 	ldw	r4,-4(fp)
    d00c:	000a6a00 	call	a6a0 <__udivsi3>
    d010:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    d014:	e0bffd17 	ldw	r2,-12(fp)
    d018:	1005003a 	cmpeq	r2,r2,zero
    d01c:	10002a1e 	bne	r2,zero,d0c8 <alt_busy_sleep+0x118>
  {
    for(i=0;i<big_loops;i++)
    d020:	e03ffe15 	stw	zero,-8(fp)
    d024:	00001706 	br	d084 <alt_busy_sleep+0xd4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    d028:	00a00034 	movhi	r2,32768
    d02c:	10bfffc4 	addi	r2,r2,-1
    d030:	10bfffc4 	addi	r2,r2,-1
    d034:	103ffe1e 	bne	r2,zero,d030 <alt_busy_sleep+0x80>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    d038:	e13ffc17 	ldw	r4,-16(fp)
    d03c:	014003f4 	movhi	r5,15
    d040:	29509004 	addi	r5,r5,16960
    d044:	000a6b00 	call	a6b0 <__mulsi3>
    d048:	100b883a 	mov	r5,r2
    d04c:	01010b34 	movhi	r4,1068
    d050:	21076004 	addi	r4,r4,7552
    d054:	000a6a00 	call	a6a0 <__udivsi3>
    d058:	100b883a 	mov	r5,r2
    d05c:	01200034 	movhi	r4,32768
    d060:	213fffc4 	addi	r4,r4,-1
    d064:	000a6a00 	call	a6a0 <__udivsi3>
    d068:	1007883a 	mov	r3,r2
    d06c:	e0bfff17 	ldw	r2,-4(fp)
    d070:	10c5c83a 	sub	r2,r2,r3
    d074:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    d078:	e0bffe17 	ldw	r2,-8(fp)
    d07c:	10800044 	addi	r2,r2,1
    d080:	e0bffe15 	stw	r2,-8(fp)
    d084:	e0fffe17 	ldw	r3,-8(fp)
    d088:	e0bffd17 	ldw	r2,-12(fp)
    d08c:	18bfe616 	blt	r3,r2,d028 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    d090:	e13ffc17 	ldw	r4,-16(fp)
    d094:	014003f4 	movhi	r5,15
    d098:	29509004 	addi	r5,r5,16960
    d09c:	000a6b00 	call	a6b0 <__mulsi3>
    d0a0:	100b883a 	mov	r5,r2
    d0a4:	01010b34 	movhi	r4,1068
    d0a8:	21076004 	addi	r4,r4,7552
    d0ac:	000a6a00 	call	a6a0 <__udivsi3>
    d0b0:	1009883a 	mov	r4,r2
    d0b4:	e17fff17 	ldw	r5,-4(fp)
    d0b8:	000a6b00 	call	a6b0 <__mulsi3>
    d0bc:	10bfffc4 	addi	r2,r2,-1
    d0c0:	103ffe1e 	bne	r2,zero,d0bc <alt_busy_sleep+0x10c>
    d0c4:	00000d06 	br	d0fc <alt_busy_sleep+0x14c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    d0c8:	e13ffc17 	ldw	r4,-16(fp)
    d0cc:	014003f4 	movhi	r5,15
    d0d0:	29509004 	addi	r5,r5,16960
    d0d4:	000a6b00 	call	a6b0 <__mulsi3>
    d0d8:	100b883a 	mov	r5,r2
    d0dc:	01010b34 	movhi	r4,1068
    d0e0:	21076004 	addi	r4,r4,7552
    d0e4:	000a6a00 	call	a6a0 <__udivsi3>
    d0e8:	1009883a 	mov	r4,r2
    d0ec:	e17fff17 	ldw	r5,-4(fp)
    d0f0:	000a6b00 	call	a6b0 <__mulsi3>
    d0f4:	10bfffc4 	addi	r2,r2,-1
    d0f8:	00bffe16 	blt	zero,r2,d0f4 <alt_busy_sleep+0x144>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    d0fc:	0005883a 	mov	r2,zero
}
    d100:	e037883a 	mov	sp,fp
    d104:	dfc00117 	ldw	ra,4(sp)
    d108:	df000017 	ldw	fp,0(sp)
    d10c:	dec00204 	addi	sp,sp,8
    d110:	f800283a 	ret

0000d114 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d114:	defff804 	addi	sp,sp,-32
    d118:	de00012e 	bgeu	sp,et,d120 <close+0xc>
    d11c:	003da0fa 	break	3
    d120:	dfc00715 	stw	ra,28(sp)
    d124:	df000615 	stw	fp,24(sp)
    d128:	df000604 	addi	fp,sp,24
    d12c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d130:	e0bffc17 	ldw	r2,-16(fp)
    d134:	1004803a 	cmplt	r2,r2,zero
    d138:	1000091e 	bne	r2,zero,d160 <close+0x4c>
    d13c:	e13ffc17 	ldw	r4,-16(fp)
    d140:	01400304 	movi	r5,12
    d144:	000a6b00 	call	a6b0 <__mulsi3>
    d148:	1007883a 	mov	r3,r2
    d14c:	00800074 	movhi	r2,1
    d150:	1080ad04 	addi	r2,r2,692
    d154:	1887883a 	add	r3,r3,r2
    d158:	e0ffff15 	stw	r3,-4(fp)
    d15c:	00000106 	br	d164 <close+0x50>
    d160:	e03fff15 	stw	zero,-4(fp)
    d164:	e0bfff17 	ldw	r2,-4(fp)
    d168:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    d16c:	e0bffb17 	ldw	r2,-20(fp)
    d170:	1005003a 	cmpeq	r2,r2,zero
    d174:	10001d1e 	bne	r2,zero,d1ec <close+0xd8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d178:	e0bffb17 	ldw	r2,-20(fp)
    d17c:	10800017 	ldw	r2,0(r2)
    d180:	10800417 	ldw	r2,16(r2)
    d184:	1005003a 	cmpeq	r2,r2,zero
    d188:	1000071e 	bne	r2,zero,d1a8 <close+0x94>
    d18c:	e0bffb17 	ldw	r2,-20(fp)
    d190:	10800017 	ldw	r2,0(r2)
    d194:	10800417 	ldw	r2,16(r2)
    d198:	e13ffb17 	ldw	r4,-20(fp)
    d19c:	103ee83a 	callr	r2
    d1a0:	e0bffe15 	stw	r2,-8(fp)
    d1a4:	00000106 	br	d1ac <close+0x98>
    d1a8:	e03ffe15 	stw	zero,-8(fp)
    d1ac:	e0bffe17 	ldw	r2,-8(fp)
    d1b0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d1b4:	e13ffc17 	ldw	r4,-16(fp)
    d1b8:	000dc4c0 	call	dc4c <alt_release_fd>
    if (rval < 0)
    d1bc:	e0bffa17 	ldw	r2,-24(fp)
    d1c0:	1004403a 	cmpge	r2,r2,zero
    d1c4:	1000071e 	bne	r2,zero,d1e4 <close+0xd0>
    {
      ALT_ERRNO = -rval;
    d1c8:	000d21c0 	call	d21c <alt_get_errno>
    d1cc:	e0fffa17 	ldw	r3,-24(fp)
    d1d0:	00c7c83a 	sub	r3,zero,r3
    d1d4:	10c00015 	stw	r3,0(r2)
      return -1;
    d1d8:	00bfffc4 	movi	r2,-1
    d1dc:	e0bffd15 	stw	r2,-12(fp)
    d1e0:	00000806 	br	d204 <close+0xf0>
    }
    return 0;
    d1e4:	e03ffd15 	stw	zero,-12(fp)
    d1e8:	00000606 	br	d204 <close+0xf0>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d1ec:	000d21c0 	call	d21c <alt_get_errno>
    d1f0:	1007883a 	mov	r3,r2
    d1f4:	00801444 	movi	r2,81
    d1f8:	18800015 	stw	r2,0(r3)
    return -1;
    d1fc:	00bfffc4 	movi	r2,-1
    d200:	e0bffd15 	stw	r2,-12(fp)
    d204:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    d208:	e037883a 	mov	sp,fp
    d20c:	dfc00117 	ldw	ra,4(sp)
    d210:	df000017 	ldw	fp,0(sp)
    d214:	dec00204 	addi	sp,sp,8
    d218:	f800283a 	ret

0000d21c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d21c:	defffd04 	addi	sp,sp,-12
    d220:	de00012e 	bgeu	sp,et,d228 <alt_get_errno+0xc>
    d224:	003da0fa 	break	3
    d228:	dfc00215 	stw	ra,8(sp)
    d22c:	df000115 	stw	fp,4(sp)
    d230:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d234:	00800074 	movhi	r2,1
    d238:	10817904 	addi	r2,r2,1508
    d23c:	10800017 	ldw	r2,0(r2)
    d240:	1005003a 	cmpeq	r2,r2,zero
    d244:	1000061e 	bne	r2,zero,d260 <alt_get_errno+0x44>
    d248:	00800074 	movhi	r2,1
    d24c:	10817904 	addi	r2,r2,1508
    d250:	10800017 	ldw	r2,0(r2)
    d254:	103ee83a 	callr	r2
    d258:	e0bfff15 	stw	r2,-4(fp)
    d25c:	00000306 	br	d26c <alt_get_errno+0x50>
    d260:	00800074 	movhi	r2,1
    d264:	1087e604 	addi	r2,r2,8088
    d268:	e0bfff15 	stw	r2,-4(fp)
    d26c:	e0bfff17 	ldw	r2,-4(fp)
}
    d270:	e037883a 	mov	sp,fp
    d274:	dfc00117 	ldw	ra,4(sp)
    d278:	df000017 	ldw	fp,0(sp)
    d27c:	dec00204 	addi	sp,sp,8
    d280:	f800283a 	ret

0000d284 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d284:	deffff04 	addi	sp,sp,-4
    d288:	de00012e 	bgeu	sp,et,d290 <alt_dcache_flush_all+0xc>
    d28c:	003da0fa 	break	3
    d290:	df000015 	stw	fp,0(sp)
    d294:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d298:	e037883a 	mov	sp,fp
    d29c:	df000017 	ldw	fp,0(sp)
    d2a0:	dec00104 	addi	sp,sp,4
    d2a4:	f800283a 	ret

0000d2a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d2a8:	defffc04 	addi	sp,sp,-16
    d2ac:	de00012e 	bgeu	sp,et,d2b4 <alt_dev_null_write+0xc>
    d2b0:	003da0fa 	break	3
    d2b4:	df000315 	stw	fp,12(sp)
    d2b8:	df000304 	addi	fp,sp,12
    d2bc:	e13ffd15 	stw	r4,-12(fp)
    d2c0:	e17ffe15 	stw	r5,-8(fp)
    d2c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d2c8:	e0bfff17 	ldw	r2,-4(fp)
}
    d2cc:	e037883a 	mov	sp,fp
    d2d0:	df000017 	ldw	fp,0(sp)
    d2d4:	dec00104 	addi	sp,sp,4
    d2d8:	f800283a 	ret

0000d2dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d2dc:	defff904 	addi	sp,sp,-28
    d2e0:	de00012e 	bgeu	sp,et,d2e8 <alt_dev_llist_insert+0xc>
    d2e4:	003da0fa 	break	3
    d2e8:	dfc00615 	stw	ra,24(sp)
    d2ec:	df000515 	stw	fp,20(sp)
    d2f0:	df000504 	addi	fp,sp,20
    d2f4:	e13ffd15 	stw	r4,-12(fp)
    d2f8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d2fc:	e0bffd17 	ldw	r2,-12(fp)
    d300:	1005003a 	cmpeq	r2,r2,zero
    d304:	1000041e 	bne	r2,zero,d318 <alt_dev_llist_insert+0x3c>
    d308:	e0bffd17 	ldw	r2,-12(fp)
    d30c:	10800217 	ldw	r2,8(r2)
    d310:	1004c03a 	cmpne	r2,r2,zero
    d314:	1000071e 	bne	r2,zero,d334 <alt_dev_llist_insert+0x58>
  {
    ALT_ERRNO = EINVAL;
    d318:	000d3980 	call	d398 <alt_get_errno>
    d31c:	1007883a 	mov	r3,r2
    d320:	00800584 	movi	r2,22
    d324:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    d328:	00bffa84 	movi	r2,-22
    d32c:	e0bfff15 	stw	r2,-4(fp)
    d330:	00001306 	br	d380 <alt_dev_llist_insert+0xa4>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d334:	e0fffd17 	ldw	r3,-12(fp)
    d338:	e0bffe17 	ldw	r2,-8(fp)
    d33c:	e0bffb15 	stw	r2,-20(fp)
    d340:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d344:	e0fffc17 	ldw	r3,-16(fp)
    d348:	e0bffb17 	ldw	r2,-20(fp)
    d34c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d350:	e0bffb17 	ldw	r2,-20(fp)
    d354:	10c00017 	ldw	r3,0(r2)
    d358:	e0bffc17 	ldw	r2,-16(fp)
    d35c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d360:	e0bffb17 	ldw	r2,-20(fp)
    d364:	10c00017 	ldw	r3,0(r2)
    d368:	e0bffc17 	ldw	r2,-16(fp)
    d36c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d370:	e0fffb17 	ldw	r3,-20(fp)
    d374:	e0bffc17 	ldw	r2,-16(fp)
    d378:	18800015 	stw	r2,0(r3)

  return 0;  
    d37c:	e03fff15 	stw	zero,-4(fp)
    d380:	e0bfff17 	ldw	r2,-4(fp)
}
    d384:	e037883a 	mov	sp,fp
    d388:	dfc00117 	ldw	ra,4(sp)
    d38c:	df000017 	ldw	fp,0(sp)
    d390:	dec00204 	addi	sp,sp,8
    d394:	f800283a 	ret

0000d398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d398:	defffd04 	addi	sp,sp,-12
    d39c:	de00012e 	bgeu	sp,et,d3a4 <alt_get_errno+0xc>
    d3a0:	003da0fa 	break	3
    d3a4:	dfc00215 	stw	ra,8(sp)
    d3a8:	df000115 	stw	fp,4(sp)
    d3ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d3b0:	00800074 	movhi	r2,1
    d3b4:	10817904 	addi	r2,r2,1508
    d3b8:	10800017 	ldw	r2,0(r2)
    d3bc:	1005003a 	cmpeq	r2,r2,zero
    d3c0:	1000061e 	bne	r2,zero,d3dc <alt_get_errno+0x44>
    d3c4:	00800074 	movhi	r2,1
    d3c8:	10817904 	addi	r2,r2,1508
    d3cc:	10800017 	ldw	r2,0(r2)
    d3d0:	103ee83a 	callr	r2
    d3d4:	e0bfff15 	stw	r2,-4(fp)
    d3d8:	00000306 	br	d3e8 <alt_get_errno+0x50>
    d3dc:	00800074 	movhi	r2,1
    d3e0:	1087e604 	addi	r2,r2,8088
    d3e4:	e0bfff15 	stw	r2,-4(fp)
    d3e8:	e0bfff17 	ldw	r2,-4(fp)
}
    d3ec:	e037883a 	mov	sp,fp
    d3f0:	dfc00117 	ldw	ra,4(sp)
    d3f4:	df000017 	ldw	fp,0(sp)
    d3f8:	dec00204 	addi	sp,sp,8
    d3fc:	f800283a 	ret

0000d400 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    d400:	defffd04 	addi	sp,sp,-12
    d404:	de00012e 	bgeu	sp,et,d40c <_do_ctors+0xc>
    d408:	003da0fa 	break	3
    d40c:	dfc00215 	stw	ra,8(sp)
    d410:	df000115 	stw	fp,4(sp)
    d414:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d418:	00bfff04 	movi	r2,-4
    d41c:	00c00074 	movhi	r3,1
    d420:	18f9a604 	addi	r3,r3,-6504
    d424:	1885883a 	add	r2,r3,r2
    d428:	e0bfff15 	stw	r2,-4(fp)
    d42c:	00000606 	br	d448 <_do_ctors+0x48>
        (*ctor) (); 
    d430:	e0bfff17 	ldw	r2,-4(fp)
    d434:	10800017 	ldw	r2,0(r2)
    d438:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d43c:	e0bfff17 	ldw	r2,-4(fp)
    d440:	10bfff04 	addi	r2,r2,-4
    d444:	e0bfff15 	stw	r2,-4(fp)
    d448:	e0ffff17 	ldw	r3,-4(fp)
    d44c:	00800074 	movhi	r2,1
    d450:	10b9a504 	addi	r2,r2,-6508
    d454:	18bff62e 	bgeu	r3,r2,d430 <_do_ctors+0x30>
        (*ctor) (); 
}
    d458:	e037883a 	mov	sp,fp
    d45c:	dfc00117 	ldw	ra,4(sp)
    d460:	df000017 	ldw	fp,0(sp)
    d464:	dec00204 	addi	sp,sp,8
    d468:	f800283a 	ret

0000d46c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    d46c:	defffd04 	addi	sp,sp,-12
    d470:	de00012e 	bgeu	sp,et,d478 <_do_dtors+0xc>
    d474:	003da0fa 	break	3
    d478:	dfc00215 	stw	ra,8(sp)
    d47c:	df000115 	stw	fp,4(sp)
    d480:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d484:	00bfff04 	movi	r2,-4
    d488:	00c00074 	movhi	r3,1
    d48c:	18f9a604 	addi	r3,r3,-6504
    d490:	1885883a 	add	r2,r3,r2
    d494:	e0bfff15 	stw	r2,-4(fp)
    d498:	00000606 	br	d4b4 <_do_dtors+0x48>
        (*dtor) (); 
    d49c:	e0bfff17 	ldw	r2,-4(fp)
    d4a0:	10800017 	ldw	r2,0(r2)
    d4a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d4a8:	e0bfff17 	ldw	r2,-4(fp)
    d4ac:	10bfff04 	addi	r2,r2,-4
    d4b0:	e0bfff15 	stw	r2,-4(fp)
    d4b4:	e0ffff17 	ldw	r3,-4(fp)
    d4b8:	00800074 	movhi	r2,1
    d4bc:	10b9a604 	addi	r2,r2,-6504
    d4c0:	18bff62e 	bgeu	r3,r2,d49c <_do_dtors+0x30>
        (*dtor) (); 
}
    d4c4:	e037883a 	mov	sp,fp
    d4c8:	dfc00117 	ldw	ra,4(sp)
    d4cc:	df000017 	ldw	fp,0(sp)
    d4d0:	dec00204 	addi	sp,sp,8
    d4d4:	f800283a 	ret

0000d4d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    d4d8:	deffff04 	addi	sp,sp,-4
    d4dc:	de00012e 	bgeu	sp,et,d4e4 <alt_icache_flush_all+0xc>
    d4e0:	003da0fa 	break	3
    d4e4:	df000015 	stw	fp,0(sp)
    d4e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    d4ec:	e037883a 	mov	sp,fp
    d4f0:	df000017 	ldw	fp,0(sp)
    d4f4:	dec00104 	addi	sp,sp,4
    d4f8:	f800283a 	ret

0000d4fc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d4fc:	defff904 	addi	sp,sp,-28
    d500:	de00012e 	bgeu	sp,et,d508 <alt_ic_isr_register+0xc>
    d504:	003da0fa 	break	3
    d508:	dfc00615 	stw	ra,24(sp)
    d50c:	df000515 	stw	fp,20(sp)
    d510:	df000504 	addi	fp,sp,20
    d514:	e13ffc15 	stw	r4,-16(fp)
    d518:	e17ffd15 	stw	r5,-12(fp)
    d51c:	e1bffe15 	stw	r6,-8(fp)
    d520:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d524:	e0800217 	ldw	r2,8(fp)
    d528:	d8800015 	stw	r2,0(sp)
    d52c:	e13ffc17 	ldw	r4,-16(fp)
    d530:	e17ffd17 	ldw	r5,-12(fp)
    d534:	e1bffe17 	ldw	r6,-8(fp)
    d538:	e1ffff17 	ldw	r7,-4(fp)
    d53c:	000d6f00 	call	d6f0 <alt_iic_isr_register>
}  
    d540:	e037883a 	mov	sp,fp
    d544:	dfc00117 	ldw	ra,4(sp)
    d548:	df000017 	ldw	fp,0(sp)
    d54c:	dec00204 	addi	sp,sp,8
    d550:	f800283a 	ret

0000d554 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d554:	defff904 	addi	sp,sp,-28
    d558:	de00012e 	bgeu	sp,et,d560 <alt_ic_irq_enable+0xc>
    d55c:	003da0fa 	break	3
    d560:	df000615 	stw	fp,24(sp)
    d564:	df000604 	addi	fp,sp,24
    d568:	e13ffe15 	stw	r4,-8(fp)
    d56c:	e17fff15 	stw	r5,-4(fp)
    d570:	e0bfff17 	ldw	r2,-4(fp)
    d574:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d578:	0005303a 	rdctl	r2,status
    d57c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d580:	e0fffb17 	ldw	r3,-20(fp)
    d584:	00bfff84 	movi	r2,-2
    d588:	1884703a 	and	r2,r3,r2
    d58c:	1001703a 	wrctl	status,r2
  
  return context;
    d590:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d594:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    d598:	e0fffc17 	ldw	r3,-16(fp)
    d59c:	00800044 	movi	r2,1
    d5a0:	10c4983a 	sll	r2,r2,r3
    d5a4:	1007883a 	mov	r3,r2
    d5a8:	00800074 	movhi	r2,1
    d5ac:	1087e304 	addi	r2,r2,8076
    d5b0:	10800017 	ldw	r2,0(r2)
    d5b4:	1886b03a 	or	r3,r3,r2
    d5b8:	00800074 	movhi	r2,1
    d5bc:	1087e304 	addi	r2,r2,8076
    d5c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d5c4:	00800074 	movhi	r2,1
    d5c8:	1087e304 	addi	r2,r2,8076
    d5cc:	10800017 	ldw	r2,0(r2)
    d5d0:	100170fa 	wrctl	ienable,r2
    d5d4:	e0bffd17 	ldw	r2,-12(fp)
    d5d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d5dc:	e0bffa17 	ldw	r2,-24(fp)
    d5e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d5e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    d5e8:	e037883a 	mov	sp,fp
    d5ec:	df000017 	ldw	fp,0(sp)
    d5f0:	dec00104 	addi	sp,sp,4
    d5f4:	f800283a 	ret

0000d5f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d5f8:	defff904 	addi	sp,sp,-28
    d5fc:	de00012e 	bgeu	sp,et,d604 <alt_ic_irq_disable+0xc>
    d600:	003da0fa 	break	3
    d604:	df000615 	stw	fp,24(sp)
    d608:	df000604 	addi	fp,sp,24
    d60c:	e13ffe15 	stw	r4,-8(fp)
    d610:	e17fff15 	stw	r5,-4(fp)
    d614:	e0bfff17 	ldw	r2,-4(fp)
    d618:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d61c:	0005303a 	rdctl	r2,status
    d620:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d624:	e0fffb17 	ldw	r3,-20(fp)
    d628:	00bfff84 	movi	r2,-2
    d62c:	1884703a 	and	r2,r3,r2
    d630:	1001703a 	wrctl	status,r2
  
  return context;
    d634:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d638:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    d63c:	e0fffc17 	ldw	r3,-16(fp)
    d640:	00800044 	movi	r2,1
    d644:	10c4983a 	sll	r2,r2,r3
    d648:	0084303a 	nor	r2,zero,r2
    d64c:	1007883a 	mov	r3,r2
    d650:	00800074 	movhi	r2,1
    d654:	1087e304 	addi	r2,r2,8076
    d658:	10800017 	ldw	r2,0(r2)
    d65c:	1886703a 	and	r3,r3,r2
    d660:	00800074 	movhi	r2,1
    d664:	1087e304 	addi	r2,r2,8076
    d668:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d66c:	00800074 	movhi	r2,1
    d670:	1087e304 	addi	r2,r2,8076
    d674:	10800017 	ldw	r2,0(r2)
    d678:	100170fa 	wrctl	ienable,r2
    d67c:	e0bffd17 	ldw	r2,-12(fp)
    d680:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d684:	e0bffa17 	ldw	r2,-24(fp)
    d688:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d68c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    d690:	e037883a 	mov	sp,fp
    d694:	df000017 	ldw	fp,0(sp)
    d698:	dec00104 	addi	sp,sp,4
    d69c:	f800283a 	ret

0000d6a0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d6a0:	defffc04 	addi	sp,sp,-16
    d6a4:	de00012e 	bgeu	sp,et,d6ac <alt_ic_irq_enabled+0xc>
    d6a8:	003da0fa 	break	3
    d6ac:	df000315 	stw	fp,12(sp)
    d6b0:	df000304 	addi	fp,sp,12
    d6b4:	e13ffe15 	stw	r4,-8(fp)
    d6b8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d6bc:	000530fa 	rdctl	r2,ienable
    d6c0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d6c4:	e0ffff17 	ldw	r3,-4(fp)
    d6c8:	00800044 	movi	r2,1
    d6cc:	10c4983a 	sll	r2,r2,r3
    d6d0:	1007883a 	mov	r3,r2
    d6d4:	e0bffd17 	ldw	r2,-12(fp)
    d6d8:	1884703a 	and	r2,r3,r2
    d6dc:	1004c03a 	cmpne	r2,r2,zero
}
    d6e0:	e037883a 	mov	sp,fp
    d6e4:	df000017 	ldw	fp,0(sp)
    d6e8:	dec00104 	addi	sp,sp,4
    d6ec:	f800283a 	ret

0000d6f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d6f0:	defff404 	addi	sp,sp,-48
    d6f4:	de00012e 	bgeu	sp,et,d6fc <alt_iic_isr_register+0xc>
    d6f8:	003da0fa 	break	3
    d6fc:	dfc00b15 	stw	ra,44(sp)
    d700:	df000a15 	stw	fp,40(sp)
    d704:	df000a04 	addi	fp,sp,40
    d708:	e13ffb15 	stw	r4,-20(fp)
    d70c:	e17ffc15 	stw	r5,-16(fp)
    d710:	e1bffd15 	stw	r6,-12(fp)
    d714:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    d718:	00bffa84 	movi	r2,-22
    d71c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d720:	e0bffc17 	ldw	r2,-16(fp)
    d724:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d728:	e0bff917 	ldw	r2,-28(fp)
    d72c:	10800808 	cmpgei	r2,r2,32
    d730:	1000291e 	bne	r2,zero,d7d8 <alt_iic_isr_register+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d734:	0005303a 	rdctl	r2,status
    d738:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d73c:	e0fff717 	ldw	r3,-36(fp)
    d740:	00bfff84 	movi	r2,-2
    d744:	1884703a 	and	r2,r3,r2
    d748:	1001703a 	wrctl	status,r2
  
  return context;
    d74c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d750:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    d754:	e0bff917 	ldw	r2,-28(fp)
    d758:	00c00074 	movhi	r3,1
    d75c:	18c7fb04 	addi	r3,r3,8172
    d760:	100490fa 	slli	r2,r2,3
    d764:	10c7883a 	add	r3,r2,r3
    d768:	e0bffd17 	ldw	r2,-12(fp)
    d76c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    d770:	e0bff917 	ldw	r2,-28(fp)
    d774:	00c00074 	movhi	r3,1
    d778:	18c7fb04 	addi	r3,r3,8172
    d77c:	100490fa 	slli	r2,r2,3
    d780:	10c5883a 	add	r2,r2,r3
    d784:	10c00104 	addi	r3,r2,4
    d788:	e0bffe17 	ldw	r2,-8(fp)
    d78c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d790:	e0bffd17 	ldw	r2,-12(fp)
    d794:	1005003a 	cmpeq	r2,r2,zero
    d798:	1000051e 	bne	r2,zero,d7b0 <alt_iic_isr_register+0xc0>
    d79c:	e17ff917 	ldw	r5,-28(fp)
    d7a0:	e13ffb17 	ldw	r4,-20(fp)
    d7a4:	000d5540 	call	d554 <alt_ic_irq_enable>
    d7a8:	e0bfff15 	stw	r2,-4(fp)
    d7ac:	00000406 	br	d7c0 <alt_iic_isr_register+0xd0>
    d7b0:	e17ff917 	ldw	r5,-28(fp)
    d7b4:	e13ffb17 	ldw	r4,-20(fp)
    d7b8:	000d5f80 	call	d5f8 <alt_ic_irq_disable>
    d7bc:	e0bfff15 	stw	r2,-4(fp)
    d7c0:	e0bfff17 	ldw	r2,-4(fp)
    d7c4:	e0bffa15 	stw	r2,-24(fp)
    d7c8:	e0bff817 	ldw	r2,-32(fp)
    d7cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d7d0:	e0bff617 	ldw	r2,-40(fp)
    d7d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d7d8:	e0bffa17 	ldw	r2,-24(fp)
}
    d7dc:	e037883a 	mov	sp,fp
    d7e0:	dfc00117 	ldw	ra,4(sp)
    d7e4:	df000017 	ldw	fp,0(sp)
    d7e8:	dec00204 	addi	sp,sp,8
    d7ec:	f800283a 	ret

0000d7f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d7f0:	defff804 	addi	sp,sp,-32
    d7f4:	de00012e 	bgeu	sp,et,d7fc <alt_open_fd+0xc>
    d7f8:	003da0fa 	break	3
    d7fc:	dfc00715 	stw	ra,28(sp)
    d800:	df000615 	stw	fp,24(sp)
    d804:	dc000515 	stw	r16,20(sp)
    d808:	df000504 	addi	fp,sp,20
    d80c:	e13ffc15 	stw	r4,-16(fp)
    d810:	e17ffd15 	stw	r5,-12(fp)
    d814:	e1bffe15 	stw	r6,-8(fp)
    d818:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    d81c:	e13ffd17 	ldw	r4,-12(fp)
    d820:	e17ffe17 	ldw	r5,-8(fp)
    d824:	e1bfff17 	ldw	r6,-4(fp)
    d828:	000da500 	call	da50 <open>
    d82c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    d830:	e0bffb17 	ldw	r2,-20(fp)
    d834:	1004803a 	cmplt	r2,r2,zero
    d838:	10001f1e 	bne	r2,zero,d8b8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    d83c:	e13ffb17 	ldw	r4,-20(fp)
    d840:	04000074 	movhi	r16,1
    d844:	8400ad04 	addi	r16,r16,692
    d848:	01400304 	movi	r5,12
    d84c:	000a6b00 	call	a6b0 <__mulsi3>
    d850:	1405883a 	add	r2,r2,r16
    d854:	10c00017 	ldw	r3,0(r2)
    d858:	e0bffc17 	ldw	r2,-16(fp)
    d85c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d860:	e13ffb17 	ldw	r4,-20(fp)
    d864:	04000074 	movhi	r16,1
    d868:	8400ad04 	addi	r16,r16,692
    d86c:	01400304 	movi	r5,12
    d870:	000a6b00 	call	a6b0 <__mulsi3>
    d874:	1405883a 	add	r2,r2,r16
    d878:	10800104 	addi	r2,r2,4
    d87c:	10c00017 	ldw	r3,0(r2)
    d880:	e0bffc17 	ldw	r2,-16(fp)
    d884:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d888:	e13ffb17 	ldw	r4,-20(fp)
    d88c:	04000074 	movhi	r16,1
    d890:	8400ad04 	addi	r16,r16,692
    d894:	01400304 	movi	r5,12
    d898:	000a6b00 	call	a6b0 <__mulsi3>
    d89c:	1405883a 	add	r2,r2,r16
    d8a0:	10800204 	addi	r2,r2,8
    d8a4:	10c00017 	ldw	r3,0(r2)
    d8a8:	e0bffc17 	ldw	r2,-16(fp)
    d8ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d8b0:	e13ffb17 	ldw	r4,-20(fp)
    d8b4:	000dc4c0 	call	dc4c <alt_release_fd>
  }
} 
    d8b8:	e037883a 	mov	sp,fp
    d8bc:	dfc00217 	ldw	ra,8(sp)
    d8c0:	df000117 	ldw	fp,4(sp)
    d8c4:	dc000017 	ldw	r16,0(sp)
    d8c8:	dec00304 	addi	sp,sp,12
    d8cc:	f800283a 	ret

0000d8d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d8d0:	defffb04 	addi	sp,sp,-20
    d8d4:	de00012e 	bgeu	sp,et,d8dc <alt_io_redirect+0xc>
    d8d8:	003da0fa 	break	3
    d8dc:	dfc00415 	stw	ra,16(sp)
    d8e0:	df000315 	stw	fp,12(sp)
    d8e4:	df000304 	addi	fp,sp,12
    d8e8:	e13ffd15 	stw	r4,-12(fp)
    d8ec:	e17ffe15 	stw	r5,-8(fp)
    d8f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d8f4:	01000074 	movhi	r4,1
    d8f8:	2100b004 	addi	r4,r4,704
    d8fc:	e17ffd17 	ldw	r5,-12(fp)
    d900:	01800044 	movi	r6,1
    d904:	01c07fc4 	movi	r7,511
    d908:	000d7f00 	call	d7f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d90c:	01000074 	movhi	r4,1
    d910:	2100ad04 	addi	r4,r4,692
    d914:	e17ffe17 	ldw	r5,-8(fp)
    d918:	000d883a 	mov	r6,zero
    d91c:	01c07fc4 	movi	r7,511
    d920:	000d7f00 	call	d7f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d924:	01000074 	movhi	r4,1
    d928:	2100b304 	addi	r4,r4,716
    d92c:	e17fff17 	ldw	r5,-4(fp)
    d930:	01800044 	movi	r6,1
    d934:	01c07fc4 	movi	r7,511
    d938:	000d7f00 	call	d7f0 <alt_open_fd>
}  
    d93c:	e037883a 	mov	sp,fp
    d940:	dfc00117 	ldw	ra,4(sp)
    d944:	df000017 	ldw	fp,0(sp)
    d948:	dec00204 	addi	sp,sp,8
    d94c:	f800283a 	ret

0000d950 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d950:	defffa04 	addi	sp,sp,-24
    d954:	de00012e 	bgeu	sp,et,d95c <alt_file_locked+0xc>
    d958:	003da0fa 	break	3
    d95c:	dfc00515 	stw	ra,20(sp)
    d960:	df000415 	stw	fp,16(sp)
    d964:	dc000315 	stw	r16,12(sp)
    d968:	df000304 	addi	fp,sp,12
    d96c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d970:	e0bffe17 	ldw	r2,-8(fp)
    d974:	10800217 	ldw	r2,8(r2)
    d978:	10d00034 	orhi	r3,r2,16384
    d97c:	e0bffe17 	ldw	r2,-8(fp)
    d980:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d984:	e03ffd15 	stw	zero,-12(fp)
    d988:	00002306 	br	da18 <alt_file_locked+0xc8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d98c:	e13ffd17 	ldw	r4,-12(fp)
    d990:	04000074 	movhi	r16,1
    d994:	8400ad04 	addi	r16,r16,692
    d998:	01400304 	movi	r5,12
    d99c:	000a6b00 	call	a6b0 <__mulsi3>
    d9a0:	1405883a 	add	r2,r2,r16
    d9a4:	10c00017 	ldw	r3,0(r2)
    d9a8:	e0bffe17 	ldw	r2,-8(fp)
    d9ac:	10800017 	ldw	r2,0(r2)
    d9b0:	1880161e 	bne	r3,r2,da0c <alt_file_locked+0xbc>
    d9b4:	e13ffd17 	ldw	r4,-12(fp)
    d9b8:	04000074 	movhi	r16,1
    d9bc:	8400ad04 	addi	r16,r16,692
    d9c0:	01400304 	movi	r5,12
    d9c4:	000a6b00 	call	a6b0 <__mulsi3>
    d9c8:	1405883a 	add	r2,r2,r16
    d9cc:	10800204 	addi	r2,r2,8
    d9d0:	10800017 	ldw	r2,0(r2)
    d9d4:	1004403a 	cmpge	r2,r2,zero
    d9d8:	10000c1e 	bne	r2,zero,da0c <alt_file_locked+0xbc>
    d9dc:	e13ffd17 	ldw	r4,-12(fp)
    d9e0:	01400304 	movi	r5,12
    d9e4:	000a6b00 	call	a6b0 <__mulsi3>
    d9e8:	1007883a 	mov	r3,r2
    d9ec:	00800074 	movhi	r2,1
    d9f0:	1080ad04 	addi	r2,r2,692
    d9f4:	1887883a 	add	r3,r3,r2
    d9f8:	e0bffe17 	ldw	r2,-8(fp)
    d9fc:	18800326 	beq	r3,r2,da0c <alt_file_locked+0xbc>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    da00:	00bffcc4 	movi	r2,-13
    da04:	e0bfff15 	stw	r2,-4(fp)
    da08:	00000a06 	br	da34 <alt_file_locked+0xe4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    da0c:	e0bffd17 	ldw	r2,-12(fp)
    da10:	10800044 	addi	r2,r2,1
    da14:	e0bffd15 	stw	r2,-12(fp)
    da18:	00800074 	movhi	r2,1
    da1c:	10817804 	addi	r2,r2,1504
    da20:	10800017 	ldw	r2,0(r2)
    da24:	1007883a 	mov	r3,r2
    da28:	e0bffd17 	ldw	r2,-12(fp)
    da2c:	18bfd72e 	bgeu	r3,r2,d98c <alt_file_locked+0x3c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    da30:	e03fff15 	stw	zero,-4(fp)
    da34:	e0bfff17 	ldw	r2,-4(fp)
}
    da38:	e037883a 	mov	sp,fp
    da3c:	dfc00217 	ldw	ra,8(sp)
    da40:	df000117 	ldw	fp,4(sp)
    da44:	dc000017 	ldw	r16,0(sp)
    da48:	dec00304 	addi	sp,sp,12
    da4c:	f800283a 	ret

0000da50 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    da50:	defff404 	addi	sp,sp,-48
    da54:	de00012e 	bgeu	sp,et,da5c <open+0xc>
    da58:	003da0fa 	break	3
    da5c:	dfc00b15 	stw	ra,44(sp)
    da60:	df000a15 	stw	fp,40(sp)
    da64:	df000a04 	addi	fp,sp,40
    da68:	e13ffb15 	stw	r4,-20(fp)
    da6c:	e17ffc15 	stw	r5,-16(fp)
    da70:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    da74:	00bfffc4 	movi	r2,-1
    da78:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    da7c:	00bffb44 	movi	r2,-19
    da80:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    da84:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    da88:	e13ffb17 	ldw	r4,-20(fp)
    da8c:	01400074 	movhi	r5,1
    da90:	29417604 	addi	r5,r5,1496
    da94:	000dea80 	call	dea8 <alt_find_dev>
    da98:	e0bffa15 	stw	r2,-24(fp)
    da9c:	e0bffa17 	ldw	r2,-24(fp)
    daa0:	1004c03a 	cmpne	r2,r2,zero
    daa4:	1000051e 	bne	r2,zero,dabc <open+0x6c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    daa8:	e13ffb17 	ldw	r4,-20(fp)
    daac:	000df440 	call	df44 <alt_find_file>
    dab0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    dab4:	00800044 	movi	r2,1
    dab8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    dabc:	e0bffa17 	ldw	r2,-24(fp)
    dac0:	1005003a 	cmpeq	r2,r2,zero
    dac4:	1000311e 	bne	r2,zero,db8c <open+0x13c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    dac8:	e13ffa17 	ldw	r4,-24(fp)
    dacc:	000e06c0 	call	e06c <alt_get_fd>
    dad0:	e0bff815 	stw	r2,-32(fp)
    dad4:	e0bff817 	ldw	r2,-32(fp)
    dad8:	1004403a 	cmpge	r2,r2,zero
    dadc:	1000031e 	bne	r2,zero,daec <open+0x9c>
    {
      status = index;
    dae0:	e0bff817 	ldw	r2,-32(fp)
    dae4:	e0bff715 	stw	r2,-36(fp)
    dae8:	00002a06 	br	db94 <open+0x144>
    }
    else
    {
      fd = &alt_fd_list[index];
    daec:	e13ff817 	ldw	r4,-32(fp)
    daf0:	01400304 	movi	r5,12
    daf4:	000a6b00 	call	a6b0 <__mulsi3>
    daf8:	1007883a 	mov	r3,r2
    dafc:	00800074 	movhi	r2,1
    db00:	1080ad04 	addi	r2,r2,692
    db04:	1885883a 	add	r2,r3,r2
    db08:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    db0c:	e0fffc17 	ldw	r3,-16(fp)
    db10:	00900034 	movhi	r2,16384
    db14:	10bfffc4 	addi	r2,r2,-1
    db18:	1886703a 	and	r3,r3,r2
    db1c:	e0bff917 	ldw	r2,-28(fp)
    db20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    db24:	e0bff617 	ldw	r2,-40(fp)
    db28:	1004c03a 	cmpne	r2,r2,zero
    db2c:	1000061e 	bne	r2,zero,db48 <open+0xf8>
    db30:	e13ff917 	ldw	r4,-28(fp)
    db34:	000d9500 	call	d950 <alt_file_locked>
    db38:	e0bff715 	stw	r2,-36(fp)
    db3c:	e0bff717 	ldw	r2,-36(fp)
    db40:	1004803a 	cmplt	r2,r2,zero
    db44:	1000131e 	bne	r2,zero,db94 <open+0x144>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    db48:	e0bffa17 	ldw	r2,-24(fp)
    db4c:	10800317 	ldw	r2,12(r2)
    db50:	1005003a 	cmpeq	r2,r2,zero
    db54:	1000091e 	bne	r2,zero,db7c <open+0x12c>
    db58:	e0bffa17 	ldw	r2,-24(fp)
    db5c:	10800317 	ldw	r2,12(r2)
    db60:	e13ff917 	ldw	r4,-28(fp)
    db64:	e17ffb17 	ldw	r5,-20(fp)
    db68:	e1bffc17 	ldw	r6,-16(fp)
    db6c:	e1fffd17 	ldw	r7,-12(fp)
    db70:	103ee83a 	callr	r2
    db74:	e0bfff15 	stw	r2,-4(fp)
    db78:	00000106 	br	db80 <open+0x130>
    db7c:	e03fff15 	stw	zero,-4(fp)
    db80:	e0bfff17 	ldw	r2,-4(fp)
    db84:	e0bff715 	stw	r2,-36(fp)
    db88:	00000206 	br	db94 <open+0x144>
      }
    }
  }
  else
  {
    status = -ENODEV;
    db8c:	00bffb44 	movi	r2,-19
    db90:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    db94:	e0bff717 	ldw	r2,-36(fp)
    db98:	1004403a 	cmpge	r2,r2,zero
    db9c:	1000091e 	bne	r2,zero,dbc4 <open+0x174>
  {
    alt_release_fd (index);  
    dba0:	e13ff817 	ldw	r4,-32(fp)
    dba4:	000dc4c0 	call	dc4c <alt_release_fd>
    ALT_ERRNO = -status;
    dba8:	000dbe40 	call	dbe4 <alt_get_errno>
    dbac:	e0fff717 	ldw	r3,-36(fp)
    dbb0:	00c7c83a 	sub	r3,zero,r3
    dbb4:	10c00015 	stw	r3,0(r2)
    return -1;
    dbb8:	00bfffc4 	movi	r2,-1
    dbbc:	e0bffe15 	stw	r2,-8(fp)
    dbc0:	00000206 	br	dbcc <open+0x17c>
  }
  
  /* return the reference upon success */

  return index;
    dbc4:	e0bff817 	ldw	r2,-32(fp)
    dbc8:	e0bffe15 	stw	r2,-8(fp)
    dbcc:	e0bffe17 	ldw	r2,-8(fp)
}
    dbd0:	e037883a 	mov	sp,fp
    dbd4:	dfc00117 	ldw	ra,4(sp)
    dbd8:	df000017 	ldw	fp,0(sp)
    dbdc:	dec00204 	addi	sp,sp,8
    dbe0:	f800283a 	ret

0000dbe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dbe4:	defffd04 	addi	sp,sp,-12
    dbe8:	de00012e 	bgeu	sp,et,dbf0 <alt_get_errno+0xc>
    dbec:	003da0fa 	break	3
    dbf0:	dfc00215 	stw	ra,8(sp)
    dbf4:	df000115 	stw	fp,4(sp)
    dbf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    dbfc:	00800074 	movhi	r2,1
    dc00:	10817904 	addi	r2,r2,1508
    dc04:	10800017 	ldw	r2,0(r2)
    dc08:	1005003a 	cmpeq	r2,r2,zero
    dc0c:	1000061e 	bne	r2,zero,dc28 <alt_get_errno+0x44>
    dc10:	00800074 	movhi	r2,1
    dc14:	10817904 	addi	r2,r2,1508
    dc18:	10800017 	ldw	r2,0(r2)
    dc1c:	103ee83a 	callr	r2
    dc20:	e0bfff15 	stw	r2,-4(fp)
    dc24:	00000306 	br	dc34 <alt_get_errno+0x50>
    dc28:	00800074 	movhi	r2,1
    dc2c:	1087e604 	addi	r2,r2,8088
    dc30:	e0bfff15 	stw	r2,-4(fp)
    dc34:	e0bfff17 	ldw	r2,-4(fp)
}
    dc38:	e037883a 	mov	sp,fp
    dc3c:	dfc00117 	ldw	ra,4(sp)
    dc40:	df000017 	ldw	fp,0(sp)
    dc44:	dec00204 	addi	sp,sp,8
    dc48:	f800283a 	ret

0000dc4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    dc4c:	defffc04 	addi	sp,sp,-16
    dc50:	de00012e 	bgeu	sp,et,dc58 <alt_release_fd+0xc>
    dc54:	003da0fa 	break	3
    dc58:	dfc00315 	stw	ra,12(sp)
    dc5c:	df000215 	stw	fp,8(sp)
    dc60:	dc000115 	stw	r16,4(sp)
    dc64:	df000104 	addi	fp,sp,4
    dc68:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    dc6c:	e0bfff17 	ldw	r2,-4(fp)
    dc70:	108000d0 	cmplti	r2,r2,3
    dc74:	10000f1e 	bne	r2,zero,dcb4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    dc78:	e13fff17 	ldw	r4,-4(fp)
    dc7c:	04000074 	movhi	r16,1
    dc80:	8400ad04 	addi	r16,r16,692
    dc84:	01400304 	movi	r5,12
    dc88:	000a6b00 	call	a6b0 <__mulsi3>
    dc8c:	1405883a 	add	r2,r2,r16
    dc90:	10800204 	addi	r2,r2,8
    dc94:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    dc98:	e13fff17 	ldw	r4,-4(fp)
    dc9c:	04000074 	movhi	r16,1
    dca0:	8400ad04 	addi	r16,r16,692
    dca4:	01400304 	movi	r5,12
    dca8:	000a6b00 	call	a6b0 <__mulsi3>
    dcac:	1405883a 	add	r2,r2,r16
    dcb0:	10000015 	stw	zero,0(r2)
  }
}
    dcb4:	e037883a 	mov	sp,fp
    dcb8:	dfc00217 	ldw	ra,8(sp)
    dcbc:	df000117 	ldw	fp,4(sp)
    dcc0:	dc000017 	ldw	r16,0(sp)
    dcc4:	dec00304 	addi	sp,sp,12
    dcc8:	f800283a 	ret

0000dccc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    dccc:	defffa04 	addi	sp,sp,-24
    dcd0:	de00012e 	bgeu	sp,et,dcd8 <alt_alarm_stop+0xc>
    dcd4:	003da0fa 	break	3
    dcd8:	df000515 	stw	fp,20(sp)
    dcdc:	df000504 	addi	fp,sp,20
    dce0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dce4:	0005303a 	rdctl	r2,status
    dce8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dcec:	e0fffd17 	ldw	r3,-12(fp)
    dcf0:	00bfff84 	movi	r2,-2
    dcf4:	1884703a 	and	r2,r3,r2
    dcf8:	1001703a 	wrctl	status,r2
  
  return context;
    dcfc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    dd00:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    dd04:	e0bfff17 	ldw	r2,-4(fp)
    dd08:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    dd0c:	e0bffc17 	ldw	r2,-16(fp)
    dd10:	10c00017 	ldw	r3,0(r2)
    dd14:	e0bffc17 	ldw	r2,-16(fp)
    dd18:	10800117 	ldw	r2,4(r2)
    dd1c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    dd20:	e0bffc17 	ldw	r2,-16(fp)
    dd24:	10c00117 	ldw	r3,4(r2)
    dd28:	e0bffc17 	ldw	r2,-16(fp)
    dd2c:	10800017 	ldw	r2,0(r2)
    dd30:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    dd34:	e0fffc17 	ldw	r3,-16(fp)
    dd38:	e0bffc17 	ldw	r2,-16(fp)
    dd3c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    dd40:	e0fffc17 	ldw	r3,-16(fp)
    dd44:	e0bffc17 	ldw	r2,-16(fp)
    dd48:	18800015 	stw	r2,0(r3)
    dd4c:	e0bffe17 	ldw	r2,-8(fp)
    dd50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dd54:	e0bffb17 	ldw	r2,-20(fp)
    dd58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    dd5c:	e037883a 	mov	sp,fp
    dd60:	df000017 	ldw	fp,0(sp)
    dd64:	dec00104 	addi	sp,sp,4
    dd68:	f800283a 	ret

0000dd6c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    dd6c:	defffb04 	addi	sp,sp,-20
    dd70:	de00012e 	bgeu	sp,et,dd78 <alt_tick+0xc>
    dd74:	003da0fa 	break	3
    dd78:	dfc00415 	stw	ra,16(sp)
    dd7c:	df000315 	stw	fp,12(sp)
    dd80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    dd84:	d0a06e17 	ldw	r2,-32328(gp)
    dd88:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    dd8c:	d0a6d817 	ldw	r2,-25760(gp)
    dd90:	10800044 	addi	r2,r2,1
    dd94:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    dd98:	00003106 	br	de60 <alt_tick+0xf4>
  {
    next = (alt_alarm*) alarm->llist.next;
    dd9c:	e0bffe17 	ldw	r2,-8(fp)
    dda0:	10800017 	ldw	r2,0(r2)
    dda4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    dda8:	e0bffe17 	ldw	r2,-8(fp)
    ddac:	10800403 	ldbu	r2,16(r2)
    ddb0:	10803fcc 	andi	r2,r2,255
    ddb4:	1005003a 	cmpeq	r2,r2,zero
    ddb8:	1000051e 	bne	r2,zero,ddd0 <alt_tick+0x64>
    ddbc:	d0a6d817 	ldw	r2,-25760(gp)
    ddc0:	1004c03a 	cmpne	r2,r2,zero
    ddc4:	1000021e 	bne	r2,zero,ddd0 <alt_tick+0x64>
    {
      alarm->rollover = 0;
    ddc8:	e0bffe17 	ldw	r2,-8(fp)
    ddcc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ddd0:	e0bffe17 	ldw	r2,-8(fp)
    ddd4:	10c00217 	ldw	r3,8(r2)
    ddd8:	d0a6d817 	ldw	r2,-25760(gp)
    dddc:	10c01e36 	bltu	r2,r3,de58 <alt_tick+0xec>
    dde0:	e0bffe17 	ldw	r2,-8(fp)
    dde4:	10800403 	ldbu	r2,16(r2)
    dde8:	10803fcc 	andi	r2,r2,255
    ddec:	1004c03a 	cmpne	r2,r2,zero
    ddf0:	1000191e 	bne	r2,zero,de58 <alt_tick+0xec>
    {
      next_callback = alarm->callback (alarm->context);
    ddf4:	e0bffe17 	ldw	r2,-8(fp)
    ddf8:	10c00317 	ldw	r3,12(r2)
    ddfc:	e0bffe17 	ldw	r2,-8(fp)
    de00:	11000517 	ldw	r4,20(r2)
    de04:	183ee83a 	callr	r3
    de08:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    de0c:	e0bffd17 	ldw	r2,-12(fp)
    de10:	1004c03a 	cmpne	r2,r2,zero
    de14:	1000031e 	bne	r2,zero,de24 <alt_tick+0xb8>
      {
        alt_alarm_stop (alarm);
    de18:	e13ffe17 	ldw	r4,-8(fp)
    de1c:	000dccc0 	call	dccc <alt_alarm_stop>
    de20:	00000d06 	br	de58 <alt_tick+0xec>
      }
      else
      {
        alarm->time += next_callback;
    de24:	e0bffe17 	ldw	r2,-8(fp)
    de28:	10c00217 	ldw	r3,8(r2)
    de2c:	e0bffd17 	ldw	r2,-12(fp)
    de30:	1887883a 	add	r3,r3,r2
    de34:	e0bffe17 	ldw	r2,-8(fp)
    de38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    de3c:	e0bffe17 	ldw	r2,-8(fp)
    de40:	10c00217 	ldw	r3,8(r2)
    de44:	d0a6d817 	ldw	r2,-25760(gp)
    de48:	1880032e 	bgeu	r3,r2,de58 <alt_tick+0xec>
        {
          alarm->rollover = 1;
    de4c:	e0fffe17 	ldw	r3,-8(fp)
    de50:	00800044 	movi	r2,1
    de54:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    de58:	e0bfff17 	ldw	r2,-4(fp)
    de5c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    de60:	d0e06e04 	addi	r3,gp,-32328
    de64:	e0bffe17 	ldw	r2,-8(fp)
    de68:	10ffcc1e 	bne	r2,r3,dd9c <alt_tick+0x30>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    de6c:	e037883a 	mov	sp,fp
    de70:	dfc00117 	ldw	ra,4(sp)
    de74:	df000017 	ldw	fp,0(sp)
    de78:	dec00204 	addi	sp,sp,8
    de7c:	f800283a 	ret

0000de80 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    de80:	deffff04 	addi	sp,sp,-4
    de84:	de00012e 	bgeu	sp,et,de8c <altera_nios2_qsys_irq_init+0xc>
    de88:	003da0fa 	break	3
    de8c:	df000015 	stw	fp,0(sp)
    de90:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    de94:	000170fa 	wrctl	ienable,zero
}
    de98:	e037883a 	mov	sp,fp
    de9c:	df000017 	ldw	fp,0(sp)
    dea0:	dec00104 	addi	sp,sp,4
    dea4:	f800283a 	ret

0000dea8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    dea8:	defff904 	addi	sp,sp,-28
    deac:	de00012e 	bgeu	sp,et,deb4 <alt_find_dev+0xc>
    deb0:	003da0fa 	break	3
    deb4:	dfc00615 	stw	ra,24(sp)
    deb8:	df000515 	stw	fp,20(sp)
    debc:	df000504 	addi	fp,sp,20
    dec0:	e13ffd15 	stw	r4,-12(fp)
    dec4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    dec8:	e0bffe17 	ldw	r2,-8(fp)
    decc:	10800017 	ldw	r2,0(r2)
    ded0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ded4:	e13ffd17 	ldw	r4,-12(fp)
    ded8:	000b02c0 	call	b02c <strlen>
    dedc:	10800044 	addi	r2,r2,1
    dee0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    dee4:	00000d06 	br	df1c <alt_find_dev+0x74>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    dee8:	e0bffc17 	ldw	r2,-16(fp)
    deec:	11000217 	ldw	r4,8(r2)
    def0:	e1bffb17 	ldw	r6,-20(fp)
    def4:	e17ffd17 	ldw	r5,-12(fp)
    def8:	000e1900 	call	e190 <memcmp>
    defc:	1004c03a 	cmpne	r2,r2,zero
    df00:	1000031e 	bne	r2,zero,df10 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
    df04:	e0bffc17 	ldw	r2,-16(fp)
    df08:	e0bfff15 	stw	r2,-4(fp)
    df0c:	00000706 	br	df2c <alt_find_dev+0x84>
    }
    next = (alt_dev*) next->llist.next;
    df10:	e0bffc17 	ldw	r2,-16(fp)
    df14:	10800017 	ldw	r2,0(r2)
    df18:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    df1c:	e0fffe17 	ldw	r3,-8(fp)
    df20:	e0bffc17 	ldw	r2,-16(fp)
    df24:	10fff01e 	bne	r2,r3,dee8 <alt_find_dev+0x40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    df28:	e03fff15 	stw	zero,-4(fp)
    df2c:	e0bfff17 	ldw	r2,-4(fp)
}
    df30:	e037883a 	mov	sp,fp
    df34:	dfc00117 	ldw	ra,4(sp)
    df38:	df000017 	ldw	fp,0(sp)
    df3c:	dec00204 	addi	sp,sp,8
    df40:	f800283a 	ret

0000df44 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    df44:	defffa04 	addi	sp,sp,-24
    df48:	de00012e 	bgeu	sp,et,df50 <alt_find_file+0xc>
    df4c:	003da0fa 	break	3
    df50:	dfc00515 	stw	ra,20(sp)
    df54:	df000415 	stw	fp,16(sp)
    df58:	df000404 	addi	fp,sp,16
    df5c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    df60:	00800074 	movhi	r2,1
    df64:	10817404 	addi	r2,r2,1488
    df68:	10800017 	ldw	r2,0(r2)
    df6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    df70:	00003306 	br	e040 <alt_find_file+0xfc>
  {
    len = strlen(next->name);
    df74:	e0bffd17 	ldw	r2,-12(fp)
    df78:	11000217 	ldw	r4,8(r2)
    df7c:	000b02c0 	call	b02c <strlen>
    df80:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    df84:	e0bffd17 	ldw	r2,-12(fp)
    df88:	10c00217 	ldw	r3,8(r2)
    df8c:	e0bffc17 	ldw	r2,-16(fp)
    df90:	1885883a 	add	r2,r3,r2
    df94:	10bfffc4 	addi	r2,r2,-1
    df98:	10800003 	ldbu	r2,0(r2)
    df9c:	10803fcc 	andi	r2,r2,255
    dfa0:	1080201c 	xori	r2,r2,128
    dfa4:	10bfe004 	addi	r2,r2,-128
    dfa8:	10800bd8 	cmpnei	r2,r2,47
    dfac:	1000031e 	bne	r2,zero,dfbc <alt_find_file+0x78>
    {
      len -= 1;
    dfb0:	e0bffc17 	ldw	r2,-16(fp)
    dfb4:	10bfffc4 	addi	r2,r2,-1
    dfb8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    dfbc:	e0bffc17 	ldw	r2,-16(fp)
    dfc0:	1007883a 	mov	r3,r2
    dfc4:	e0bffe17 	ldw	r2,-8(fp)
    dfc8:	1885883a 	add	r2,r3,r2
    dfcc:	10800003 	ldbu	r2,0(r2)
    dfd0:	10803fcc 	andi	r2,r2,255
    dfd4:	1080201c 	xori	r2,r2,128
    dfd8:	10bfe004 	addi	r2,r2,-128
    dfdc:	10800be0 	cmpeqi	r2,r2,47
    dfe0:	10000a1e 	bne	r2,zero,e00c <alt_find_file+0xc8>
    dfe4:	e0bffc17 	ldw	r2,-16(fp)
    dfe8:	1007883a 	mov	r3,r2
    dfec:	e0bffe17 	ldw	r2,-8(fp)
    dff0:	1885883a 	add	r2,r3,r2
    dff4:	10800003 	ldbu	r2,0(r2)
    dff8:	10803fcc 	andi	r2,r2,255
    dffc:	1080201c 	xori	r2,r2,128
    e000:	10bfe004 	addi	r2,r2,-128
    e004:	1004c03a 	cmpne	r2,r2,zero
    e008:	10000a1e 	bne	r2,zero,e034 <alt_find_file+0xf0>
    e00c:	e0bffd17 	ldw	r2,-12(fp)
    e010:	11000217 	ldw	r4,8(r2)
    e014:	e1bffc17 	ldw	r6,-16(fp)
    e018:	e17ffe17 	ldw	r5,-8(fp)
    e01c:	000e1900 	call	e190 <memcmp>
    e020:	1004c03a 	cmpne	r2,r2,zero
    e024:	1000031e 	bne	r2,zero,e034 <alt_find_file+0xf0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    e028:	e0bffd17 	ldw	r2,-12(fp)
    e02c:	e0bfff15 	stw	r2,-4(fp)
    e030:	00000806 	br	e054 <alt_find_file+0x110>
    }
    next = (alt_dev*) next->llist.next;
    e034:	e0bffd17 	ldw	r2,-12(fp)
    e038:	10800017 	ldw	r2,0(r2)
    e03c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e040:	00c00074 	movhi	r3,1
    e044:	18c17404 	addi	r3,r3,1488
    e048:	e0bffd17 	ldw	r2,-12(fp)
    e04c:	10ffc91e 	bne	r2,r3,df74 <alt_find_file+0x30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    e050:	e03fff15 	stw	zero,-4(fp)
    e054:	e0bfff17 	ldw	r2,-4(fp)
}
    e058:	e037883a 	mov	sp,fp
    e05c:	dfc00117 	ldw	ra,4(sp)
    e060:	df000017 	ldw	fp,0(sp)
    e064:	dec00204 	addi	sp,sp,8
    e068:	f800283a 	ret

0000e06c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    e06c:	defffa04 	addi	sp,sp,-24
    e070:	de00012e 	bgeu	sp,et,e078 <alt_get_fd+0xc>
    e074:	003da0fa 	break	3
    e078:	dfc00515 	stw	ra,20(sp)
    e07c:	df000415 	stw	fp,16(sp)
    e080:	dc000315 	stw	r16,12(sp)
    e084:	df000304 	addi	fp,sp,12
    e088:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    e08c:	00bffa04 	movi	r2,-24
    e090:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e094:	e03ffe15 	stw	zero,-8(fp)
    e098:	00002006 	br	e11c <alt_get_fd+0xb0>
  {
    if (!alt_fd_list[i].dev)
    e09c:	e13ffe17 	ldw	r4,-8(fp)
    e0a0:	04000074 	movhi	r16,1
    e0a4:	8400ad04 	addi	r16,r16,692
    e0a8:	01400304 	movi	r5,12
    e0ac:	000a6b00 	call	a6b0 <__mulsi3>
    e0b0:	1405883a 	add	r2,r2,r16
    e0b4:	10800017 	ldw	r2,0(r2)
    e0b8:	1004c03a 	cmpne	r2,r2,zero
    e0bc:	1000141e 	bne	r2,zero,e110 <alt_get_fd+0xa4>
    {
      alt_fd_list[i].dev = dev;
    e0c0:	e13ffe17 	ldw	r4,-8(fp)
    e0c4:	04000074 	movhi	r16,1
    e0c8:	8400ad04 	addi	r16,r16,692
    e0cc:	01400304 	movi	r5,12
    e0d0:	000a6b00 	call	a6b0 <__mulsi3>
    e0d4:	1407883a 	add	r3,r2,r16
    e0d8:	e0bfff17 	ldw	r2,-4(fp)
    e0dc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    e0e0:	00800074 	movhi	r2,1
    e0e4:	10817804 	addi	r2,r2,1504
    e0e8:	10c00017 	ldw	r3,0(r2)
    e0ec:	e0bffe17 	ldw	r2,-8(fp)
    e0f0:	1880040e 	bge	r3,r2,e104 <alt_get_fd+0x98>
      {
        alt_max_fd = i;
    e0f4:	00c00074 	movhi	r3,1
    e0f8:	18c17804 	addi	r3,r3,1504
    e0fc:	e0bffe17 	ldw	r2,-8(fp)
    e100:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    e104:	e0bffe17 	ldw	r2,-8(fp)
    e108:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    e10c:	00000606 	br	e128 <alt_get_fd+0xbc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e110:	e0bffe17 	ldw	r2,-8(fp)
    e114:	10800044 	addi	r2,r2,1
    e118:	e0bffe15 	stw	r2,-8(fp)
    e11c:	e0bffe17 	ldw	r2,-8(fp)
    e120:	10800810 	cmplti	r2,r2,32
    e124:	103fdd1e 	bne	r2,zero,e09c <alt_get_fd+0x30>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    e128:	e0bffd17 	ldw	r2,-12(fp)
}
    e12c:	e037883a 	mov	sp,fp
    e130:	dfc00217 	ldw	ra,8(sp)
    e134:	df000117 	ldw	fp,4(sp)
    e138:	dc000017 	ldw	r16,0(sp)
    e13c:	dec00304 	addi	sp,sp,12
    e140:	f800283a 	ret

0000e144 <atexit>:
    e144:	200b883a 	mov	r5,r4
    e148:	000d883a 	mov	r6,zero
    e14c:	0009883a 	mov	r4,zero
    e150:	000f883a 	mov	r7,zero
    e154:	000e33c1 	jmpi	e33c <__register_exitproc>

0000e158 <exit>:
    e158:	defffe04 	addi	sp,sp,-8
    e15c:	000b883a 	mov	r5,zero
    e160:	dc000015 	stw	r16,0(sp)
    e164:	dfc00115 	stw	ra,4(sp)
    e168:	2021883a 	mov	r16,r4
    e16c:	000e4740 	call	e474 <__call_exitprocs>
    e170:	00800074 	movhi	r2,1
    e174:	10817204 	addi	r2,r2,1480
    e178:	11000017 	ldw	r4,0(r2)
    e17c:	20800f17 	ldw	r2,60(r4)
    e180:	10000126 	beq	r2,zero,e188 <exit+0x30>
    e184:	103ee83a 	callr	r2
    e188:	8009883a 	mov	r4,r16
    e18c:	000e66c0 	call	e66c <_exit>

0000e190 <memcmp>:
    e190:	00c000c4 	movi	r3,3
    e194:	1980032e 	bgeu	r3,r6,e1a4 <memcmp+0x14>
    e198:	2144b03a 	or	r2,r4,r5
    e19c:	10c4703a 	and	r2,r2,r3
    e1a0:	10000f26 	beq	r2,zero,e1e0 <memcmp+0x50>
    e1a4:	31ffffc4 	addi	r7,r6,-1
    e1a8:	3000061e 	bne	r6,zero,e1c4 <memcmp+0x34>
    e1ac:	00000a06 	br	e1d8 <memcmp+0x48>
    e1b0:	39ffffc4 	addi	r7,r7,-1
    e1b4:	00bfffc4 	movi	r2,-1
    e1b8:	21000044 	addi	r4,r4,1
    e1bc:	29400044 	addi	r5,r5,1
    e1c0:	38800526 	beq	r7,r2,e1d8 <memcmp+0x48>
    e1c4:	20c00003 	ldbu	r3,0(r4)
    e1c8:	28800003 	ldbu	r2,0(r5)
    e1cc:	18bff826 	beq	r3,r2,e1b0 <memcmp+0x20>
    e1d0:	1885c83a 	sub	r2,r3,r2
    e1d4:	f800283a 	ret
    e1d8:	0005883a 	mov	r2,zero
    e1dc:	f800283a 	ret
    e1e0:	180f883a 	mov	r7,r3
    e1e4:	20c00017 	ldw	r3,0(r4)
    e1e8:	28800017 	ldw	r2,0(r5)
    e1ec:	18bfed1e 	bne	r3,r2,e1a4 <memcmp+0x14>
    e1f0:	31bfff04 	addi	r6,r6,-4
    e1f4:	21000104 	addi	r4,r4,4
    e1f8:	29400104 	addi	r5,r5,4
    e1fc:	39bff936 	bltu	r7,r6,e1e4 <memcmp+0x54>
    e200:	003fe806 	br	e1a4 <memcmp+0x14>

0000e204 <memcpy>:
    e204:	01c003c4 	movi	r7,15
    e208:	2007883a 	mov	r3,r4
    e20c:	3980032e 	bgeu	r7,r6,e21c <memcpy+0x18>
    e210:	2904b03a 	or	r2,r5,r4
    e214:	108000cc 	andi	r2,r2,3
    e218:	10000926 	beq	r2,zero,e240 <memcpy+0x3c>
    e21c:	30000626 	beq	r6,zero,e238 <memcpy+0x34>
    e220:	30cd883a 	add	r6,r6,r3
    e224:	28800003 	ldbu	r2,0(r5)
    e228:	29400044 	addi	r5,r5,1
    e22c:	18800005 	stb	r2,0(r3)
    e230:	18c00044 	addi	r3,r3,1
    e234:	30fffb1e 	bne	r6,r3,e224 <memcpy+0x20>
    e238:	2005883a 	mov	r2,r4
    e23c:	f800283a 	ret
    e240:	3811883a 	mov	r8,r7
    e244:	200f883a 	mov	r7,r4
    e248:	28c00017 	ldw	r3,0(r5)
    e24c:	31bffc04 	addi	r6,r6,-16
    e250:	38c00015 	stw	r3,0(r7)
    e254:	28800117 	ldw	r2,4(r5)
    e258:	38800115 	stw	r2,4(r7)
    e25c:	28c00217 	ldw	r3,8(r5)
    e260:	38c00215 	stw	r3,8(r7)
    e264:	28800317 	ldw	r2,12(r5)
    e268:	29400404 	addi	r5,r5,16
    e26c:	38800315 	stw	r2,12(r7)
    e270:	39c00404 	addi	r7,r7,16
    e274:	41bff436 	bltu	r8,r6,e248 <memcpy+0x44>
    e278:	008000c4 	movi	r2,3
    e27c:	1180072e 	bgeu	r2,r6,e29c <memcpy+0x98>
    e280:	1007883a 	mov	r3,r2
    e284:	28800017 	ldw	r2,0(r5)
    e288:	31bfff04 	addi	r6,r6,-4
    e28c:	29400104 	addi	r5,r5,4
    e290:	38800015 	stw	r2,0(r7)
    e294:	39c00104 	addi	r7,r7,4
    e298:	19bffa36 	bltu	r3,r6,e284 <memcpy+0x80>
    e29c:	3807883a 	mov	r3,r7
    e2a0:	003fde06 	br	e21c <memcpy+0x18>

0000e2a4 <memset>:
    e2a4:	008000c4 	movi	r2,3
    e2a8:	29403fcc 	andi	r5,r5,255
    e2ac:	2007883a 	mov	r3,r4
    e2b0:	1180022e 	bgeu	r2,r6,e2bc <memset+0x18>
    e2b4:	2084703a 	and	r2,r4,r2
    e2b8:	10000826 	beq	r2,zero,e2dc <memset+0x38>
    e2bc:	30000526 	beq	r6,zero,e2d4 <memset+0x30>
    e2c0:	2805883a 	mov	r2,r5
    e2c4:	30cd883a 	add	r6,r6,r3
    e2c8:	18800005 	stb	r2,0(r3)
    e2cc:	18c00044 	addi	r3,r3,1
    e2d0:	19bffd1e 	bne	r3,r6,e2c8 <memset+0x24>
    e2d4:	2005883a 	mov	r2,r4
    e2d8:	f800283a 	ret
    e2dc:	2804923a 	slli	r2,r5,8
    e2e0:	020003c4 	movi	r8,15
    e2e4:	200f883a 	mov	r7,r4
    e2e8:	2884b03a 	or	r2,r5,r2
    e2ec:	1006943a 	slli	r3,r2,16
    e2f0:	10c6b03a 	or	r3,r2,r3
    e2f4:	41800a2e 	bgeu	r8,r6,e320 <memset+0x7c>
    e2f8:	4005883a 	mov	r2,r8
    e2fc:	31bffc04 	addi	r6,r6,-16
    e300:	38c00015 	stw	r3,0(r7)
    e304:	38c00115 	stw	r3,4(r7)
    e308:	38c00215 	stw	r3,8(r7)
    e30c:	38c00315 	stw	r3,12(r7)
    e310:	39c00404 	addi	r7,r7,16
    e314:	11bff936 	bltu	r2,r6,e2fc <memset+0x58>
    e318:	008000c4 	movi	r2,3
    e31c:	1180052e 	bgeu	r2,r6,e334 <memset+0x90>
    e320:	31bfff04 	addi	r6,r6,-4
    e324:	008000c4 	movi	r2,3
    e328:	38c00015 	stw	r3,0(r7)
    e32c:	39c00104 	addi	r7,r7,4
    e330:	11bffb36 	bltu	r2,r6,e320 <memset+0x7c>
    e334:	3807883a 	mov	r3,r7
    e338:	003fe006 	br	e2bc <memset+0x18>

0000e33c <__register_exitproc>:
    e33c:	defffa04 	addi	sp,sp,-24
    e340:	00800074 	movhi	r2,1
    e344:	10817204 	addi	r2,r2,1480
    e348:	dc000015 	stw	r16,0(sp)
    e34c:	14000017 	ldw	r16,0(r2)
    e350:	dd000415 	stw	r20,16(sp)
    e354:	2829883a 	mov	r20,r5
    e358:	81405217 	ldw	r5,328(r16)
    e35c:	dcc00315 	stw	r19,12(sp)
    e360:	dc800215 	stw	r18,8(sp)
    e364:	dc400115 	stw	r17,4(sp)
    e368:	dfc00515 	stw	ra,20(sp)
    e36c:	2023883a 	mov	r17,r4
    e370:	3027883a 	mov	r19,r6
    e374:	3825883a 	mov	r18,r7
    e378:	28002526 	beq	r5,zero,e410 <__register_exitproc+0xd4>
    e37c:	29000117 	ldw	r4,4(r5)
    e380:	008007c4 	movi	r2,31
    e384:	11002716 	blt	r2,r4,e424 <__register_exitproc+0xe8>
    e388:	8800101e 	bne	r17,zero,e3cc <__register_exitproc+0x90>
    e38c:	2105883a 	add	r2,r4,r4
    e390:	1085883a 	add	r2,r2,r2
    e394:	20c00044 	addi	r3,r4,1
    e398:	1145883a 	add	r2,r2,r5
    e39c:	0009883a 	mov	r4,zero
    e3a0:	15000215 	stw	r20,8(r2)
    e3a4:	28c00115 	stw	r3,4(r5)
    e3a8:	2005883a 	mov	r2,r4
    e3ac:	dfc00517 	ldw	ra,20(sp)
    e3b0:	dd000417 	ldw	r20,16(sp)
    e3b4:	dcc00317 	ldw	r19,12(sp)
    e3b8:	dc800217 	ldw	r18,8(sp)
    e3bc:	dc400117 	ldw	r17,4(sp)
    e3c0:	dc000017 	ldw	r16,0(sp)
    e3c4:	dec00604 	addi	sp,sp,24
    e3c8:	f800283a 	ret
    e3cc:	29802204 	addi	r6,r5,136
    e3d0:	00800044 	movi	r2,1
    e3d4:	110e983a 	sll	r7,r2,r4
    e3d8:	30c04017 	ldw	r3,256(r6)
    e3dc:	2105883a 	add	r2,r4,r4
    e3e0:	1085883a 	add	r2,r2,r2
    e3e4:	1185883a 	add	r2,r2,r6
    e3e8:	19c6b03a 	or	r3,r3,r7
    e3ec:	14802015 	stw	r18,128(r2)
    e3f0:	14c00015 	stw	r19,0(r2)
    e3f4:	00800084 	movi	r2,2
    e3f8:	30c04015 	stw	r3,256(r6)
    e3fc:	88bfe31e 	bne	r17,r2,e38c <__register_exitproc+0x50>
    e400:	30804117 	ldw	r2,260(r6)
    e404:	11c4b03a 	or	r2,r2,r7
    e408:	30804115 	stw	r2,260(r6)
    e40c:	003fdf06 	br	e38c <__register_exitproc+0x50>
    e410:	00800074 	movhi	r2,1
    e414:	10883b04 	addi	r2,r2,8428
    e418:	100b883a 	mov	r5,r2
    e41c:	80805215 	stw	r2,328(r16)
    e420:	003fd606 	br	e37c <__register_exitproc+0x40>
    e424:	00800034 	movhi	r2,0
    e428:	10800004 	addi	r2,r2,0
    e42c:	1000021e 	bne	r2,zero,e438 <__register_exitproc+0xfc>
    e430:	013fffc4 	movi	r4,-1
    e434:	003fdc06 	br	e3a8 <__register_exitproc+0x6c>
    e438:	01006404 	movi	r4,400
    e43c:	103ee83a 	callr	r2
    e440:	1007883a 	mov	r3,r2
    e444:	103ffa26 	beq	r2,zero,e430 <__register_exitproc+0xf4>
    e448:	80805217 	ldw	r2,328(r16)
    e44c:	180b883a 	mov	r5,r3
    e450:	18000115 	stw	zero,4(r3)
    e454:	18800015 	stw	r2,0(r3)
    e458:	80c05215 	stw	r3,328(r16)
    e45c:	18006215 	stw	zero,392(r3)
    e460:	18006315 	stw	zero,396(r3)
    e464:	0009883a 	mov	r4,zero
    e468:	883fc826 	beq	r17,zero,e38c <__register_exitproc+0x50>
    e46c:	003fd706 	br	e3cc <__register_exitproc+0x90>

0000e470 <register_fini>:
    e470:	f800283a 	ret

0000e474 <__call_exitprocs>:
    e474:	00800074 	movhi	r2,1
    e478:	10817204 	addi	r2,r2,1480
    e47c:	10800017 	ldw	r2,0(r2)
    e480:	defff304 	addi	sp,sp,-52
    e484:	df000b15 	stw	fp,44(sp)
    e488:	d8800115 	stw	r2,4(sp)
    e48c:	00800034 	movhi	r2,0
    e490:	10800004 	addi	r2,r2,0
    e494:	1005003a 	cmpeq	r2,r2,zero
    e498:	d8800215 	stw	r2,8(sp)
    e49c:	d8800117 	ldw	r2,4(sp)
    e4a0:	dd400815 	stw	r21,32(sp)
    e4a4:	dd000715 	stw	r20,28(sp)
    e4a8:	10805204 	addi	r2,r2,328
    e4ac:	dfc00c15 	stw	ra,48(sp)
    e4b0:	ddc00a15 	stw	r23,40(sp)
    e4b4:	dd800915 	stw	r22,36(sp)
    e4b8:	dcc00615 	stw	r19,24(sp)
    e4bc:	dc800515 	stw	r18,20(sp)
    e4c0:	dc400415 	stw	r17,16(sp)
    e4c4:	dc000315 	stw	r16,12(sp)
    e4c8:	282b883a 	mov	r21,r5
    e4cc:	2039883a 	mov	fp,r4
    e4d0:	d8800015 	stw	r2,0(sp)
    e4d4:	2829003a 	cmpeq	r20,r5,zero
    e4d8:	d8800117 	ldw	r2,4(sp)
    e4dc:	14405217 	ldw	r17,328(r2)
    e4e0:	88001026 	beq	r17,zero,e524 <__call_exitprocs+0xb0>
    e4e4:	ddc00017 	ldw	r23,0(sp)
    e4e8:	88800117 	ldw	r2,4(r17)
    e4ec:	8c802204 	addi	r18,r17,136
    e4f0:	143fffc4 	addi	r16,r2,-1
    e4f4:	80000916 	blt	r16,zero,e51c <__call_exitprocs+0xa8>
    e4f8:	05bfffc4 	movi	r22,-1
    e4fc:	a000151e 	bne	r20,zero,e554 <__call_exitprocs+0xe0>
    e500:	8409883a 	add	r4,r16,r16
    e504:	2105883a 	add	r2,r4,r4
    e508:	1485883a 	add	r2,r2,r18
    e50c:	10c02017 	ldw	r3,128(r2)
    e510:	a8c01126 	beq	r21,r3,e558 <__call_exitprocs+0xe4>
    e514:	843fffc4 	addi	r16,r16,-1
    e518:	85bff81e 	bne	r16,r22,e4fc <__call_exitprocs+0x88>
    e51c:	d8800217 	ldw	r2,8(sp)
    e520:	10003126 	beq	r2,zero,e5e8 <__call_exitprocs+0x174>
    e524:	dfc00c17 	ldw	ra,48(sp)
    e528:	df000b17 	ldw	fp,44(sp)
    e52c:	ddc00a17 	ldw	r23,40(sp)
    e530:	dd800917 	ldw	r22,36(sp)
    e534:	dd400817 	ldw	r21,32(sp)
    e538:	dd000717 	ldw	r20,28(sp)
    e53c:	dcc00617 	ldw	r19,24(sp)
    e540:	dc800517 	ldw	r18,20(sp)
    e544:	dc400417 	ldw	r17,16(sp)
    e548:	dc000317 	ldw	r16,12(sp)
    e54c:	dec00d04 	addi	sp,sp,52
    e550:	f800283a 	ret
    e554:	8409883a 	add	r4,r16,r16
    e558:	88c00117 	ldw	r3,4(r17)
    e55c:	2105883a 	add	r2,r4,r4
    e560:	1445883a 	add	r2,r2,r17
    e564:	18ffffc4 	addi	r3,r3,-1
    e568:	11800217 	ldw	r6,8(r2)
    e56c:	1c001526 	beq	r3,r16,e5c4 <__call_exitprocs+0x150>
    e570:	10000215 	stw	zero,8(r2)
    e574:	303fe726 	beq	r6,zero,e514 <__call_exitprocs+0xa0>
    e578:	00c00044 	movi	r3,1
    e57c:	1c06983a 	sll	r3,r3,r16
    e580:	90804017 	ldw	r2,256(r18)
    e584:	8cc00117 	ldw	r19,4(r17)
    e588:	1884703a 	and	r2,r3,r2
    e58c:	10001426 	beq	r2,zero,e5e0 <__call_exitprocs+0x16c>
    e590:	90804117 	ldw	r2,260(r18)
    e594:	1884703a 	and	r2,r3,r2
    e598:	10000c1e 	bne	r2,zero,e5cc <__call_exitprocs+0x158>
    e59c:	2105883a 	add	r2,r4,r4
    e5a0:	1485883a 	add	r2,r2,r18
    e5a4:	11400017 	ldw	r5,0(r2)
    e5a8:	e009883a 	mov	r4,fp
    e5ac:	303ee83a 	callr	r6
    e5b0:	88800117 	ldw	r2,4(r17)
    e5b4:	98bfc81e 	bne	r19,r2,e4d8 <__call_exitprocs+0x64>
    e5b8:	b8800017 	ldw	r2,0(r23)
    e5bc:	147fd526 	beq	r2,r17,e514 <__call_exitprocs+0xa0>
    e5c0:	003fc506 	br	e4d8 <__call_exitprocs+0x64>
    e5c4:	8c000115 	stw	r16,4(r17)
    e5c8:	003fea06 	br	e574 <__call_exitprocs+0x100>
    e5cc:	2105883a 	add	r2,r4,r4
    e5d0:	1485883a 	add	r2,r2,r18
    e5d4:	11000017 	ldw	r4,0(r2)
    e5d8:	303ee83a 	callr	r6
    e5dc:	003ff406 	br	e5b0 <__call_exitprocs+0x13c>
    e5e0:	303ee83a 	callr	r6
    e5e4:	003ff206 	br	e5b0 <__call_exitprocs+0x13c>
    e5e8:	88800117 	ldw	r2,4(r17)
    e5ec:	1000081e 	bne	r2,zero,e610 <__call_exitprocs+0x19c>
    e5f0:	89000017 	ldw	r4,0(r17)
    e5f4:	20000726 	beq	r4,zero,e614 <__call_exitprocs+0x1a0>
    e5f8:	b9000015 	stw	r4,0(r23)
    e5fc:	8809883a 	mov	r4,r17
    e600:	00000000 	call	0 <__alt_mem_SSRAM>
    e604:	bc400017 	ldw	r17,0(r23)
    e608:	883fb71e 	bne	r17,zero,e4e8 <__call_exitprocs+0x74>
    e60c:	003fc506 	br	e524 <__call_exitprocs+0xb0>
    e610:	89000017 	ldw	r4,0(r17)
    e614:	882f883a 	mov	r23,r17
    e618:	2023883a 	mov	r17,r4
    e61c:	883fb21e 	bne	r17,zero,e4e8 <__call_exitprocs+0x74>
    e620:	003fc006 	br	e524 <__call_exitprocs+0xb0>

0000e624 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    e624:	defffd04 	addi	sp,sp,-12
    e628:	de00012e 	bgeu	sp,et,e630 <alt_sim_halt+0xc>
    e62c:	003da0fa 	break	3
    e630:	df000215 	stw	fp,8(sp)
    e634:	df000204 	addi	fp,sp,8
    e638:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    e63c:	e0bfff17 	ldw	r2,-4(fp)
    e640:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e644:	e0bffe17 	ldw	r2,-8(fp)
    e648:	1005003a 	cmpeq	r2,r2,zero
    e64c:	1000021e 	bne	r2,zero,e658 <alt_sim_halt+0x34>
    ALT_SIM_FAIL();
    e650:	002af070 	cmpltui	zero,zero,43969
    e654:	00000106 	br	e65c <alt_sim_halt+0x38>
  } else {
    ALT_SIM_PASS();
    e658:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    e65c:	e037883a 	mov	sp,fp
    e660:	df000017 	ldw	fp,0(sp)
    e664:	dec00104 	addi	sp,sp,4
    e668:	f800283a 	ret

0000e66c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    e66c:	defffd04 	addi	sp,sp,-12
    e670:	de00012e 	bgeu	sp,et,e678 <_exit+0xc>
    e674:	003da0fa 	break	3
    e678:	dfc00215 	stw	ra,8(sp)
    e67c:	df000115 	stw	fp,4(sp)
    e680:	df000104 	addi	fp,sp,4
    e684:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    e688:	e13fff17 	ldw	r4,-4(fp)
    e68c:	000e6240 	call	e624 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    e690:	003fff06 	br	e690 <_exit+0x24>
    e694:	0000e470 	cmpltui	zero,zero,913
